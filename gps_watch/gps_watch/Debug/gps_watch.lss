
gps_watch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000036d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000004bc  00800060  000036d4  00003768  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  0080051c  0080051c  00003c24  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003c24  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001d8  00000000  00000000  00003c80  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003090  00000000  00000000  00003e58  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000540  00000000  00000000  00006ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a82  00000000  00000000  00007428  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000958  00000000  00000000  00007eac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006b6  00000000  00000000  00008804  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002b67  00000000  00000000  00008eba  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000228  00000000  00000000  0000ba21  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__ctors_end>
       4:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
       8:	0c 94 af 07 	jmp	0xf5e	; 0xf5e <__vector_2>
       c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      10:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      14:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      18:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      1c:	0c 94 af 0d 	jmp	0x1b5e	; 0x1b5e <__vector_7>
      20:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      24:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      28:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      2c:	0c 94 04 0f 	jmp	0x1e08	; 0x1e08 <__vector_11>
      30:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      34:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      38:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      3c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      40:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      44:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      48:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      4c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      50:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      54:	03 6e       	ori	r16, 0xE3	; 227
      56:	db 36       	cpi	r29, 0x6B	; 107
      58:	3d 9a       	sbi	0x07, 5	; 7
      5a:	99 99       	sbic	0x13, 1	; 19
      5c:	99 3d       	cpi	r25, 0xD9	; 217
      5e:	ab aa       	std	Y+51, r10	; 0x33
      60:	aa 2a       	or	r10, r26
      62:	3e 00       	.word	0x003e	; ????
      64:	00 00       	nop
      66:	80 3f       	cpi	r24, 0xF0	; 240
      68:	07 2c       	mov	r0, r7
      6a:	7a a5       	ldd	r23, Y+42	; 0x2a
      6c:	ba 6c       	ori	r27, 0xCA	; 202
      6e:	c5 90       	lpm	r12, Z+
      70:	da 3b       	cpi	r29, 0xBA	; 186
      72:	93 65       	ori	r25, 0x53	; 83
      74:	fc 8b       	std	Y+20, r31	; 0x14
      76:	bc 53       	subi	r27, 0x3C	; 60
      78:	f8 10       	cpse	r15, r8
      7a:	fd 3c       	cpi	r31, 0xCD	; 205
      7c:	56 92       	lac	Z, r5
      7e:	83 4d       	sbci	r24, 0xD3	; 211
      80:	bd 87       	std	Y+13, r27	; 0x0d
      82:	9d 3a       	cpi	r25, 0xAD	; 173
      84:	b6 3d       	cpi	r27, 0xD6	; 214
      86:	cb c9       	rjmp	.-3178   	; 0xfffff41e <__eeprom_end+0xff7ef41e>
      88:	bf 5b       	subi	r27, 0xBF	; 191
      8a:	be 73       	andi	r27, 0x3E	; 62
      8c:	da 0f       	add	r29, r26
      8e:	c9 3f       	cpi	r28, 0xF9	; 249
      90:	05 a8       	ldd	r0, Z+53	; 0x35
      92:	4c cd       	rjmp	.-1384   	; 0xfffffb2c <__eeprom_end+0xff7efb2c>
      94:	b2 d4       	rcall	.+2404   	; 0x9fa <distance+0x108>
      96:	4e b9       	out	0x0e, r20	; 14
      98:	38 36       	cpi	r19, 0x68	; 104
      9a:	a9 02       	muls	r26, r25
      9c:	0c 50       	subi	r16, 0x0C	; 12
      9e:	b9 91       	ld	r27, Y+
      a0:	86 88       	ldd	r8, Z+22	; 0x16
      a2:	08 3c       	cpi	r16, 0xC8	; 200
      a4:	a6 aa       	std	Z+54, r10	; 0x36
      a6:	aa 2a       	or	r10, r26
      a8:	be 00       	.word	0x00be	; ????
      aa:	00 00       	nop
      ac:	80 3f       	cpi	r24, 0xF0	; 240

000000ae <__trampolines_end>:
      ae:	6e 61       	ori	r22, 0x1E	; 30
      b0:	6e 00       	.word	0x006e	; ????

000000b2 <__c.2159>:
      b2:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      c2:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      d2:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      e2:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      f2:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     102:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     112:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     122:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     132:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     142:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     152:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     162:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     172:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     182:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     192:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1a2:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000001b0 <pstr_nan>:
     1b0:	4e 41 4e                                            NAN

000001b3 <pstr_inity>:
     1b3:	49 4e 49 54 59                                      INITY

000001b8 <pstr_inf>:
     1b8:	49 4e 46                                            INF

000001bb <pwr_m10>:
     1bb:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     1cb:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000001d3 <pwr_p10>:
     1d3:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     1e3:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

000001ec <__ctors_end>:
     1ec:	11 24       	eor	r1, r1
     1ee:	1f be       	out	0x3f, r1	; 63
     1f0:	cf e5       	ldi	r28, 0x5F	; 95
     1f2:	d8 e0       	ldi	r29, 0x08	; 8
     1f4:	de bf       	out	0x3e, r29	; 62
     1f6:	cd bf       	out	0x3d, r28	; 61

000001f8 <__do_copy_data>:
     1f8:	15 e0       	ldi	r17, 0x05	; 5
     1fa:	a0 e6       	ldi	r26, 0x60	; 96
     1fc:	b0 e0       	ldi	r27, 0x00	; 0
     1fe:	e4 ed       	ldi	r30, 0xD4	; 212
     200:	f6 e3       	ldi	r31, 0x36	; 54
     202:	02 c0       	rjmp	.+4      	; 0x208 <__do_copy_data+0x10>
     204:	05 90       	lpm	r0, Z+
     206:	0d 92       	st	X+, r0
     208:	ac 31       	cpi	r26, 0x1C	; 28
     20a:	b1 07       	cpc	r27, r17
     20c:	d9 f7       	brne	.-10     	; 0x204 <__do_copy_data+0xc>

0000020e <__do_clear_bss>:
     20e:	25 e0       	ldi	r18, 0x05	; 5
     210:	ac e1       	ldi	r26, 0x1C	; 28
     212:	b5 e0       	ldi	r27, 0x05	; 5
     214:	01 c0       	rjmp	.+2      	; 0x218 <.do_clear_bss_start>

00000216 <.do_clear_bss_loop>:
     216:	1d 92       	st	X+, r1

00000218 <.do_clear_bss_start>:
     218:	ac 35       	cpi	r26, 0x5C	; 92
     21a:	b2 07       	cpc	r27, r18
     21c:	e1 f7       	brne	.-8      	; 0x216 <.do_clear_bss_loop>
     21e:	0e 94 24 08 	call	0x1048	; 0x1048 <main>
     222:	0c 94 68 1b 	jmp	0x36d0	; 0x36d0 <_exit>

00000226 <__bad_interrupt>:
     226:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000022a <uart_putchar>:
void showDistanceOnLCD(uint16_t dist);
void showCurrentLocation();
void showLocationDistance();
void showDirection();

void uart_putchar(char c, FILE *stream) {
     22a:	cf 93       	push	r28
     22c:	c8 2f       	mov	r28, r24
	if (c == '\n') {
     22e:	8a 30       	cpi	r24, 0x0A	; 10
     230:	19 f4       	brne	.+6      	; 0x238 <uart_putchar+0xe>
		uart_putchar('\r', stream);
     232:	8d e0       	ldi	r24, 0x0D	; 13
     234:	0e 94 15 01 	call	0x22a	; 0x22a <uart_putchar>
	}
	loop_until_bit_is_set(UCSRA, UDRE);
     238:	5d 9b       	sbis	0x0b, 5	; 11
     23a:	fe cf       	rjmp	.-4      	; 0x238 <uart_putchar+0xe>
	UDR = c;
     23c:	cc b9       	out	0x0c, r28	; 12
}
     23e:	cf 91       	pop	r28
     240:	08 95       	ret

00000242 <uart_getchar>:

char uart_getchar(FILE *stream) {
	loop_until_bit_is_set(UCSRA, RXC);
     242:	5f 9b       	sbis	0x0b, 7	; 11
     244:	fe cf       	rjmp	.-4      	; 0x242 <uart_getchar>
	return UDR;
     246:	8c b1       	in	r24, 0x0c	; 12
}
     248:	08 95       	ret

0000024a <pinChange>:

#include<util/delay.h>

void pinChange(int a, int b)
{
	if(b == 0)
     24a:	67 2b       	or	r22, r23
     24c:	09 f0       	breq	.+2      	; 0x250 <pinChange+0x6>
     24e:	9f c0       	rjmp	.+318    	; 0x38e <pinChange+0x144>
	{
		if(a == eS_PORTA0)
     250:	00 97       	sbiw	r24, 0x00	; 0
     252:	11 f4       	brne	.+4      	; 0x258 <pinChange+0xe>
		  PORTA &= ~(1<<PA0);
     254:	d8 98       	cbi	0x1b, 0	; 27
     256:	08 95       	ret
		else if(a == eS_PORTA1)
     258:	81 30       	cpi	r24, 0x01	; 1
     25a:	91 05       	cpc	r25, r1
     25c:	11 f4       	brne	.+4      	; 0x262 <pinChange+0x18>
		  PORTA &= ~(1<<PA1); 
     25e:	d9 98       	cbi	0x1b, 1	; 27
     260:	08 95       	ret
		else if(a == eS_PORTA2)
     262:	82 30       	cpi	r24, 0x02	; 2
     264:	91 05       	cpc	r25, r1
     266:	11 f4       	brne	.+4      	; 0x26c <pinChange+0x22>
		  PORTA &= ~(1<<PA2);
     268:	da 98       	cbi	0x1b, 2	; 27
     26a:	08 95       	ret
		else if(a == eS_PORTA3)
     26c:	83 30       	cpi	r24, 0x03	; 3
     26e:	91 05       	cpc	r25, r1
     270:	11 f4       	brne	.+4      	; 0x276 <pinChange+0x2c>
		  PORTA &= ~(1<<PA3); 
     272:	db 98       	cbi	0x1b, 3	; 27
     274:	08 95       	ret
		else if(a == eS_PORTA4)
     276:	84 30       	cpi	r24, 0x04	; 4
     278:	91 05       	cpc	r25, r1
     27a:	11 f4       	brne	.+4      	; 0x280 <pinChange+0x36>
		  PORTA &= ~(1<<PA4); 
     27c:	dc 98       	cbi	0x1b, 4	; 27
     27e:	08 95       	ret
		else if(a == eS_PORTA5)
     280:	85 30       	cpi	r24, 0x05	; 5
     282:	91 05       	cpc	r25, r1
     284:	11 f4       	brne	.+4      	; 0x28a <pinChange+0x40>
		  PORTA &= ~(1<<PA5); 
     286:	dd 98       	cbi	0x1b, 5	; 27
     288:	08 95       	ret
		else if(a == eS_PORTA6)
     28a:	86 30       	cpi	r24, 0x06	; 6
     28c:	91 05       	cpc	r25, r1
     28e:	11 f4       	brne	.+4      	; 0x294 <pinChange+0x4a>
		  PORTA &= ~(1<<PA6);  
     290:	de 98       	cbi	0x1b, 6	; 27
     292:	08 95       	ret
		else if(a == eS_PORTA7)
     294:	87 30       	cpi	r24, 0x07	; 7
     296:	91 05       	cpc	r25, r1
     298:	11 f4       	brne	.+4      	; 0x29e <pinChange+0x54>
		  PORTA &= ~(1<<PA7);
     29a:	df 98       	cbi	0x1b, 7	; 27
     29c:	08 95       	ret
		else if(a == eS_PORTB0)
     29e:	8a 30       	cpi	r24, 0x0A	; 10
     2a0:	91 05       	cpc	r25, r1
     2a2:	11 f4       	brne	.+4      	; 0x2a8 <pinChange+0x5e>
		  PORTB &= ~(1<<PB0);  
     2a4:	c0 98       	cbi	0x18, 0	; 24
     2a6:	08 95       	ret
		else if(a == eS_PORTB1)
     2a8:	8b 30       	cpi	r24, 0x0B	; 11
     2aa:	91 05       	cpc	r25, r1
     2ac:	11 f4       	brne	.+4      	; 0x2b2 <pinChange+0x68>
		  PORTB &= ~(1<<PB1);
     2ae:	c1 98       	cbi	0x18, 1	; 24
     2b0:	08 95       	ret
		else if(a == eS_PORTB2)
     2b2:	8c 30       	cpi	r24, 0x0C	; 12
     2b4:	91 05       	cpc	r25, r1
     2b6:	11 f4       	brne	.+4      	; 0x2bc <pinChange+0x72>
		  PORTB &= ~(1<<PB2);  
     2b8:	c2 98       	cbi	0x18, 2	; 24
     2ba:	08 95       	ret
		else if(a == eS_PORTB3)
     2bc:	8d 30       	cpi	r24, 0x0D	; 13
     2be:	91 05       	cpc	r25, r1
     2c0:	11 f4       	brne	.+4      	; 0x2c6 <pinChange+0x7c>
		  PORTB &= ~(1<<PB3);  
     2c2:	c3 98       	cbi	0x18, 3	; 24
     2c4:	08 95       	ret
		else if(a == eS_PORTB4)
     2c6:	8e 30       	cpi	r24, 0x0E	; 14
     2c8:	91 05       	cpc	r25, r1
     2ca:	11 f4       	brne	.+4      	; 0x2d0 <pinChange+0x86>
		  PORTB &= ~(1<<PB4);  
     2cc:	c4 98       	cbi	0x18, 4	; 24
     2ce:	08 95       	ret
		else if(a == eS_PORTB5)
     2d0:	8f 30       	cpi	r24, 0x0F	; 15
     2d2:	91 05       	cpc	r25, r1
     2d4:	11 f4       	brne	.+4      	; 0x2da <pinChange+0x90>
		  PORTB &= ~(1<<PB5);  
     2d6:	c5 98       	cbi	0x18, 5	; 24
     2d8:	08 95       	ret
		else if(a == eS_PORTB6)
     2da:	80 31       	cpi	r24, 0x10	; 16
     2dc:	91 05       	cpc	r25, r1
     2de:	11 f4       	brne	.+4      	; 0x2e4 <pinChange+0x9a>
		  PORTB &= ~(1<<PB6);  
     2e0:	c6 98       	cbi	0x18, 6	; 24
     2e2:	08 95       	ret
		else if(a == eS_PORTB7)
     2e4:	81 31       	cpi	r24, 0x11	; 17
     2e6:	91 05       	cpc	r25, r1
     2e8:	11 f4       	brne	.+4      	; 0x2ee <pinChange+0xa4>
		  PORTB &= ~(1<<PB7);
     2ea:	c7 98       	cbi	0x18, 7	; 24
     2ec:	08 95       	ret
		else if(a == eS_PORTC0)
     2ee:	84 31       	cpi	r24, 0x14	; 20
     2f0:	91 05       	cpc	r25, r1
     2f2:	11 f4       	brne	.+4      	; 0x2f8 <pinChange+0xae>
		  PORTC &= ~(1<<PC0);   
     2f4:	a8 98       	cbi	0x15, 0	; 21
     2f6:	08 95       	ret
		else if(a == eS_PORTC1)
     2f8:	85 31       	cpi	r24, 0x15	; 21
     2fa:	91 05       	cpc	r25, r1
     2fc:	11 f4       	brne	.+4      	; 0x302 <pinChange+0xb8>
		  PORTC &= ~(1<<PC1); 
     2fe:	a9 98       	cbi	0x15, 1	; 21
     300:	08 95       	ret
		else if(a == eS_PORTC2)
     302:	86 31       	cpi	r24, 0x16	; 22
     304:	91 05       	cpc	r25, r1
     306:	11 f4       	brne	.+4      	; 0x30c <pinChange+0xc2>
		  PORTC &= ~(1<<PC2);
     308:	aa 98       	cbi	0x15, 2	; 21
     30a:	08 95       	ret
		else if(a == eS_PORTC3)
     30c:	87 31       	cpi	r24, 0x17	; 23
     30e:	91 05       	cpc	r25, r1
     310:	11 f4       	brne	.+4      	; 0x316 <pinChange+0xcc>
		  PORTC &= ~(1<<PC3);   
     312:	ab 98       	cbi	0x15, 3	; 21
     314:	08 95       	ret
		else if(a == eS_PORTC4)
     316:	88 31       	cpi	r24, 0x18	; 24
     318:	91 05       	cpc	r25, r1
     31a:	11 f4       	brne	.+4      	; 0x320 <pinChange+0xd6>
		  PORTC &= ~(1<<PC4);  
     31c:	ac 98       	cbi	0x15, 4	; 21
     31e:	08 95       	ret
		else if(a == eS_PORTC5)
     320:	89 31       	cpi	r24, 0x19	; 25
     322:	91 05       	cpc	r25, r1
     324:	11 f4       	brne	.+4      	; 0x32a <pinChange+0xe0>
		  PORTC &= ~(1<<PC5);  
     326:	ad 98       	cbi	0x15, 5	; 21
     328:	08 95       	ret
        else if(a == eS_PORTC6)
     32a:	8a 31       	cpi	r24, 0x1A	; 26
     32c:	91 05       	cpc	r25, r1
     32e:	11 f4       	brne	.+4      	; 0x334 <pinChange+0xea>
          PORTC &= ~(1<<PC6);		
     330:	ae 98       	cbi	0x15, 6	; 21
     332:	08 95       	ret
		else if(a == eS_PORTC7)
     334:	8b 31       	cpi	r24, 0x1B	; 27
     336:	91 05       	cpc	r25, r1
     338:	11 f4       	brne	.+4      	; 0x33e <pinChange+0xf4>
		  PORTC &= ~(1<<PC7);
     33a:	af 98       	cbi	0x15, 7	; 21
     33c:	08 95       	ret
		else if(a == eS_PORTD0)
     33e:	8e 31       	cpi	r24, 0x1E	; 30
     340:	91 05       	cpc	r25, r1
     342:	11 f4       	brne	.+4      	; 0x348 <pinChange+0xfe>
		  PORTD &= ~(1<<PD0);
     344:	90 98       	cbi	0x12, 0	; 18
     346:	08 95       	ret
		else if(a == eS_PORTD1)
     348:	8f 31       	cpi	r24, 0x1F	; 31
     34a:	91 05       	cpc	r25, r1
     34c:	11 f4       	brne	.+4      	; 0x352 <pinChange+0x108>
		  PORTD &= ~(1<<PD1);  
     34e:	91 98       	cbi	0x12, 1	; 18
     350:	08 95       	ret
		else if(a == eS_PORTD2)
     352:	80 32       	cpi	r24, 0x20	; 32
     354:	91 05       	cpc	r25, r1
     356:	11 f4       	brne	.+4      	; 0x35c <pinChange+0x112>
		  PORTD &= ~(1<<PD2);
     358:	92 98       	cbi	0x12, 2	; 18
     35a:	08 95       	ret
		else if(a == eS_PORTD3)
     35c:	81 32       	cpi	r24, 0x21	; 33
     35e:	91 05       	cpc	r25, r1
     360:	11 f4       	brne	.+4      	; 0x366 <pinChange+0x11c>
		  PORTD &= ~(1<<PD3);
     362:	93 98       	cbi	0x12, 3	; 18
     364:	08 95       	ret
		else if(a == eS_PORTD4)
     366:	82 32       	cpi	r24, 0x22	; 34
     368:	91 05       	cpc	r25, r1
     36a:	11 f4       	brne	.+4      	; 0x370 <pinChange+0x126>
		  PORTD &= ~(1<<PD4);
     36c:	94 98       	cbi	0x12, 4	; 18
     36e:	08 95       	ret
		else if(a == eS_PORTD5)
     370:	83 32       	cpi	r24, 0x23	; 35
     372:	91 05       	cpc	r25, r1
     374:	11 f4       	brne	.+4      	; 0x37a <pinChange+0x130>
		  PORTD &= ~(1<<PD5);
     376:	95 98       	cbi	0x12, 5	; 18
     378:	08 95       	ret
		else if(a == eS_PORTD6)
     37a:	84 32       	cpi	r24, 0x24	; 36
     37c:	91 05       	cpc	r25, r1
     37e:	11 f4       	brne	.+4      	; 0x384 <pinChange+0x13a>
		  PORTD &= ~(1<<PD6);   
     380:	96 98       	cbi	0x12, 6	; 18
     382:	08 95       	ret
		else if(a == eS_PORTD7)
     384:	85 97       	sbiw	r24, 0x25	; 37
     386:	09 f0       	breq	.+2      	; 0x38a <pinChange+0x140>
     388:	9f c0       	rjmp	.+318    	; 0x4c8 <pinChange+0x27e>
		  PORTD &= ~(1<<PD7);           
     38a:	97 98       	cbi	0x12, 7	; 18
     38c:	08 95       	ret
	}
	else
	{
		if(a == eS_PORTA0)
     38e:	00 97       	sbiw	r24, 0x00	; 0
     390:	11 f4       	brne	.+4      	; 0x396 <pinChange+0x14c>
		  PORTA |= (1<<PA0);
     392:	d8 9a       	sbi	0x1b, 0	; 27
     394:	08 95       	ret
		else if(a == eS_PORTA1)
     396:	81 30       	cpi	r24, 0x01	; 1
     398:	91 05       	cpc	r25, r1
     39a:	11 f4       	brne	.+4      	; 0x3a0 <pinChange+0x156>
		  PORTA |= (1<<PA1);
     39c:	d9 9a       	sbi	0x1b, 1	; 27
     39e:	08 95       	ret
		else if(a == eS_PORTA2)
     3a0:	82 30       	cpi	r24, 0x02	; 2
     3a2:	91 05       	cpc	r25, r1
     3a4:	11 f4       	brne	.+4      	; 0x3aa <pinChange+0x160>
		  PORTA |= (1<<PA2);
     3a6:	da 9a       	sbi	0x1b, 2	; 27
     3a8:	08 95       	ret
		else if(a == eS_PORTA3)
     3aa:	83 30       	cpi	r24, 0x03	; 3
     3ac:	91 05       	cpc	r25, r1
     3ae:	11 f4       	brne	.+4      	; 0x3b4 <pinChange+0x16a>
		  PORTA |= (1<<PA3);
     3b0:	db 9a       	sbi	0x1b, 3	; 27
     3b2:	08 95       	ret
		else if(a == eS_PORTA4)
     3b4:	84 30       	cpi	r24, 0x04	; 4
     3b6:	91 05       	cpc	r25, r1
     3b8:	11 f4       	brne	.+4      	; 0x3be <pinChange+0x174>
		  PORTA |= (1<<PA4);
     3ba:	dc 9a       	sbi	0x1b, 4	; 27
     3bc:	08 95       	ret
		else if(a == eS_PORTA5)
     3be:	85 30       	cpi	r24, 0x05	; 5
     3c0:	91 05       	cpc	r25, r1
     3c2:	11 f4       	brne	.+4      	; 0x3c8 <pinChange+0x17e>
		  PORTA |= (1<<PA5);
     3c4:	dd 9a       	sbi	0x1b, 5	; 27
     3c6:	08 95       	ret
		else if(a == eS_PORTA6)
     3c8:	86 30       	cpi	r24, 0x06	; 6
     3ca:	91 05       	cpc	r25, r1
     3cc:	11 f4       	brne	.+4      	; 0x3d2 <pinChange+0x188>
		  PORTA |= (1<<PA6);
     3ce:	de 9a       	sbi	0x1b, 6	; 27
     3d0:	08 95       	ret
		else if(a == eS_PORTA7)
     3d2:	87 30       	cpi	r24, 0x07	; 7
     3d4:	91 05       	cpc	r25, r1
     3d6:	11 f4       	brne	.+4      	; 0x3dc <pinChange+0x192>
		  PORTA |= (1<<PA7);
     3d8:	df 9a       	sbi	0x1b, 7	; 27
     3da:	08 95       	ret
		else if(a == eS_PORTB0)
     3dc:	8a 30       	cpi	r24, 0x0A	; 10
     3de:	91 05       	cpc	r25, r1
     3e0:	11 f4       	brne	.+4      	; 0x3e6 <pinChange+0x19c>
	  	  PORTB |= (1<<PB0);
     3e2:	c0 9a       	sbi	0x18, 0	; 24
     3e4:	08 95       	ret
		else if(a == eS_PORTB1)
     3e6:	8b 30       	cpi	r24, 0x0B	; 11
     3e8:	91 05       	cpc	r25, r1
     3ea:	11 f4       	brne	.+4      	; 0x3f0 <pinChange+0x1a6>
		  PORTB |= (1<<PB1);
     3ec:	c1 9a       	sbi	0x18, 1	; 24
     3ee:	08 95       	ret
		else if(a == eS_PORTB2)
     3f0:	8c 30       	cpi	r24, 0x0C	; 12
     3f2:	91 05       	cpc	r25, r1
     3f4:	11 f4       	brne	.+4      	; 0x3fa <pinChange+0x1b0>
		  PORTB |= (1<<PB2);
     3f6:	c2 9a       	sbi	0x18, 2	; 24
     3f8:	08 95       	ret
		else if(a == eS_PORTB3)
     3fa:	8d 30       	cpi	r24, 0x0D	; 13
     3fc:	91 05       	cpc	r25, r1
     3fe:	11 f4       	brne	.+4      	; 0x404 <pinChange+0x1ba>
		  PORTB |= (1<<PB3);
     400:	c3 9a       	sbi	0x18, 3	; 24
     402:	08 95       	ret
		else if(a == eS_PORTB4)
     404:	8e 30       	cpi	r24, 0x0E	; 14
     406:	91 05       	cpc	r25, r1
     408:	11 f4       	brne	.+4      	; 0x40e <pinChange+0x1c4>
		  PORTB |= (1<<PB4);
     40a:	c4 9a       	sbi	0x18, 4	; 24
     40c:	08 95       	ret
		else if(a == eS_PORTB5)
     40e:	8f 30       	cpi	r24, 0x0F	; 15
     410:	91 05       	cpc	r25, r1
     412:	11 f4       	brne	.+4      	; 0x418 <pinChange+0x1ce>
		  PORTB |= (1<<PB5);
     414:	c5 9a       	sbi	0x18, 5	; 24
     416:	08 95       	ret
		else if(a == eS_PORTB6)
     418:	80 31       	cpi	r24, 0x10	; 16
     41a:	91 05       	cpc	r25, r1
     41c:	11 f4       	brne	.+4      	; 0x422 <pinChange+0x1d8>
		  PORTB |= (1<<PB6);
     41e:	c6 9a       	sbi	0x18, 6	; 24
     420:	08 95       	ret
		else if(a == eS_PORTB7)
     422:	81 31       	cpi	r24, 0x11	; 17
     424:	91 05       	cpc	r25, r1
     426:	11 f4       	brne	.+4      	; 0x42c <pinChange+0x1e2>
		  PORTB |= (1<<PB7);
     428:	c7 9a       	sbi	0x18, 7	; 24
     42a:	08 95       	ret
		else if(a == eS_PORTC0)
     42c:	84 31       	cpi	r24, 0x14	; 20
     42e:	91 05       	cpc	r25, r1
     430:	11 f4       	brne	.+4      	; 0x436 <pinChange+0x1ec>
		  PORTC |= (1<<PC0);
     432:	a8 9a       	sbi	0x15, 0	; 21
     434:	08 95       	ret
		else if(a == eS_PORTC1)
     436:	85 31       	cpi	r24, 0x15	; 21
     438:	91 05       	cpc	r25, r1
     43a:	11 f4       	brne	.+4      	; 0x440 <pinChange+0x1f6>
		  PORTC |= (1<<PC1);
     43c:	a9 9a       	sbi	0x15, 1	; 21
     43e:	08 95       	ret
		else if(a == eS_PORTC2)
     440:	86 31       	cpi	r24, 0x16	; 22
     442:	91 05       	cpc	r25, r1
     444:	11 f4       	brne	.+4      	; 0x44a <pinChange+0x200>
	  	  PORTC |= (1<<PC2);
     446:	aa 9a       	sbi	0x15, 2	; 21
     448:	08 95       	ret
		else if(a == eS_PORTC3)
     44a:	87 31       	cpi	r24, 0x17	; 23
     44c:	91 05       	cpc	r25, r1
     44e:	11 f4       	brne	.+4      	; 0x454 <pinChange+0x20a>
		  PORTC |= (1<<PC3);
     450:	ab 9a       	sbi	0x15, 3	; 21
     452:	08 95       	ret
		else if(a == eS_PORTC4)
     454:	88 31       	cpi	r24, 0x18	; 24
     456:	91 05       	cpc	r25, r1
     458:	11 f4       	brne	.+4      	; 0x45e <pinChange+0x214>
		  PORTC |= (1<<PC4);
     45a:	ac 9a       	sbi	0x15, 4	; 21
     45c:	08 95       	ret
		else if(a == eS_PORTC5)
     45e:	89 31       	cpi	r24, 0x19	; 25
     460:	91 05       	cpc	r25, r1
     462:	11 f4       	brne	.+4      	; 0x468 <pinChange+0x21e>
		  PORTC |= (1<<PC5);
     464:	ad 9a       	sbi	0x15, 5	; 21
     466:	08 95       	ret
		else if(a == eS_PORTC6)
     468:	8a 31       	cpi	r24, 0x1A	; 26
     46a:	91 05       	cpc	r25, r1
     46c:	11 f4       	brne	.+4      	; 0x472 <pinChange+0x228>
		  PORTC |= (1<<PC6);  
     46e:	ae 9a       	sbi	0x15, 6	; 21
     470:	08 95       	ret
		else if(a == eS_PORTC7)
     472:	8b 31       	cpi	r24, 0x1B	; 27
     474:	91 05       	cpc	r25, r1
     476:	11 f4       	brne	.+4      	; 0x47c <pinChange+0x232>
		  PORTC |= (1<<PC7);
     478:	af 9a       	sbi	0x15, 7	; 21
     47a:	08 95       	ret
		else if(a == eS_PORTD0)
     47c:	8e 31       	cpi	r24, 0x1E	; 30
     47e:	91 05       	cpc	r25, r1
     480:	11 f4       	brne	.+4      	; 0x486 <pinChange+0x23c>
		  PORTD |= (1<<PD0);
     482:	90 9a       	sbi	0x12, 0	; 18
     484:	08 95       	ret
		else if(a == eS_PORTD1)
     486:	8f 31       	cpi	r24, 0x1F	; 31
     488:	91 05       	cpc	r25, r1
     48a:	11 f4       	brne	.+4      	; 0x490 <pinChange+0x246>
		  PORTD |= (1<<PD1);
     48c:	91 9a       	sbi	0x12, 1	; 18
     48e:	08 95       	ret
		else if(a == eS_PORTD2)
     490:	80 32       	cpi	r24, 0x20	; 32
     492:	91 05       	cpc	r25, r1
     494:	11 f4       	brne	.+4      	; 0x49a <pinChange+0x250>
		  PORTD |= (1<<PD2);
     496:	92 9a       	sbi	0x12, 2	; 18
     498:	08 95       	ret
		else if(a == eS_PORTD3)
     49a:	81 32       	cpi	r24, 0x21	; 33
     49c:	91 05       	cpc	r25, r1
     49e:	11 f4       	brne	.+4      	; 0x4a4 <pinChange+0x25a>
		  PORTD |= (1<<PD3);
     4a0:	93 9a       	sbi	0x12, 3	; 18
     4a2:	08 95       	ret
		else if(a == eS_PORTD4)
     4a4:	82 32       	cpi	r24, 0x22	; 34
     4a6:	91 05       	cpc	r25, r1
     4a8:	11 f4       	brne	.+4      	; 0x4ae <pinChange+0x264>
		  PORTD |= (1<<PD4);
     4aa:	94 9a       	sbi	0x12, 4	; 18
     4ac:	08 95       	ret
		else if(a == eS_PORTD5)
     4ae:	83 32       	cpi	r24, 0x23	; 35
     4b0:	91 05       	cpc	r25, r1
     4b2:	11 f4       	brne	.+4      	; 0x4b8 <pinChange+0x26e>
		  PORTD |= (1<<PD5);
     4b4:	95 9a       	sbi	0x12, 5	; 18
     4b6:	08 95       	ret
		else if(a == eS_PORTD6)
     4b8:	84 32       	cpi	r24, 0x24	; 36
     4ba:	91 05       	cpc	r25, r1
     4bc:	11 f4       	brne	.+4      	; 0x4c2 <pinChange+0x278>
		  PORTD |= (1<<PD6);
     4be:	96 9a       	sbi	0x12, 6	; 18
     4c0:	08 95       	ret
		else if(a == eS_PORTD7)
     4c2:	85 97       	sbiw	r24, 0x25	; 37
     4c4:	09 f4       	brne	.+2      	; 0x4c8 <pinChange+0x27e>
		  PORTD |= (1<<PD7);
     4c6:	97 9a       	sbi	0x12, 7	; 18
     4c8:	08 95       	ret

000004ca <Lcd4_Port>:
//End LCD 8 Bit Interfacing Functions

//LCD 4 Bit Interfacing Functions

void Lcd4_Port(char a)
{
     4ca:	cf 93       	push	r28
     4cc:	c8 2f       	mov	r28, r24
	if(a & 1)
     4ce:	80 ff       	sbrs	r24, 0
     4d0:	07 c0       	rjmp	.+14     	; 0x4e0 <Lcd4_Port+0x16>
	pinChange(D4,1);
     4d2:	61 e0       	ldi	r22, 0x01	; 1
     4d4:	70 e0       	ldi	r23, 0x00	; 0
     4d6:	82 e2       	ldi	r24, 0x22	; 34
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	0e 94 25 01 	call	0x24a	; 0x24a <pinChange>
     4de:	06 c0       	rjmp	.+12     	; 0x4ec <Lcd4_Port+0x22>
	else
	pinChange(D4,0);
     4e0:	60 e0       	ldi	r22, 0x00	; 0
     4e2:	70 e0       	ldi	r23, 0x00	; 0
     4e4:	82 e2       	ldi	r24, 0x22	; 34
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	0e 94 25 01 	call	0x24a	; 0x24a <pinChange>
	
	if(a & 2)
     4ec:	c1 ff       	sbrs	r28, 1
     4ee:	07 c0       	rjmp	.+14     	; 0x4fe <Lcd4_Port+0x34>
	pinChange(D5,1);
     4f0:	61 e0       	ldi	r22, 0x01	; 1
     4f2:	70 e0       	ldi	r23, 0x00	; 0
     4f4:	83 e2       	ldi	r24, 0x23	; 35
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	0e 94 25 01 	call	0x24a	; 0x24a <pinChange>
     4fc:	06 c0       	rjmp	.+12     	; 0x50a <Lcd4_Port+0x40>
	else
	pinChange(D5,0);
     4fe:	60 e0       	ldi	r22, 0x00	; 0
     500:	70 e0       	ldi	r23, 0x00	; 0
     502:	83 e2       	ldi	r24, 0x23	; 35
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	0e 94 25 01 	call	0x24a	; 0x24a <pinChange>
	
	if(a & 4)
     50a:	c2 ff       	sbrs	r28, 2
     50c:	07 c0       	rjmp	.+14     	; 0x51c <Lcd4_Port+0x52>
	pinChange(D6,1);
     50e:	61 e0       	ldi	r22, 0x01	; 1
     510:	70 e0       	ldi	r23, 0x00	; 0
     512:	84 e2       	ldi	r24, 0x24	; 36
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	0e 94 25 01 	call	0x24a	; 0x24a <pinChange>
     51a:	06 c0       	rjmp	.+12     	; 0x528 <Lcd4_Port+0x5e>
	else
	pinChange(D6,0);
     51c:	60 e0       	ldi	r22, 0x00	; 0
     51e:	70 e0       	ldi	r23, 0x00	; 0
     520:	84 e2       	ldi	r24, 0x24	; 36
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	0e 94 25 01 	call	0x24a	; 0x24a <pinChange>
	
	if(a & 8)
     528:	c3 ff       	sbrs	r28, 3
     52a:	07 c0       	rjmp	.+14     	; 0x53a <Lcd4_Port+0x70>
	pinChange(D7,1);
     52c:	61 e0       	ldi	r22, 0x01	; 1
     52e:	70 e0       	ldi	r23, 0x00	; 0
     530:	85 e2       	ldi	r24, 0x25	; 37
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	0e 94 25 01 	call	0x24a	; 0x24a <pinChange>
     538:	06 c0       	rjmp	.+12     	; 0x546 <Lcd4_Port+0x7c>
	else
	pinChange(D7,0);
     53a:	60 e0       	ldi	r22, 0x00	; 0
     53c:	70 e0       	ldi	r23, 0x00	; 0
     53e:	85 e2       	ldi	r24, 0x25	; 37
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	0e 94 25 01 	call	0x24a	; 0x24a <pinChange>
}
     546:	cf 91       	pop	r28
     548:	08 95       	ret

0000054a <Lcd4_Cmd>:
void Lcd4_Cmd(char a)
{
     54a:	cf 93       	push	r28
     54c:	c8 2f       	mov	r28, r24
	pinChange(RS,0);             // => RS = 0
     54e:	60 e0       	ldi	r22, 0x00	; 0
     550:	70 e0       	ldi	r23, 0x00	; 0
     552:	8a e1       	ldi	r24, 0x1A	; 26
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	0e 94 25 01 	call	0x24a	; 0x24a <pinChange>
	Lcd4_Port(a);
     55a:	8c 2f       	mov	r24, r28
     55c:	0e 94 65 02 	call	0x4ca	; 0x4ca <Lcd4_Port>
	pinChange(EN,1);            // => E = 1
     560:	61 e0       	ldi	r22, 0x01	; 1
     562:	70 e0       	ldi	r23, 0x00	; 0
     564:	8b e1       	ldi	r24, 0x1B	; 27
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	0e 94 25 01 	call	0x24a	; 0x24a <pinChange>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     56c:	89 ef       	ldi	r24, 0xF9	; 249
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	01 97       	sbiw	r24, 0x01	; 1
     572:	f1 f7       	brne	.-4      	; 0x570 <Lcd4_Cmd+0x26>
     574:	00 c0       	rjmp	.+0      	; 0x576 <Lcd4_Cmd+0x2c>
     576:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);             // => E = 0
     578:	60 e0       	ldi	r22, 0x00	; 0
     57a:	70 e0       	ldi	r23, 0x00	; 0
     57c:	8b e1       	ldi	r24, 0x1B	; 27
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	0e 94 25 01 	call	0x24a	; 0x24a <pinChange>
     584:	89 ef       	ldi	r24, 0xF9	; 249
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	01 97       	sbiw	r24, 0x01	; 1
     58a:	f1 f7       	brne	.-4      	; 0x588 <Lcd4_Cmd+0x3e>
     58c:	00 c0       	rjmp	.+0      	; 0x58e <Lcd4_Cmd+0x44>
     58e:	00 00       	nop
	_delay_ms(1);
}
     590:	cf 91       	pop	r28
     592:	08 95       	ret

00000594 <Lcd4_Clear>:

void Lcd4_Clear()
{
	Lcd4_Cmd(0);
     594:	80 e0       	ldi	r24, 0x00	; 0
     596:	0e 94 a5 02 	call	0x54a	; 0x54a <Lcd4_Cmd>
	Lcd4_Cmd(1);
     59a:	81 e0       	ldi	r24, 0x01	; 1
     59c:	0e 94 a5 02 	call	0x54a	; 0x54a <Lcd4_Cmd>
     5a0:	08 95       	ret

000005a2 <Lcd4_Set_Cursor>:
}

void Lcd4_Set_Cursor(char a, char b)
{
     5a2:	cf 93       	push	r28
     5a4:	c6 2f       	mov	r28, r22
	char temp,z,y;
	if(a == 1)
     5a6:	81 30       	cpi	r24, 0x01	; 1
     5a8:	59 f4       	brne	.+22     	; 0x5c0 <Lcd4_Set_Cursor+0x1e>
	{
		temp = 0x80 + b;
     5aa:	80 e8       	ldi	r24, 0x80	; 128
     5ac:	86 0f       	add	r24, r22
		z = temp>>4;
		y = (0x80+b) & 0x0F;
		Lcd4_Cmd(z);
     5ae:	82 95       	swap	r24
     5b0:	8f 70       	andi	r24, 0x0F	; 15
     5b2:	0e 94 a5 02 	call	0x54a	; 0x54a <Lcd4_Cmd>
		Lcd4_Cmd(y);
     5b6:	8c 2f       	mov	r24, r28
     5b8:	8f 70       	andi	r24, 0x0F	; 15
     5ba:	0e 94 a5 02 	call	0x54a	; 0x54a <Lcd4_Cmd>
     5be:	0c c0       	rjmp	.+24     	; 0x5d8 <Lcd4_Set_Cursor+0x36>
	}
	else if(a == 2)
     5c0:	82 30       	cpi	r24, 0x02	; 2
     5c2:	51 f4       	brne	.+20     	; 0x5d8 <Lcd4_Set_Cursor+0x36>
	{
		temp = 0xC0 + b;
     5c4:	80 ec       	ldi	r24, 0xC0	; 192
     5c6:	86 0f       	add	r24, r22
		z = temp>>4;
		y = (0xC0+b) & 0x0F;
		Lcd4_Cmd(z);
     5c8:	82 95       	swap	r24
     5ca:	8f 70       	andi	r24, 0x0F	; 15
     5cc:	0e 94 a5 02 	call	0x54a	; 0x54a <Lcd4_Cmd>
		Lcd4_Cmd(y);
     5d0:	8c 2f       	mov	r24, r28
     5d2:	8f 70       	andi	r24, 0x0F	; 15
     5d4:	0e 94 a5 02 	call	0x54a	; 0x54a <Lcd4_Cmd>
	}
}
     5d8:	cf 91       	pop	r28
     5da:	08 95       	ret

000005dc <Lcd4_Init>:

void Lcd4_Init()
{
	Lcd4_Port(0x00);
     5dc:	80 e0       	ldi	r24, 0x00	; 0
     5de:	0e 94 65 02 	call	0x4ca	; 0x4ca <Lcd4_Port>
     5e2:	87 e8       	ldi	r24, 0x87	; 135
     5e4:	93 e1       	ldi	r25, 0x13	; 19
     5e6:	01 97       	sbiw	r24, 0x01	; 1
     5e8:	f1 f7       	brne	.-4      	; 0x5e6 <Lcd4_Init+0xa>
     5ea:	00 c0       	rjmp	.+0      	; 0x5ec <Lcd4_Init+0x10>
     5ec:	00 00       	nop
	_delay_ms(20);
	///////////// Reset process from datasheet /////////
	Lcd4_Cmd(0x03);
     5ee:	83 e0       	ldi	r24, 0x03	; 3
     5f0:	0e 94 a5 02 	call	0x54a	; 0x54a <Lcd4_Cmd>
     5f4:	81 ee       	ldi	r24, 0xE1	; 225
     5f6:	94 e0       	ldi	r25, 0x04	; 4
     5f8:	01 97       	sbiw	r24, 0x01	; 1
     5fa:	f1 f7       	brne	.-4      	; 0x5f8 <Lcd4_Init+0x1c>
     5fc:	00 c0       	rjmp	.+0      	; 0x5fe <Lcd4_Init+0x22>
     5fe:	00 00       	nop
	_delay_ms(5);
	Lcd4_Cmd(0x03);
     600:	83 e0       	ldi	r24, 0x03	; 3
     602:	0e 94 a5 02 	call	0x54a	; 0x54a <Lcd4_Cmd>
     606:	8d eb       	ldi	r24, 0xBD	; 189
     608:	9a e0       	ldi	r25, 0x0A	; 10
     60a:	01 97       	sbiw	r24, 0x01	; 1
     60c:	f1 f7       	brne	.-4      	; 0x60a <Lcd4_Init+0x2e>
     60e:	00 c0       	rjmp	.+0      	; 0x610 <Lcd4_Init+0x34>
     610:	00 00       	nop
	_delay_ms(11);
	Lcd4_Cmd(0x03);
     612:	83 e0       	ldi	r24, 0x03	; 3
     614:	0e 94 a5 02 	call	0x54a	; 0x54a <Lcd4_Cmd>
	/////////////////////////////////////////////////////
	Lcd4_Cmd(0x02);
     618:	82 e0       	ldi	r24, 0x02	; 2
     61a:	0e 94 a5 02 	call	0x54a	; 0x54a <Lcd4_Cmd>
	Lcd4_Cmd(0x02);
     61e:	82 e0       	ldi	r24, 0x02	; 2
     620:	0e 94 a5 02 	call	0x54a	; 0x54a <Lcd4_Cmd>
	Lcd4_Cmd(0x08);
     624:	88 e0       	ldi	r24, 0x08	; 8
     626:	0e 94 a5 02 	call	0x54a	; 0x54a <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
     62a:	80 e0       	ldi	r24, 0x00	; 0
     62c:	0e 94 a5 02 	call	0x54a	; 0x54a <Lcd4_Cmd>
	Lcd4_Cmd(0x0C);
     630:	8c e0       	ldi	r24, 0x0C	; 12
     632:	0e 94 a5 02 	call	0x54a	; 0x54a <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
     636:	80 e0       	ldi	r24, 0x00	; 0
     638:	0e 94 a5 02 	call	0x54a	; 0x54a <Lcd4_Cmd>
	Lcd4_Cmd(0x06);
     63c:	86 e0       	ldi	r24, 0x06	; 6
     63e:	0e 94 a5 02 	call	0x54a	; 0x54a <Lcd4_Cmd>
     642:	08 95       	ret

00000644 <Lcd4_Write_Char>:
}

void Lcd4_Write_Char(char a)
{
     644:	cf 93       	push	r28
     646:	c8 2f       	mov	r28, r24
	char temp,y;
	temp = a&0x0F;
	y = a&0xF0;
	pinChange(RS,1);             // => RS = 1
     648:	61 e0       	ldi	r22, 0x01	; 1
     64a:	70 e0       	ldi	r23, 0x00	; 0
     64c:	8a e1       	ldi	r24, 0x1A	; 26
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	0e 94 25 01 	call	0x24a	; 0x24a <pinChange>
	Lcd4_Port(y>>4);             //Data transfer
     654:	8c 2f       	mov	r24, r28
     656:	82 95       	swap	r24
     658:	8f 70       	andi	r24, 0x0F	; 15
     65a:	0e 94 65 02 	call	0x4ca	; 0x4ca <Lcd4_Port>
	pinChange(EN,1);
     65e:	61 e0       	ldi	r22, 0x01	; 1
     660:	70 e0       	ldi	r23, 0x00	; 0
     662:	8b e1       	ldi	r24, 0x1B	; 27
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	0e 94 25 01 	call	0x24a	; 0x24a <pinChange>
     66a:	89 ef       	ldi	r24, 0xF9	; 249
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	01 97       	sbiw	r24, 0x01	; 1
     670:	f1 f7       	brne	.-4      	; 0x66e <Lcd4_Write_Char+0x2a>
     672:	00 c0       	rjmp	.+0      	; 0x674 <Lcd4_Write_Char+0x30>
     674:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);
     676:	60 e0       	ldi	r22, 0x00	; 0
     678:	70 e0       	ldi	r23, 0x00	; 0
     67a:	8b e1       	ldi	r24, 0x1B	; 27
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	0e 94 25 01 	call	0x24a	; 0x24a <pinChange>
     682:	89 ef       	ldi	r24, 0xF9	; 249
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	01 97       	sbiw	r24, 0x01	; 1
     688:	f1 f7       	brne	.-4      	; 0x686 <Lcd4_Write_Char+0x42>
     68a:	00 c0       	rjmp	.+0      	; 0x68c <Lcd4_Write_Char+0x48>
     68c:	00 00       	nop
	_delay_ms(1);
	Lcd4_Port(temp);
     68e:	8c 2f       	mov	r24, r28
     690:	8f 70       	andi	r24, 0x0F	; 15
     692:	0e 94 65 02 	call	0x4ca	; 0x4ca <Lcd4_Port>
	pinChange(EN,1);
     696:	61 e0       	ldi	r22, 0x01	; 1
     698:	70 e0       	ldi	r23, 0x00	; 0
     69a:	8b e1       	ldi	r24, 0x1B	; 27
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	0e 94 25 01 	call	0x24a	; 0x24a <pinChange>
     6a2:	89 ef       	ldi	r24, 0xF9	; 249
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	01 97       	sbiw	r24, 0x01	; 1
     6a8:	f1 f7       	brne	.-4      	; 0x6a6 <Lcd4_Write_Char+0x62>
     6aa:	00 c0       	rjmp	.+0      	; 0x6ac <Lcd4_Write_Char+0x68>
     6ac:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);
     6ae:	60 e0       	ldi	r22, 0x00	; 0
     6b0:	70 e0       	ldi	r23, 0x00	; 0
     6b2:	8b e1       	ldi	r24, 0x1B	; 27
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	0e 94 25 01 	call	0x24a	; 0x24a <pinChange>
     6ba:	89 ef       	ldi	r24, 0xF9	; 249
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	01 97       	sbiw	r24, 0x01	; 1
     6c0:	f1 f7       	brne	.-4      	; 0x6be <Lcd4_Write_Char+0x7a>
     6c2:	00 c0       	rjmp	.+0      	; 0x6c4 <Lcd4_Write_Char+0x80>
     6c4:	00 00       	nop
	_delay_ms(1);
}
     6c6:	cf 91       	pop	r28
     6c8:	08 95       	ret

000006ca <Lcd4_Write_String>:

void Lcd4_Write_String(char *a)
{
     6ca:	cf 93       	push	r28
     6cc:	df 93       	push	r29
     6ce:	ec 01       	movw	r28, r24
	int i;
	for(i=0;a[i]!='\0';i++)
     6d0:	88 81       	ld	r24, Y
     6d2:	88 23       	and	r24, r24
     6d4:	31 f0       	breq	.+12     	; 0x6e2 <Lcd4_Write_String+0x18>
     6d6:	21 96       	adiw	r28, 0x01	; 1
	Lcd4_Write_Char(a[i]);
     6d8:	0e 94 22 03 	call	0x644	; 0x644 <Lcd4_Write_Char>
}

void Lcd4_Write_String(char *a)
{
	int i;
	for(i=0;a[i]!='\0';i++)
     6dc:	89 91       	ld	r24, Y+
     6de:	81 11       	cpse	r24, r1
     6e0:	fb cf       	rjmp	.-10     	; 0x6d8 <Lcd4_Write_String+0xe>
	Lcd4_Write_Char(a[i]);
}
     6e2:	df 91       	pop	r29
     6e4:	cf 91       	pop	r28
     6e6:	08 95       	ret

000006e8 <getAngle>:
double getAngle(double prevLat,double prevLon, double currLat,double currLon, double wpLat,double wpLon);

/************************************************************************/
/* finds angle given three point using vector Cross multiplication                                                                     */
/************************************************************************/
double getAngle(double prevLat,double prevLon, double currLat,double currLon, double wpLat,double wpLon){
     6e8:	4f 92       	push	r4
     6ea:	5f 92       	push	r5
     6ec:	6f 92       	push	r6
     6ee:	7f 92       	push	r7
     6f0:	8f 92       	push	r8
     6f2:	9f 92       	push	r9
     6f4:	af 92       	push	r10
     6f6:	bf 92       	push	r11
     6f8:	cf 92       	push	r12
     6fa:	df 92       	push	r13
     6fc:	ef 92       	push	r14
     6fe:	ff 92       	push	r15
     700:	0f 93       	push	r16
     702:	1f 93       	push	r17
     704:	cf 93       	push	r28
     706:	df 93       	push	r29
     708:	cd b7       	in	r28, 0x3d	; 61
     70a:	de b7       	in	r29, 0x3e	; 62
     70c:	60 97       	sbiw	r28, 0x10	; 16
     70e:	0f b6       	in	r0, 0x3f	; 63
     710:	f8 94       	cli
     712:	de bf       	out	0x3e, r29	; 62
     714:	0f be       	out	0x3f, r0	; 63
     716:	cd bf       	out	0x3d, r28	; 61
     718:	29 83       	std	Y+1, r18	; 0x01
     71a:	3a 83       	std	Y+2, r19	; 0x02
     71c:	4b 83       	std	Y+3, r20	; 0x03
     71e:	5c 83       	std	Y+4, r21	; 0x04
	double a2 = currLat - prevLat;
     720:	9b 01       	movw	r18, r22
     722:	ac 01       	movw	r20, r24
     724:	c8 01       	movw	r24, r16
     726:	b7 01       	movw	r22, r14
     728:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <__subsf3>
     72c:	6d 83       	std	Y+5, r22	; 0x05
     72e:	7e 83       	std	Y+6, r23	; 0x06
     730:	8f 83       	std	Y+7, r24	; 0x07
     732:	98 87       	std	Y+8, r25	; 0x08
	double a1 = currLon - prevLon;
     734:	29 81       	ldd	r18, Y+1	; 0x01
     736:	3a 81       	ldd	r19, Y+2	; 0x02
     738:	4b 81       	ldd	r20, Y+3	; 0x03
     73a:	5c 81       	ldd	r21, Y+4	; 0x04
     73c:	c6 01       	movw	r24, r12
     73e:	b5 01       	movw	r22, r10
     740:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <__subsf3>
     744:	69 83       	std	Y+1, r22	; 0x01
     746:	7a 83       	std	Y+2, r23	; 0x02
     748:	8b 83       	std	Y+3, r24	; 0x03
     74a:	9c 83       	std	Y+4, r25	; 0x04
	double b2 = wpLat - currLat;
     74c:	a8 01       	movw	r20, r16
     74e:	97 01       	movw	r18, r14
     750:	6b a1       	ldd	r22, Y+35	; 0x23
     752:	7c a1       	ldd	r23, Y+36	; 0x24
     754:	8d a1       	ldd	r24, Y+37	; 0x25
     756:	9e a1       	ldd	r25, Y+38	; 0x26
     758:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <__subsf3>
     75c:	2b 01       	movw	r4, r22
     75e:	3c 01       	movw	r6, r24
	double b1 = wpLon - currLon;
     760:	a6 01       	movw	r20, r12
     762:	95 01       	movw	r18, r10
     764:	6f a1       	ldd	r22, Y+39	; 0x27
     766:	78 a5       	ldd	r23, Y+40	; 0x28
     768:	89 a5       	ldd	r24, Y+41	; 0x29
     76a:	9a a5       	ldd	r25, Y+42	; 0x2a
     76c:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <__subsf3>
     770:	4b 01       	movw	r8, r22
     772:	5c 01       	movw	r10, r24
	

	double aCrossb = a1*b2-a2*b1;
	double a = sqrt(a1*a1+a2*a2);
     774:	29 81       	ldd	r18, Y+1	; 0x01
     776:	3a 81       	ldd	r19, Y+2	; 0x02
     778:	4b 81       	ldd	r20, Y+3	; 0x03
     77a:	5c 81       	ldd	r21, Y+4	; 0x04
     77c:	ca 01       	movw	r24, r20
     77e:	b9 01       	movw	r22, r18
     780:	0e 94 1a 12 	call	0x2434	; 0x2434 <__mulsf3>
     784:	6b 01       	movw	r12, r22
     786:	7c 01       	movw	r14, r24
     788:	2d 81       	ldd	r18, Y+5	; 0x05
     78a:	3e 81       	ldd	r19, Y+6	; 0x06
     78c:	4f 81       	ldd	r20, Y+7	; 0x07
     78e:	58 85       	ldd	r21, Y+8	; 0x08
     790:	ca 01       	movw	r24, r20
     792:	b9 01       	movw	r22, r18
     794:	0e 94 1a 12 	call	0x2434	; 0x2434 <__mulsf3>
     798:	9b 01       	movw	r18, r22
     79a:	ac 01       	movw	r20, r24
     79c:	c7 01       	movw	r24, r14
     79e:	b6 01       	movw	r22, r12
     7a0:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <__addsf3>
     7a4:	0e 94 81 12 	call	0x2502	; 0x2502 <sqrt>
     7a8:	69 87       	std	Y+9, r22	; 0x09
     7aa:	7a 87       	std	Y+10, r23	; 0x0a
     7ac:	8b 87       	std	Y+11, r24	; 0x0b
     7ae:	9c 87       	std	Y+12, r25	; 0x0c
	double b = sqrt(b1*b1+b2*b2);
     7b0:	a5 01       	movw	r20, r10
     7b2:	94 01       	movw	r18, r8
     7b4:	c5 01       	movw	r24, r10
     7b6:	b4 01       	movw	r22, r8
     7b8:	0e 94 1a 12 	call	0x2434	; 0x2434 <__mulsf3>
     7bc:	6b 01       	movw	r12, r22
     7be:	7c 01       	movw	r14, r24
     7c0:	a3 01       	movw	r20, r6
     7c2:	92 01       	movw	r18, r4
     7c4:	c3 01       	movw	r24, r6
     7c6:	b2 01       	movw	r22, r4
     7c8:	0e 94 1a 12 	call	0x2434	; 0x2434 <__mulsf3>
     7cc:	9b 01       	movw	r18, r22
     7ce:	ac 01       	movw	r20, r24
     7d0:	c7 01       	movw	r24, r14
     7d2:	b6 01       	movw	r22, r12
     7d4:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <__addsf3>
     7d8:	0e 94 81 12 	call	0x2502	; 0x2502 <sqrt>
     7dc:	6d 87       	std	Y+13, r22	; 0x0d
     7de:	7e 87       	std	Y+14, r23	; 0x0e
     7e0:	8f 87       	std	Y+15, r24	; 0x0f
     7e2:	98 8b       	std	Y+16, r25	; 0x10
	double a1 = currLon - prevLon;
	double b2 = wpLat - currLat;
	double b1 = wpLon - currLon;
	

	double aCrossb = a1*b2-a2*b1;
     7e4:	a3 01       	movw	r20, r6
     7e6:	92 01       	movw	r18, r4
     7e8:	69 81       	ldd	r22, Y+1	; 0x01
     7ea:	7a 81       	ldd	r23, Y+2	; 0x02
     7ec:	8b 81       	ldd	r24, Y+3	; 0x03
     7ee:	9c 81       	ldd	r25, Y+4	; 0x04
     7f0:	0e 94 1a 12 	call	0x2434	; 0x2434 <__mulsf3>
     7f4:	6b 01       	movw	r12, r22
     7f6:	7c 01       	movw	r14, r24
     7f8:	a5 01       	movw	r20, r10
     7fa:	94 01       	movw	r18, r8
     7fc:	6d 81       	ldd	r22, Y+5	; 0x05
     7fe:	7e 81       	ldd	r23, Y+6	; 0x06
     800:	8f 81       	ldd	r24, Y+7	; 0x07
     802:	98 85       	ldd	r25, Y+8	; 0x08
     804:	0e 94 1a 12 	call	0x2434	; 0x2434 <__mulsf3>
     808:	9b 01       	movw	r18, r22
     80a:	ac 01       	movw	r20, r24
     80c:	c7 01       	movw	r24, r14
     80e:	b6 01       	movw	r22, r12
     810:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <__subsf3>
     814:	6b 01       	movw	r12, r22
     816:	7c 01       	movw	r14, r24
	double a = sqrt(a1*a1+a2*a2);
	double b = sqrt(b1*b1+b2*b2);
	
	double theta = asin(aCrossb/(a*b));
     818:	2d 85       	ldd	r18, Y+13	; 0x0d
     81a:	3e 85       	ldd	r19, Y+14	; 0x0e
     81c:	4f 85       	ldd	r20, Y+15	; 0x0f
     81e:	58 89       	ldd	r21, Y+16	; 0x10
     820:	69 85       	ldd	r22, Y+9	; 0x09
     822:	7a 85       	ldd	r23, Y+10	; 0x0a
     824:	8b 85       	ldd	r24, Y+11	; 0x0b
     826:	9c 85       	ldd	r25, Y+12	; 0x0c
     828:	0e 94 1a 12 	call	0x2434	; 0x2434 <__mulsf3>
     82c:	9b 01       	movw	r18, r22
     82e:	ac 01       	movw	r20, r24
     830:	c7 01       	movw	r24, r14
     832:	b6 01       	movw	r22, r12
     834:	0e 94 41 10 	call	0x2082	; 0x2082 <__divsf3>
     838:	0e 94 23 10 	call	0x2046	; 0x2046 <asin>
	
	return theta*180/pi;
     83c:	20 e0       	ldi	r18, 0x00	; 0
     83e:	30 e0       	ldi	r19, 0x00	; 0
     840:	44 e3       	ldi	r20, 0x34	; 52
     842:	53 e4       	ldi	r21, 0x43	; 67
     844:	0e 94 1a 12 	call	0x2434	; 0x2434 <__mulsf3>
     848:	2b ed       	ldi	r18, 0xDB	; 219
     84a:	3f e0       	ldi	r19, 0x0F	; 15
     84c:	49 e4       	ldi	r20, 0x49	; 73
     84e:	50 e4       	ldi	r21, 0x40	; 64
     850:	0e 94 41 10 	call	0x2082	; 0x2082 <__divsf3>
}
     854:	60 96       	adiw	r28, 0x10	; 16
     856:	0f b6       	in	r0, 0x3f	; 63
     858:	f8 94       	cli
     85a:	de bf       	out	0x3e, r29	; 62
     85c:	0f be       	out	0x3f, r0	; 63
     85e:	cd bf       	out	0x3d, r28	; 61
     860:	df 91       	pop	r29
     862:	cf 91       	pop	r28
     864:	1f 91       	pop	r17
     866:	0f 91       	pop	r16
     868:	ff 90       	pop	r15
     86a:	ef 90       	pop	r14
     86c:	df 90       	pop	r13
     86e:	cf 90       	pop	r12
     870:	bf 90       	pop	r11
     872:	af 90       	pop	r10
     874:	9f 90       	pop	r9
     876:	8f 90       	pop	r8
     878:	7f 90       	pop	r7
     87a:	6f 90       	pop	r6
     87c:	5f 90       	pop	r5
     87e:	4f 90       	pop	r4
     880:	08 95       	ret

00000882 <getTurn>:

/************************************************************************/
/* calculates Turn from angle found from vector cross multiplication                                                                     */
/************************************************************************/
char getTurn(double theta){
     882:	cf 92       	push	r12
     884:	df 92       	push	r13
     886:	ef 92       	push	r14
     888:	ff 92       	push	r15
     88a:	6b 01       	movw	r12, r22
     88c:	7c 01       	movw	r14, r24
	if(theta < -30 && theta > -180)
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 ef       	ldi	r20, 0xF0	; 240
     894:	51 ec       	ldi	r21, 0xC1	; 193
     896:	0e 94 3a 10 	call	0x2074	; 0x2074 <__cmpsf2>
     89a:	88 23       	and	r24, r24
     89c:	54 f4       	brge	.+20     	; 0x8b2 <getTurn+0x30>
     89e:	20 e0       	ldi	r18, 0x00	; 0
     8a0:	30 e0       	ldi	r19, 0x00	; 0
     8a2:	44 e3       	ldi	r20, 0x34	; 52
     8a4:	53 ec       	ldi	r21, 0xC3	; 195
     8a6:	c7 01       	movw	r24, r14
     8a8:	b6 01       	movw	r22, r12
     8aa:	0e 94 16 12 	call	0x242c	; 0x242c <__gesf2>
     8ae:	18 16       	cp	r1, r24
     8b0:	b4 f0       	brlt	.+44     	; 0x8de <getTurn+0x5c>
	return RIGHT;
	else if(theta > 30 && theta <= 180)
     8b2:	20 e0       	ldi	r18, 0x00	; 0
     8b4:	30 e0       	ldi	r19, 0x00	; 0
     8b6:	40 ef       	ldi	r20, 0xF0	; 240
     8b8:	51 e4       	ldi	r21, 0x41	; 65
     8ba:	c7 01       	movw	r24, r14
     8bc:	b6 01       	movw	r22, r12
     8be:	0e 94 16 12 	call	0x242c	; 0x242c <__gesf2>
     8c2:	18 16       	cp	r1, r24
     8c4:	74 f4       	brge	.+28     	; 0x8e2 <getTurn+0x60>
     8c6:	20 e0       	ldi	r18, 0x00	; 0
     8c8:	30 e0       	ldi	r19, 0x00	; 0
     8ca:	44 e3       	ldi	r20, 0x34	; 52
     8cc:	53 e4       	ldi	r21, 0x43	; 67
     8ce:	c7 01       	movw	r24, r14
     8d0:	b6 01       	movw	r22, r12
     8d2:	0e 94 3a 10 	call	0x2074	; 0x2074 <__cmpsf2>
     8d6:	18 16       	cp	r1, r24
     8d8:	34 f4       	brge	.+12     	; 0x8e6 <getTurn+0x64>
	return LEFT;
	else
	return STRAIGHT;
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	05 c0       	rjmp	.+10     	; 0x8e8 <getTurn+0x66>
/************************************************************************/
/* calculates Turn from angle found from vector cross multiplication                                                                     */
/************************************************************************/
char getTurn(double theta){
	if(theta < -30 && theta > -180)
	return RIGHT;
     8de:	81 e0       	ldi	r24, 0x01	; 1
     8e0:	03 c0       	rjmp	.+6      	; 0x8e8 <getTurn+0x66>
	else if(theta > 30 && theta <= 180)
	return LEFT;
	else
	return STRAIGHT;
     8e2:	80 e0       	ldi	r24, 0x00	; 0
     8e4:	01 c0       	rjmp	.+2      	; 0x8e8 <getTurn+0x66>
/************************************************************************/
char getTurn(double theta){
	if(theta < -30 && theta > -180)
	return RIGHT;
	else if(theta > 30 && theta <= 180)
	return LEFT;
     8e6:	82 e0       	ldi	r24, 0x02	; 2
	else
	return STRAIGHT;
}
     8e8:	ff 90       	pop	r15
     8ea:	ef 90       	pop	r14
     8ec:	df 90       	pop	r13
     8ee:	cf 90       	pop	r12
     8f0:	08 95       	ret

000008f2 <distance>:


/************************************************************************/
/* find distance between two point using radius of earth                                                                     */
/************************************************************************/
uint16_t distance(double lat1, double lon1, double lat2, double lon2, char unit) {
     8f2:	4f 92       	push	r4
     8f4:	5f 92       	push	r5
     8f6:	6f 92       	push	r6
     8f8:	7f 92       	push	r7
     8fa:	af 92       	push	r10
     8fc:	bf 92       	push	r11
     8fe:	cf 92       	push	r12
     900:	df 92       	push	r13
     902:	ef 92       	push	r14
     904:	ff 92       	push	r15
     906:	0f 93       	push	r16
     908:	1f 93       	push	r17
     90a:	cf 93       	push	r28
     90c:	df 93       	push	r29
     90e:	cd b7       	in	r28, 0x3d	; 61
     910:	de b7       	in	r29, 0x3e	; 62
     912:	2c 97       	sbiw	r28, 0x0c	; 12
     914:	0f b6       	in	r0, 0x3f	; 63
     916:	f8 94       	cli
     918:	de bf       	out	0x3e, r29	; 62
     91a:	0f be       	out	0x3f, r0	; 63
     91c:	cd bf       	out	0x3d, r28	; 61
     91e:	2b 01       	movw	r4, r22
     920:	3c 01       	movw	r6, r24
     922:	29 87       	std	Y+9, r18	; 0x09
     924:	3a 87       	std	Y+10, r19	; 0x0a
     926:	4b 87       	std	Y+11, r20	; 0x0b
     928:	5c 87       	std	Y+12, r21	; 0x0c
     92a:	e9 82       	std	Y+1, r14	; 0x01
     92c:	fa 82       	std	Y+2, r15	; 0x02
     92e:	0b 83       	std	Y+3, r16	; 0x03
     930:	1c 83       	std	Y+4, r17	; 0x04
	double x = (lon2-lon1)*DEGRAD*cos((lat1+lat2)*DEGRAD/2);
     932:	a8 01       	movw	r20, r16
     934:	97 01       	movw	r18, r14
     936:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <__addsf3>
     93a:	2b ed       	ldi	r18, 0xDB	; 219
     93c:	3f e0       	ldi	r19, 0x0F	; 15
     93e:	49 e4       	ldi	r20, 0x49	; 73
     940:	50 e4       	ldi	r21, 0x40	; 64
     942:	0e 94 1a 12 	call	0x2434	; 0x2434 <__mulsf3>
     946:	20 e0       	ldi	r18, 0x00	; 0
     948:	30 e0       	ldi	r19, 0x00	; 0
     94a:	44 e3       	ldi	r20, 0x34	; 52
     94c:	53 e4       	ldi	r21, 0x43	; 67
     94e:	0e 94 41 10 	call	0x2082	; 0x2082 <__divsf3>
     952:	20 e0       	ldi	r18, 0x00	; 0
     954:	30 e0       	ldi	r19, 0x00	; 0
     956:	40 e0       	ldi	r20, 0x00	; 0
     958:	5f e3       	ldi	r21, 0x3F	; 63
     95a:	0e 94 1a 12 	call	0x2434	; 0x2434 <__mulsf3>
     95e:	0e 94 3e 10 	call	0x207c	; 0x207c <cos>
     962:	6d 83       	std	Y+5, r22	; 0x05
     964:	7e 83       	std	Y+6, r23	; 0x06
     966:	8f 83       	std	Y+7, r24	; 0x07
     968:	98 87       	std	Y+8, r25	; 0x08
     96a:	29 85       	ldd	r18, Y+9	; 0x09
     96c:	3a 85       	ldd	r19, Y+10	; 0x0a
     96e:	4b 85       	ldd	r20, Y+11	; 0x0b
     970:	5c 85       	ldd	r21, Y+12	; 0x0c
     972:	c6 01       	movw	r24, r12
     974:	b5 01       	movw	r22, r10
     976:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <__subsf3>
     97a:	2b ed       	ldi	r18, 0xDB	; 219
     97c:	3f e0       	ldi	r19, 0x0F	; 15
     97e:	49 e4       	ldi	r20, 0x49	; 73
     980:	50 e4       	ldi	r21, 0x40	; 64
     982:	0e 94 1a 12 	call	0x2434	; 0x2434 <__mulsf3>
     986:	20 e0       	ldi	r18, 0x00	; 0
     988:	30 e0       	ldi	r19, 0x00	; 0
     98a:	44 e3       	ldi	r20, 0x34	; 52
     98c:	53 e4       	ldi	r21, 0x43	; 67
     98e:	0e 94 41 10 	call	0x2082	; 0x2082 <__divsf3>
     992:	2d 81       	ldd	r18, Y+5	; 0x05
     994:	3e 81       	ldd	r19, Y+6	; 0x06
     996:	4f 81       	ldd	r20, Y+7	; 0x07
     998:	58 85       	ldd	r21, Y+8	; 0x08
     99a:	0e 94 1a 12 	call	0x2434	; 0x2434 <__mulsf3>
     99e:	6b 01       	movw	r12, r22
     9a0:	7c 01       	movw	r14, r24
	double y = (lat2-lat1)*DEGRAD;
     9a2:	a3 01       	movw	r20, r6
     9a4:	92 01       	movw	r18, r4
     9a6:	69 81       	ldd	r22, Y+1	; 0x01
     9a8:	7a 81       	ldd	r23, Y+2	; 0x02
     9aa:	8b 81       	ldd	r24, Y+3	; 0x03
     9ac:	9c 81       	ldd	r25, Y+4	; 0x04
     9ae:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <__subsf3>
     9b2:	2b ed       	ldi	r18, 0xDB	; 219
     9b4:	3f e0       	ldi	r19, 0x0F	; 15
     9b6:	49 e4       	ldi	r20, 0x49	; 73
     9b8:	50 e4       	ldi	r21, 0x40	; 64
     9ba:	0e 94 1a 12 	call	0x2434	; 0x2434 <__mulsf3>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	44 e3       	ldi	r20, 0x34	; 52
     9c4:	53 e4       	ldi	r21, 0x43	; 67
     9c6:	0e 94 41 10 	call	0x2082	; 0x2082 <__divsf3>
     9ca:	2b 01       	movw	r4, r22
     9cc:	3c 01       	movw	r6, r24
	
	return (uint16_t)(sqrt(x*x + y*y)*ERADIUS);
     9ce:	a7 01       	movw	r20, r14
     9d0:	96 01       	movw	r18, r12
     9d2:	c7 01       	movw	r24, r14
     9d4:	b6 01       	movw	r22, r12
     9d6:	0e 94 1a 12 	call	0x2434	; 0x2434 <__mulsf3>
     9da:	6b 01       	movw	r12, r22
     9dc:	7c 01       	movw	r14, r24
     9de:	a3 01       	movw	r20, r6
     9e0:	92 01       	movw	r18, r4
     9e2:	c3 01       	movw	r24, r6
     9e4:	b2 01       	movw	r22, r4
     9e6:	0e 94 1a 12 	call	0x2434	; 0x2434 <__mulsf3>
     9ea:	9b 01       	movw	r18, r22
     9ec:	ac 01       	movw	r20, r24
     9ee:	c7 01       	movw	r24, r14
     9f0:	b6 01       	movw	r22, r12
     9f2:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <__addsf3>
     9f6:	0e 94 81 12 	call	0x2502	; 0x2502 <sqrt>
     9fa:	20 e7       	ldi	r18, 0x70	; 112
     9fc:	3d e6       	ldi	r19, 0x6D	; 109
     9fe:	42 ec       	ldi	r20, 0xC2	; 194
     a00:	5a e4       	ldi	r21, 0x4A	; 74
     a02:	0e 94 1a 12 	call	0x2434	; 0x2434 <__mulsf3>
     a06:	0e 94 ae 10 	call	0x215c	; 0x215c <__fixunssfsi>
}
     a0a:	cb 01       	movw	r24, r22
     a0c:	2c 96       	adiw	r28, 0x0c	; 12
     a0e:	0f b6       	in	r0, 0x3f	; 63
     a10:	f8 94       	cli
     a12:	de bf       	out	0x3e, r29	; 62
     a14:	0f be       	out	0x3f, r0	; 63
     a16:	cd bf       	out	0x3d, r28	; 61
     a18:	df 91       	pop	r29
     a1a:	cf 91       	pop	r28
     a1c:	1f 91       	pop	r17
     a1e:	0f 91       	pop	r16
     a20:	ff 90       	pop	r15
     a22:	ef 90       	pop	r14
     a24:	df 90       	pop	r13
     a26:	cf 90       	pop	r12
     a28:	bf 90       	pop	r11
     a2a:	af 90       	pop	r10
     a2c:	7f 90       	pop	r7
     a2e:	6f 90       	pop	r6
     a30:	5f 90       	pop	r5
     a32:	4f 90       	pop	r4
     a34:	08 95       	ret

00000a36 <ddmmToDecimal>:
}

/************************************************************************/
/* converts lat long ddmm:mm format to dd format                                                                     */
/************************************************************************/
double ddmmToDecimal(char* data){
     a36:	4f 92       	push	r4
     a38:	5f 92       	push	r5
     a3a:	6f 92       	push	r6
     a3c:	7f 92       	push	r7
     a3e:	8f 92       	push	r8
     a40:	9f 92       	push	r9
     a42:	af 92       	push	r10
     a44:	bf 92       	push	r11
     a46:	cf 92       	push	r12
     a48:	df 92       	push	r13
     a4a:	ef 92       	push	r14
     a4c:	ff 92       	push	r15
     a4e:	cf 93       	push	r28
     a50:	df 93       	push	r29
     a52:	00 d0       	rcall	.+0      	; 0xa54 <ddmmToDecimal+0x1e>
     a54:	00 d0       	rcall	.+0      	; 0xa56 <ddmmToDecimal+0x20>
     a56:	cd b7       	in	r28, 0x3d	; 61
     a58:	de b7       	in	r29, 0x3e	; 62
	double f = atof(data);
     a5a:	0e 94 d5 17 	call	0x2faa	; 0x2faa <atof>
     a5e:	6b 01       	movw	r12, r22
     a60:	7c 01       	movw	r14, r24
	double x = f-(int)f;
     a62:	0e 94 a9 10 	call	0x2152	; 0x2152 <__fixsfsi>
     a66:	69 83       	std	Y+1, r22	; 0x01
     a68:	7a 83       	std	Y+2, r23	; 0x02
     a6a:	8b 83       	std	Y+3, r24	; 0x03
     a6c:	9c 83       	std	Y+4, r25	; 0x04
	double min = ((int)f)%100;
     a6e:	89 81       	ldd	r24, Y+1	; 0x01
     a70:	9a 81       	ldd	r25, Y+2	; 0x02
     a72:	64 e6       	ldi	r22, 0x64	; 100
     a74:	70 e0       	ldi	r23, 0x00	; 0
     a76:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <__divmodhi4>
     a7a:	bc 01       	movw	r22, r24
     a7c:	88 27       	eor	r24, r24
     a7e:	77 fd       	sbrc	r23, 7
     a80:	80 95       	com	r24
     a82:	98 2f       	mov	r25, r24
     a84:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <__floatsisf>
     a88:	2b 01       	movw	r4, r22
     a8a:	3c 01       	movw	r6, r24
	//printf("%d\n",min);
	min += x;
	int dd = f/100;
     a8c:	20 e0       	ldi	r18, 0x00	; 0
     a8e:	30 e0       	ldi	r19, 0x00	; 0
     a90:	48 ec       	ldi	r20, 0xC8	; 200
     a92:	52 e4       	ldi	r21, 0x42	; 66
     a94:	c7 01       	movw	r24, r14
     a96:	b6 01       	movw	r22, r12
     a98:	0e 94 41 10 	call	0x2082	; 0x2082 <__divsf3>
     a9c:	0e 94 a9 10 	call	0x2152	; 0x2152 <__fixsfsi>
	double result = dd+(min/60);
     aa0:	88 27       	eor	r24, r24
     aa2:	77 fd       	sbrc	r23, 7
     aa4:	80 95       	com	r24
     aa6:	98 2f       	mov	r25, r24
     aa8:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <__floatsisf>
     aac:	4b 01       	movw	r8, r22
     aae:	5c 01       	movw	r10, r24
/************************************************************************/
/* converts lat long ddmm:mm format to dd format                                                                     */
/************************************************************************/
double ddmmToDecimal(char* data){
	double f = atof(data);
	double x = f-(int)f;
     ab0:	29 81       	ldd	r18, Y+1	; 0x01
     ab2:	3a 81       	ldd	r19, Y+2	; 0x02
     ab4:	b9 01       	movw	r22, r18
     ab6:	88 27       	eor	r24, r24
     ab8:	77 fd       	sbrc	r23, 7
     aba:	80 95       	com	r24
     abc:	98 2f       	mov	r25, r24
     abe:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <__floatsisf>
     ac2:	9b 01       	movw	r18, r22
     ac4:	ac 01       	movw	r20, r24
     ac6:	c7 01       	movw	r24, r14
     ac8:	b6 01       	movw	r22, r12
     aca:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <__subsf3>
     ace:	9b 01       	movw	r18, r22
     ad0:	ac 01       	movw	r20, r24
	double min = ((int)f)%100;
	//printf("%d\n",min);
	min += x;
     ad2:	c3 01       	movw	r24, r6
     ad4:	b2 01       	movw	r22, r4
     ad6:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <__addsf3>
	int dd = f/100;
	double result = dd+(min/60);
     ada:	20 e0       	ldi	r18, 0x00	; 0
     adc:	30 e0       	ldi	r19, 0x00	; 0
     ade:	40 e7       	ldi	r20, 0x70	; 112
     ae0:	52 e4       	ldi	r21, 0x42	; 66
     ae2:	0e 94 41 10 	call	0x2082	; 0x2082 <__divsf3>
     ae6:	9b 01       	movw	r18, r22
     ae8:	ac 01       	movw	r20, r24
     aea:	c5 01       	movw	r24, r10
     aec:	b4 01       	movw	r22, r8
     aee:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <__addsf3>
	return result;
}
     af2:	0f 90       	pop	r0
     af4:	0f 90       	pop	r0
     af6:	0f 90       	pop	r0
     af8:	0f 90       	pop	r0
     afa:	df 91       	pop	r29
     afc:	cf 91       	pop	r28
     afe:	ff 90       	pop	r15
     b00:	ef 90       	pop	r14
     b02:	df 90       	pop	r13
     b04:	cf 90       	pop	r12
     b06:	bf 90       	pop	r11
     b08:	af 90       	pop	r10
     b0a:	9f 90       	pop	r9
     b0c:	8f 90       	pop	r8
     b0e:	7f 90       	pop	r7
     b10:	6f 90       	pop	r6
     b12:	5f 90       	pop	r5
     b14:	4f 90       	pop	r4
     b16:	08 95       	ret

00000b18 <getLatLong>:
	}
	return false;

}

char* getLatLong(char* gpsStr, int pos, char flag){
     b18:	ff 92       	push	r15
     b1a:	0f 93       	push	r16
     b1c:	1f 93       	push	r17
     b1e:	cf 93       	push	r28
     b20:	df 93       	push	r29
     b22:	ec 01       	movw	r28, r24
     b24:	8b 01       	movw	r16, r22
     b26:	f4 2e       	mov	r15, r20
	int i=pos;
	char* location = (char*)malloc(12*sizeof(char));
     b28:	8c e0       	ldi	r24, 0x0C	; 12
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <malloc>
	i--;
	if(gpsStr[i]==',')
     b30:	fe 01       	movw	r30, r28
     b32:	e0 0f       	add	r30, r16
     b34:	f1 1f       	adc	r31, r17
     b36:	31 97       	sbiw	r30, 0x01	; 1
     b38:	20 81       	ld	r18, Z
     b3a:	2c 32       	cpi	r18, 0x2C	; 44
     b3c:	09 f0       	breq	.+2      	; 0xb40 <getLatLong+0x28>
     b3e:	67 c0       	rjmp	.+206    	; 0xc0e <getLatLong+0xf6>
	{
		i--;
     b40:	98 01       	movw	r18, r16
     b42:	22 50       	subi	r18, 0x02	; 2
     b44:	31 09       	sbc	r19, r1
		if(flag == 'N'){
     b46:	4e e4       	ldi	r20, 0x4E	; 78
     b48:	f4 16       	cp	r15, r20
     b4a:	61 f0       	breq	.+24     	; 0xb64 <getLatLong+0x4c>
				if(i==0)
					return NULL;
				i--;
			}
		}else{
			while(gpsStr[i]!=','){
     b4c:	fe 01       	movw	r30, r28
     b4e:	e2 0f       	add	r30, r18
     b50:	f3 1f       	adc	r31, r19
     b52:	40 81       	ld	r20, Z
     b54:	4c 32       	cpi	r20, 0x2C	; 44
     b56:	61 f1       	breq	.+88     	; 0xbb0 <getLatLong+0x98>
				if(i==1)
     b58:	21 30       	cpi	r18, 0x01	; 1
     b5a:	31 05       	cpc	r19, r1
     b5c:	09 f4       	brne	.+2      	; 0xb60 <getLatLong+0x48>
     b5e:	5a c0       	rjmp	.+180    	; 0xc14 <getLatLong+0xfc>
     b60:	df 01       	movw	r26, r30
     b62:	21 c0       	rjmp	.+66     	; 0xba6 <getLatLong+0x8e>
	i--;
	if(gpsStr[i]==',')
	{
		i--;
		if(flag == 'N'){
			while(gpsStr[i]!=','&& gpsStr[i]!='P'){
     b64:	fe 01       	movw	r30, r28
     b66:	e2 0f       	add	r30, r18
     b68:	f3 1f       	adc	r31, r19
     b6a:	40 81       	ld	r20, Z
     b6c:	4c 32       	cpi	r20, 0x2C	; 44
     b6e:	01 f1       	breq	.+64     	; 0xbb0 <getLatLong+0x98>
     b70:	40 35       	cpi	r20, 0x50	; 80
     b72:	f1 f0       	breq	.+60     	; 0xbb0 <getLatLong+0x98>
				if(i==0)
     b74:	21 15       	cp	r18, r1
     b76:	31 05       	cpc	r19, r1
     b78:	09 f4       	brne	.+2      	; 0xb7c <getLatLong+0x64>
     b7a:	4f c0       	rjmp	.+158    	; 0xc1a <getLatLong+0x102>
     b7c:	d8 01       	movw	r26, r16
     b7e:	12 97       	sbiw	r26, 0x02	; 2
     b80:	ac 0f       	add	r26, r28
     b82:	bd 1f       	adc	r27, r29
     b84:	04 c0       	rjmp	.+8      	; 0xb8e <getLatLong+0x76>
     b86:	21 15       	cp	r18, r1
     b88:	31 05       	cpc	r19, r1
     b8a:	09 f4       	brne	.+2      	; 0xb8e <getLatLong+0x76>
     b8c:	49 c0       	rjmp	.+146    	; 0xc20 <getLatLong+0x108>
					return NULL;
				i--;
     b8e:	21 50       	subi	r18, 0x01	; 1
     b90:	31 09       	sbc	r19, r1
	i--;
	if(gpsStr[i]==',')
	{
		i--;
		if(flag == 'N'){
			while(gpsStr[i]!=','&& gpsStr[i]!='P'){
     b92:	4e 91       	ld	r20, -X
     b94:	4c 32       	cpi	r20, 0x2C	; 44
     b96:	61 f0       	breq	.+24     	; 0xbb0 <getLatLong+0x98>
     b98:	40 35       	cpi	r20, 0x50	; 80
     b9a:	a9 f7       	brne	.-22     	; 0xb86 <getLatLong+0x6e>
     b9c:	09 c0       	rjmp	.+18     	; 0xbb0 <getLatLong+0x98>
					return NULL;
				i--;
			}
		}else{
			while(gpsStr[i]!=','){
				if(i==1)
     b9e:	21 30       	cpi	r18, 0x01	; 1
     ba0:	31 05       	cpc	r19, r1
     ba2:	09 f4       	brne	.+2      	; 0xba6 <getLatLong+0x8e>
     ba4:	40 c0       	rjmp	.+128    	; 0xc26 <getLatLong+0x10e>
				return NULL;
				i--;
     ba6:	21 50       	subi	r18, 0x01	; 1
     ba8:	31 09       	sbc	r19, r1
				if(i==0)
					return NULL;
				i--;
			}
		}else{
			while(gpsStr[i]!=','){
     baa:	4e 91       	ld	r20, -X
     bac:	4c 32       	cpi	r20, 0x2C	; 44
     bae:	b9 f7       	brne	.-18     	; 0xb9e <getLatLong+0x86>
     bb0:	dc 01       	movw	r26, r24
				if(i==1)
				return NULL;
				i--;
			}
		}
		i++;
     bb2:	2f 5f       	subi	r18, 0xFF	; 255
     bb4:	3f 4f       	sbci	r19, 0xFF	; 255
     bb6:	fe 01       	movw	r30, r28
     bb8:	e2 0f       	add	r30, r18
     bba:	f3 1f       	adc	r31, r19
		int count = 0;
		char dotFlag=0;
     bbc:	50 e0       	ldi	r21, 0x00	; 0
				return NULL;
				i--;
			}
		}
		i++;
		int count = 0;
     bbe:	20 e0       	ldi	r18, 0x00	; 0
     bc0:	30 e0       	ldi	r19, 0x00	; 0
		{
			location[count]=gpsStr[i];
			if(gpsStr[i]=='.'){
				if(dotFlag == 1)
					return NULL;
				dotFlag = 1;
     bc2:	61 e0       	ldi	r22, 0x01	; 1
			}
		}
		i++;
		int count = 0;
		char dotFlag=0;
		while(gpsStr[i]!=',')
     bc4:	0d c0       	rjmp	.+26     	; 0xbe0 <getLatLong+0xc8>
		{
			location[count]=gpsStr[i];
     bc6:	4d 93       	st	X+, r20
     bc8:	31 96       	adiw	r30, 0x01	; 1
			if(gpsStr[i]=='.'){
     bca:	48 81       	ld	r20, Y
     bcc:	4e 32       	cpi	r20, 0x2E	; 46
     bce:	19 f4       	brne	.+6      	; 0xbd6 <getLatLong+0xbe>
				if(dotFlag == 1)
     bd0:	51 30       	cpi	r21, 0x01	; 1
     bd2:	61 f1       	breq	.+88     	; 0xc2c <getLatLong+0x114>
					return NULL;
				dotFlag = 1;
     bd4:	56 2f       	mov	r21, r22
			}

			count++;
     bd6:	2f 5f       	subi	r18, 0xFF	; 255
     bd8:	3f 4f       	sbci	r19, 0xFF	; 255
			i++;
			if(count==12)
     bda:	2c 30       	cpi	r18, 0x0C	; 12
     bdc:	31 05       	cpc	r19, r1
     bde:	49 f1       	breq	.+82     	; 0xc32 <getLatLong+0x11a>
     be0:	ef 01       	movw	r28, r30
			}
		}
		i++;
		int count = 0;
		char dotFlag=0;
		while(gpsStr[i]!=',')
     be2:	40 81       	ld	r20, Z
     be4:	4c 32       	cpi	r20, 0x2C	; 44
     be6:	79 f7       	brne	.-34     	; 0xbc6 <getLatLong+0xae>
			i++;
			if(count==12)
				return NULL;
		}

		location[count]=0;
     be8:	fc 01       	movw	r30, r24
     bea:	e2 0f       	add	r30, r18
     bec:	f3 1f       	adc	r31, r19
     bee:	10 82       	st	Z, r1
		int len=strlen(location);
     bf0:	fc 01       	movw	r30, r24
     bf2:	01 90       	ld	r0, Z+
     bf4:	00 20       	and	r0, r0
     bf6:	e9 f7       	brne	.-6      	; 0xbf2 <getLatLong+0xda>
     bf8:	9f 01       	movw	r18, r30
     bfa:	28 1b       	sub	r18, r24
     bfc:	39 0b       	sbc	r19, r25
		if(len<9 || len >11)
     bfe:	2a 50       	subi	r18, 0x0A	; 10
     c00:	31 09       	sbc	r19, r1
     c02:	23 30       	cpi	r18, 0x03	; 3
     c04:	31 05       	cpc	r19, r1
     c06:	b8 f0       	brcs	.+46     	; 0xc36 <getLatLong+0x11e>
			return NULL;
     c08:	80 e0       	ldi	r24, 0x00	; 0
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	14 c0       	rjmp	.+40     	; 0xc36 <getLatLong+0x11e>
		return location;
	}
	else
		return NULL;
     c0e:	80 e0       	ldi	r24, 0x00	; 0
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	11 c0       	rjmp	.+34     	; 0xc36 <getLatLong+0x11e>
				i--;
			}
		}else{
			while(gpsStr[i]!=','){
				if(i==1)
				return NULL;
     c14:	80 e0       	ldi	r24, 0x00	; 0
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	0e c0       	rjmp	.+28     	; 0xc36 <getLatLong+0x11e>
	{
		i--;
		if(flag == 'N'){
			while(gpsStr[i]!=','&& gpsStr[i]!='P'){
				if(i==0)
					return NULL;
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	0b c0       	rjmp	.+22     	; 0xc36 <getLatLong+0x11e>
     c20:	80 e0       	ldi	r24, 0x00	; 0
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	08 c0       	rjmp	.+16     	; 0xc36 <getLatLong+0x11e>
				i--;
			}
		}else{
			while(gpsStr[i]!=','){
				if(i==1)
				return NULL;
     c26:	80 e0       	ldi	r24, 0x00	; 0
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	05 c0       	rjmp	.+10     	; 0xc36 <getLatLong+0x11e>
		while(gpsStr[i]!=',')
		{
			location[count]=gpsStr[i];
			if(gpsStr[i]=='.'){
				if(dotFlag == 1)
					return NULL;
     c2c:	80 e0       	ldi	r24, 0x00	; 0
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	02 c0       	rjmp	.+4      	; 0xc36 <getLatLong+0x11e>
			}

			count++;
			i++;
			if(count==12)
				return NULL;
     c32:	80 e0       	ldi	r24, 0x00	; 0
     c34:	90 e0       	ldi	r25, 0x00	; 0
			return NULL;
		return location;
	}
	else
		return NULL;
}
     c36:	df 91       	pop	r29
     c38:	cf 91       	pop	r28
     c3a:	1f 91       	pop	r17
     c3c:	0f 91       	pop	r16
     c3e:	ff 90       	pop	r15
     c40:	08 95       	ret

00000c42 <getCurrlocation>:
/************************************************************************/
/* parses the NMEA string and get Lattitude and Longitude from it                                                                     */
/************************************************************************/

int getCurrlocation(char *gpsStr, TrackPoint* curr,TrackPoint* prev)
{
     c42:	8f 92       	push	r8
     c44:	9f 92       	push	r9
     c46:	af 92       	push	r10
     c48:	bf 92       	push	r11
     c4a:	cf 92       	push	r12
     c4c:	df 92       	push	r13
     c4e:	ef 92       	push	r14
     c50:	ff 92       	push	r15
     c52:	0f 93       	push	r16
     c54:	1f 93       	push	r17
     c56:	cf 93       	push	r28
     c58:	df 93       	push	r29
     c5a:	7c 01       	movw	r14, r24
     c5c:	eb 01       	movw	r28, r22
     c5e:	8a 01       	movw	r16, r20
    char latdir,londir;
	int length = strlen(gpsStr);
     c60:	fc 01       	movw	r30, r24
     c62:	01 90       	ld	r0, Z+
     c64:	00 20       	and	r0, r0
     c66:	e9 f7       	brne	.-6      	; 0xc62 <getCurrlocation+0x20>
     c68:	31 97       	sbiw	r30, 0x01	; 1
     c6a:	e8 1b       	sub	r30, r24
     c6c:	f9 0b       	sbc	r31, r25
	if(length < 26)
     c6e:	7a 97       	sbiw	r30, 0x1a	; 26
     c70:	0c f4       	brge	.+2      	; 0xc74 <getCurrlocation+0x32>
     c72:	9a c0       	rjmp	.+308    	; 0xda8 <getCurrlocation+0x166>
		return false;
	if(!(gpsStr[0]=='G' && gpsStr[1]=='P'))
     c74:	fc 01       	movw	r30, r24
     c76:	80 81       	ld	r24, Z
     c78:	87 34       	cpi	r24, 0x47	; 71
     c7a:	09 f0       	breq	.+2      	; 0xc7e <getCurrlocation+0x3c>
     c7c:	98 c0       	rjmp	.+304    	; 0xdae <getCurrlocation+0x16c>
     c7e:	81 81       	ldd	r24, Z+1	; 0x01
     c80:	80 35       	cpi	r24, 0x50	; 80
     c82:	09 f0       	breq	.+2      	; 0xc86 <getCurrlocation+0x44>
     c84:	97 c0       	rjmp	.+302    	; 0xdb4 <getCurrlocation+0x172>
     c86:	83 c0       	rjmp	.+262    	; 0xd8e <getCurrlocation+0x14c>
		return false;
	int i=0;
	while(gpsStr[i])
	{
		if(gpsStr[i]=='N' || gpsStr[i]=='S')
     c88:	2e e4       	ldi	r18, 0x4E	; 78
     c8a:	b2 16       	cp	r11, r18
     c8c:	29 f0       	breq	.+10     	; 0xc98 <getCurrlocation+0x56>
     c8e:	83 e5       	ldi	r24, 0x53	; 83
     c90:	b8 16       	cp	r11, r24
     c92:	11 f0       	breq	.+4      	; 0xc98 <getCurrlocation+0x56>
		else if (gpsStr[i]==0)
		{
			return false;
		}

		i++;
     c94:	4b 01       	movw	r8, r22
     c96:	7f c0       	rjmp	.+254    	; 0xd96 <getCurrlocation+0x154>
	while(gpsStr[i])
	{
		if(gpsStr[i]=='N' || gpsStr[i]=='S')
		{
		    latdir = gpsStr[i];
			char* latittude = getLatLong(gpsStr,i,'N');
     c98:	4e e4       	ldi	r20, 0x4E	; 78
     c9a:	c7 01       	movw	r24, r14
     c9c:	0e 94 8c 05 	call	0xb18	; 0xb18 <getLatLong>
     ca0:	6c 01       	movw	r12, r24
			if(latittude == NULL)
     ca2:	00 97       	sbiw	r24, 0x00	; 0
     ca4:	09 f4       	brne	.+2      	; 0xca8 <getCurrlocation+0x66>
     ca6:	89 c0       	rjmp	.+274    	; 0xdba <getCurrlocation+0x178>
				return false;
			i++;
     ca8:	b4 01       	movw	r22, r8
     caa:	6e 5f       	subi	r22, 0xFE	; 254
     cac:	7f 4f       	sbci	r23, 0xFF	; 255
			while(gpsStr[i]!='E' && gpsStr[i]!='W'){
     cae:	f7 01       	movw	r30, r14
     cb0:	e6 0f       	add	r30, r22
     cb2:	f7 1f       	adc	r31, r23
     cb4:	a0 80       	ld	r10, Z
     cb6:	e5 e4       	ldi	r30, 0x45	; 69
     cb8:	ae 16       	cp	r10, r30
     cba:	c9 f0       	breq	.+50     	; 0xcee <getCurrlocation+0xac>
     cbc:	f7 e5       	ldi	r31, 0x57	; 87
     cbe:	af 16       	cp	r10, r31
     cc0:	b1 f0       	breq	.+44     	; 0xcee <getCurrlocation+0xac>
				if(gpsStr[i]==0)
     cc2:	aa 20       	and	r10, r10
     cc4:	09 f4       	brne	.+2      	; 0xcc8 <getCurrlocation+0x86>
     cc6:	7c c0       	rjmp	.+248    	; 0xdc0 <getCurrlocation+0x17e>
     cc8:	23 e0       	ldi	r18, 0x03	; 3
     cca:	82 0e       	add	r8, r18
     ccc:	91 1c       	adc	r9, r1
     cce:	f7 01       	movw	r30, r14
     cd0:	e8 0d       	add	r30, r8
     cd2:	f9 1d       	adc	r31, r9
     cd4:	03 c0       	rjmp	.+6      	; 0xcdc <getCurrlocation+0x9a>
     cd6:	aa 20       	and	r10, r10
     cd8:	09 f4       	brne	.+2      	; 0xcdc <getCurrlocation+0x9a>
     cda:	75 c0       	rjmp	.+234    	; 0xdc6 <getCurrlocation+0x184>
					return false;
				i++;
     cdc:	6f 5f       	subi	r22, 0xFF	; 255
     cde:	7f 4f       	sbci	r23, 0xFF	; 255
		    latdir = gpsStr[i];
			char* latittude = getLatLong(gpsStr,i,'N');
			if(latittude == NULL)
				return false;
			i++;
			while(gpsStr[i]!='E' && gpsStr[i]!='W'){
     ce0:	a1 90       	ld	r10, Z+
     ce2:	85 e4       	ldi	r24, 0x45	; 69
     ce4:	a8 16       	cp	r10, r24
     ce6:	19 f0       	breq	.+6      	; 0xcee <getCurrlocation+0xac>
     ce8:	27 e5       	ldi	r18, 0x57	; 87
     cea:	a2 12       	cpse	r10, r18
     cec:	f4 cf       	rjmp	.-24     	; 0xcd6 <getCurrlocation+0x94>
				if(gpsStr[i]==0)
					return false;
				i++;
			}
			londir = gpsStr[i];
			char* longitude = getLatLong(gpsStr,i,'E');
     cee:	45 e4       	ldi	r20, 0x45	; 69
     cf0:	c7 01       	movw	r24, r14
     cf2:	0e 94 8c 05 	call	0xb18	; 0xb18 <getLatLong>
     cf6:	7c 01       	movw	r14, r24
			if(longitude==NULL)
     cf8:	00 97       	sbiw	r24, 0x00	; 0
     cfa:	09 f4       	brne	.+2      	; 0xcfe <getCurrlocation+0xbc>
     cfc:	67 c0       	rjmp	.+206    	; 0xdcc <getCurrlocation+0x18a>
    TrackPoint* tp;
    uint16_t distToWp; //meter
}CurrentLocation;

void copyTrackPoint(TrackPoint* from, TrackPoint* to ){
    to->lat = from->lat;
     cfe:	88 81       	ld	r24, Y
     d00:	99 81       	ldd	r25, Y+1	; 0x01
     d02:	aa 81       	ldd	r26, Y+2	; 0x02
     d04:	bb 81       	ldd	r27, Y+3	; 0x03
     d06:	f8 01       	movw	r30, r16
     d08:	80 83       	st	Z, r24
     d0a:	91 83       	std	Z+1, r25	; 0x01
     d0c:	a2 83       	std	Z+2, r26	; 0x02
     d0e:	b3 83       	std	Z+3, r27	; 0x03
    to->lon = from->lon;
     d10:	8c 81       	ldd	r24, Y+4	; 0x04
     d12:	9d 81       	ldd	r25, Y+5	; 0x05
     d14:	ae 81       	ldd	r26, Y+6	; 0x06
     d16:	bf 81       	ldd	r27, Y+7	; 0x07
     d18:	84 83       	std	Z+4, r24	; 0x04
     d1a:	95 83       	std	Z+5, r25	; 0x05
     d1c:	a6 83       	std	Z+6, r26	; 0x06
     d1e:	b7 83       	std	Z+7, r27	; 0x07
				return false;

            copyTrackPoint(curr,prev);
            printf("lat: %s lon: %s\n",latittude,longitude);
     d20:	ff 92       	push	r15
     d22:	ef 92       	push	r14
     d24:	df 92       	push	r13
     d26:	cf 92       	push	r12
     d28:	88 e3       	ldi	r24, 0x38	; 56
     d2a:	91 e0       	ldi	r25, 0x01	; 1
     d2c:	9f 93       	push	r25
     d2e:	8f 93       	push	r24
     d30:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <printf>
            curr->lat = ddmmToDecimal(latittude);
     d34:	c6 01       	movw	r24, r12
     d36:	0e 94 1b 05 	call	0xa36	; 0xa36 <ddmmToDecimal>
     d3a:	68 83       	st	Y, r22
     d3c:	79 83       	std	Y+1, r23	; 0x01
     d3e:	8a 83       	std	Y+2, r24	; 0x02
     d40:	9b 83       	std	Y+3, r25	; 0x03
			curr->lon = ddmmToDecimal(longitude);
     d42:	c7 01       	movw	r24, r14
     d44:	0e 94 1b 05 	call	0xa36	; 0xa36 <ddmmToDecimal>
     d48:	6c 83       	std	Y+4, r22	; 0x04
     d4a:	7d 83       	std	Y+5, r23	; 0x05
     d4c:	8e 83       	std	Y+6, r24	; 0x06
     d4e:	9f 83       	std	Y+7, r25	; 0x07
			if(latdir=='S'){
     d50:	0f 90       	pop	r0
     d52:	0f 90       	pop	r0
     d54:	0f 90       	pop	r0
     d56:	0f 90       	pop	r0
     d58:	0f 90       	pop	r0
     d5a:	0f 90       	pop	r0
     d5c:	f3 e5       	ldi	r31, 0x53	; 83
     d5e:	bf 12       	cpse	r11, r31
     d60:	09 c0       	rjmp	.+18     	; 0xd74 <getCurrlocation+0x132>
                curr->lat = - curr->lat;
     d62:	08 81       	ld	r16, Y
     d64:	19 81       	ldd	r17, Y+1	; 0x01
     d66:	2a 81       	ldd	r18, Y+2	; 0x02
     d68:	3b 81       	ldd	r19, Y+3	; 0x03
     d6a:	30 58       	subi	r19, 0x80	; 128
     d6c:	08 83       	st	Y, r16
     d6e:	19 83       	std	Y+1, r17	; 0x01
     d70:	2a 83       	std	Y+2, r18	; 0x02
     d72:	3b 83       	std	Y+3, r19	; 0x03
			}
			if(londir == 'W'){
     d74:	27 e5       	ldi	r18, 0x57	; 87
     d76:	a2 12       	cpse	r10, r18
     d78:	2c c0       	rjmp	.+88     	; 0xdd2 <getCurrlocation+0x190>
                curr->lon = - curr->lon;
     d7a:	dc 01       	movw	r26, r24
     d7c:	cb 01       	movw	r24, r22
     d7e:	b0 58       	subi	r27, 0x80	; 128
     d80:	8c 83       	std	Y+4, r24	; 0x04
     d82:	9d 83       	std	Y+5, r25	; 0x05
     d84:	ae 83       	std	Y+6, r26	; 0x06
     d86:	bf 83       	std	Y+7, r27	; 0x07
			}
			return true;
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	24 c0       	rjmp	.+72     	; 0xdd6 <getCurrlocation+0x194>
     d8e:	f7 01       	movw	r30, r14
     d90:	31 96       	adiw	r30, 0x01	; 1
{
    char latdir,londir;
	int length = strlen(gpsStr);
	if(length < 26)
		return false;
	if(!(gpsStr[0]=='G' && gpsStr[1]=='P'))
     d92:	81 2c       	mov	r8, r1
     d94:	91 2c       	mov	r9, r1
		else if (gpsStr[i]==0)
		{
			return false;
		}

		i++;
     d96:	b4 01       	movw	r22, r8
     d98:	6f 5f       	subi	r22, 0xFF	; 255
     d9a:	7f 4f       	sbci	r23, 0xFF	; 255
	if(length < 26)
		return false;
	if(!(gpsStr[0]=='G' && gpsStr[1]=='P'))
		return false;
	int i=0;
	while(gpsStr[i])
     d9c:	b1 90       	ld	r11, Z+
     d9e:	b1 10       	cpse	r11, r1
     da0:	73 cf       	rjmp	.-282    	; 0xc88 <getCurrlocation+0x46>
			return false;
		}

		i++;
	}
	return false;
     da2:	80 e0       	ldi	r24, 0x00	; 0
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	17 c0       	rjmp	.+46     	; 0xdd6 <getCurrlocation+0x194>
int getCurrlocation(char *gpsStr, TrackPoint* curr,TrackPoint* prev)
{
    char latdir,londir;
	int length = strlen(gpsStr);
	if(length < 26)
		return false;
     da8:	80 e0       	ldi	r24, 0x00	; 0
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	14 c0       	rjmp	.+40     	; 0xdd6 <getCurrlocation+0x194>
	if(!(gpsStr[0]=='G' && gpsStr[1]=='P'))
		return false;
     dae:	80 e0       	ldi	r24, 0x00	; 0
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	11 c0       	rjmp	.+34     	; 0xdd6 <getCurrlocation+0x194>
     db4:	80 e0       	ldi	r24, 0x00	; 0
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	0e c0       	rjmp	.+28     	; 0xdd6 <getCurrlocation+0x194>
		if(gpsStr[i]=='N' || gpsStr[i]=='S')
		{
		    latdir = gpsStr[i];
			char* latittude = getLatLong(gpsStr,i,'N');
			if(latittude == NULL)
				return false;
     dba:	80 e0       	ldi	r24, 0x00	; 0
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	0b c0       	rjmp	.+22     	; 0xdd6 <getCurrlocation+0x194>
			i++;
			while(gpsStr[i]!='E' && gpsStr[i]!='W'){
				if(gpsStr[i]==0)
					return false;
     dc0:	80 e0       	ldi	r24, 0x00	; 0
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	08 c0       	rjmp	.+16     	; 0xdd6 <getCurrlocation+0x194>
     dc6:	80 e0       	ldi	r24, 0x00	; 0
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	05 c0       	rjmp	.+10     	; 0xdd6 <getCurrlocation+0x194>
				i++;
			}
			londir = gpsStr[i];
			char* longitude = getLatLong(gpsStr,i,'E');
			if(longitude==NULL)
				return false;
     dcc:	80 e0       	ldi	r24, 0x00	; 0
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	02 c0       	rjmp	.+4      	; 0xdd6 <getCurrlocation+0x194>
                curr->lat = - curr->lat;
			}
			if(londir == 'W'){
                curr->lon = - curr->lon;
			}
			return true;
     dd2:	81 e0       	ldi	r24, 0x01	; 1
     dd4:	90 e0       	ldi	r25, 0x00	; 0

		i++;
	}
	return false;

}
     dd6:	df 91       	pop	r29
     dd8:	cf 91       	pop	r28
     dda:	1f 91       	pop	r17
     ddc:	0f 91       	pop	r16
     dde:	ff 90       	pop	r15
     de0:	ef 90       	pop	r14
     de2:	df 90       	pop	r13
     de4:	cf 90       	pop	r12
     de6:	bf 90       	pop	r11
     de8:	af 90       	pop	r10
     dea:	9f 90       	pop	r9
     dec:	8f 90       	pop	r8
     dee:	08 95       	ret

00000df0 <usart_init>:

//double transmission speed, TX,RX pin enabled, asynchronous mode, no parity, 1 stop bit
void usart_init()
{
	UCSRA = (1<<U2X);
     df0:	82 e0       	ldi	r24, 0x02	; 2
     df2:	8b b9       	out	0x0b, r24	; 11
	UCSRB = (1<<(RXEN)) | (1<<(TXEN));
     df4:	88 e1       	ldi	r24, 0x18	; 24
     df6:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1); // Use 8-bit character sizes
     df8:	86 e8       	ldi	r24, 0x86	; 134
     dfa:	80 bd       	out	0x20, r24	; 32
	
	UBRRH=0;
     dfc:	10 bc       	out	0x20, r1	; 32
	UBRRL=0xC;	
     dfe:	8c e0       	ldi	r24, 0x0C	; 12
     e00:	89 b9       	out	0x09, r24	; 9
     e02:	08 95       	ret

00000e04 <usart_getch>:
}

//keep polling until get data from GPS
unsigned int usart_getch()
{
	while ((UCSRA & (1 << RXC)) == 0)
     e04:	5f 9b       	sbis	0x0b, 7	; 11
     e06:	fe cf       	rjmp	.-4      	; 0xe04 <usart_getch>
	{
		
	} // Do nothing until data have been recieved and is ready to be read from UDR
	return(UDR); // return the byte
     e08:	8c b1       	in	r24, 0x0c	; 12
}
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	08 95       	ret

00000e0e <timer1_init>:

//timer initialization
void timer1_init()
{
	// set up timer with prescaler = 64 and CTC mode
	TCCR1B |= (1 << WGM12)|(1 << CS11)|(1 << CS10);
     e0e:	8e b5       	in	r24, 0x2e	; 46
     e10:	8b 60       	ori	r24, 0x0B	; 11
     e12:	8e bd       	out	0x2e, r24	; 46
	// initialize counter
	TCNT1 = 0;
     e14:	1d bc       	out	0x2d, r1	; 45
     e16:	1c bc       	out	0x2c, r1	; 44
	// initialize compare value
	OCR1A = 24999;
     e18:	87 ea       	ldi	r24, 0xA7	; 167
     e1a:	91 e6       	ldi	r25, 0x61	; 97
     e1c:	9b bd       	out	0x2b, r25	; 43
     e1e:	8a bd       	out	0x2a, r24	; 42
	// enable compare interrupt
	TIMSK |= (1 << OCIE1A);
     e20:	89 b7       	in	r24, 0x39	; 57
     e22:	80 61       	ori	r24, 0x10	; 16
     e24:	89 bf       	out	0x39, r24	; 57
	// enable global interrupts
	sei();
     e26:	78 94       	sei
     e28:	08 95       	ret

00000e2a <int1_init>:
}

//interrupt1 initialization for rising edge
void int1_init(){
	GICR = (1<<INT1);
     e2a:	80 e8       	ldi	r24, 0x80	; 128
     e2c:	8b bf       	out	0x3b, r24	; 59
	MCUCR = MCUCR | 0b00001100;
     e2e:	85 b7       	in	r24, 0x35	; 53
     e30:	8c 60       	ori	r24, 0x0C	; 12
     e32:	85 bf       	out	0x35, r24	; 53
	sei();
     e34:	78 94       	sei
     e36:	08 95       	ret

00000e38 <timer0_init>:


void timer0_init()
{
	// set up timer with prescaler = 256
	TCCR0 |= (1 << CS02);
     e38:	83 b7       	in	r24, 0x33	; 51
     e3a:	84 60       	ori	r24, 0x04	; 4
     e3c:	83 bf       	out	0x33, r24	; 51
	// initialize counter
	TCNT0 = 0;
     e3e:	12 be       	out	0x32, r1	; 50
	// enable overflow interrupt
	TIMSK |= (1 << TOIE0);	
     e40:	89 b7       	in	r24, 0x39	; 57
     e42:	81 60       	ori	r24, 0x01	; 1
     e44:	89 bf       	out	0x39, r24	; 57
	// enable global interrupts
	sei();
     e46:	78 94       	sei
	// initialize overflow counter variable
	tot_overflow = 0;
     e48:	10 92 31 05 	sts	0x0531, r1
     e4c:	08 95       	ret

00000e4e <init>:

/************************************************************************/
/* initializes flags and variables                                                                     */
/************************************************************************/
void init(){
	totalDist = 0;
     e4e:	10 92 33 05 	sts	0x0533, r1
     e52:	10 92 32 05 	sts	0x0532, r1
	printf("initializing variables\n");
     e56:	83 e5       	ldi	r24, 0x53	; 83
     e58:	91 e0       	ldi	r25, 0x01	; 1
     e5a:	0e 94 0d 19 	call	0x321a	; 0x321a <puts>
     e5e:	2f e9       	ldi	r18, 0x9F	; 159
     e60:	86 e8       	ldi	r24, 0x86	; 134
     e62:	91 e0       	ldi	r25, 0x01	; 1
     e64:	21 50       	subi	r18, 0x01	; 1
     e66:	80 40       	sbci	r24, 0x00	; 0
     e68:	90 40       	sbci	r25, 0x00	; 0
     e6a:	e1 f7       	brne	.-8      	; 0xe64 <init+0x16>
     e6c:	00 c0       	rjmp	.+0      	; 0xe6e <init+0x20>
     e6e:	00 00       	nop
	
	//showLatLonInLCD();
	_delay_ms(500);
	
	
	printf("initializing variables\n");
     e70:	83 e5       	ldi	r24, 0x53	; 83
     e72:	91 e0       	ldi	r25, 0x01	; 1
     e74:	0e 94 0d 19 	call	0x321a	; 0x321a <puts>
	
	timer1_init();
     e78:	0e 94 07 07 	call	0xe0e	; 0xe0e <timer1_init>
	timer0_init();
     e7c:	0e 94 1c 07 	call	0xe38	; 0xe38 <timer0_init>
	
	PORTB = 0;
     e80:	18 ba       	out	0x18, r1	; 24
	
	str[0] = 0;
     e82:	10 92 67 00 	sts	0x0067, r1
	cursor=0;
     e86:	10 92 35 05 	sts	0x0535, r1
     e8a:	10 92 34 05 	sts	0x0534, r1
	started=0;
     e8e:	10 92 2f 05 	sts	0x052F, r1
	firstData=0;
     e92:	10 92 1f 05 	sts	0x051F, r1
	completed=0;
     e96:	10 92 22 05 	sts	0x0522, r1
}

void initTrackPoint(TrackPoint* tp){
    tp->lat = 0;
     e9a:	10 92 38 05 	sts	0x0538, r1
     e9e:	10 92 39 05 	sts	0x0539, r1
     ea2:	10 92 3a 05 	sts	0x053A, r1
     ea6:	10 92 3b 05 	sts	0x053B, r1
    tp->lon = 0;
     eaa:	10 92 3c 05 	sts	0x053C, r1
     eae:	10 92 3d 05 	sts	0x053D, r1
     eb2:	10 92 3e 05 	sts	0x053E, r1
     eb6:	10 92 3f 05 	sts	0x053F, r1
    to->lat = from->lat;
    to->lon = from->lon;
}

void initTrackPoint(TrackPoint* tp){
    tp->lat = 0;
     eba:	e3 e2       	ldi	r30, 0x23	; 35
     ebc:	f5 e0       	ldi	r31, 0x05	; 5
     ebe:	10 82       	st	Z, r1
     ec0:	11 82       	std	Z+1, r1	; 0x01
     ec2:	12 82       	std	Z+2, r1	; 0x02
     ec4:	13 82       	std	Z+3, r1	; 0x03
    tp->lon = 0;
     ec6:	10 92 27 05 	sts	0x0527, r1
     eca:	10 92 28 05 	sts	0x0528, r1
     ece:	10 92 29 05 	sts	0x0529, r1
     ed2:	10 92 2a 05 	sts	0x052A, r1
    to->lat = from->lat;
    to->lon = from->lon;
}

void initTrackPoint(TrackPoint* tp){
    tp->lat = 0;
     ed6:	10 92 46 05 	sts	0x0546, r1
     eda:	10 92 47 05 	sts	0x0547, r1
     ede:	10 92 48 05 	sts	0x0548, r1
     ee2:	10 92 49 05 	sts	0x0549, r1
    tp->lon = 0;
     ee6:	10 92 4a 05 	sts	0x054A, r1
     eea:	10 92 4b 05 	sts	0x054B, r1
     eee:	10 92 4c 05 	sts	0x054C, r1
     ef2:	10 92 4d 05 	sts	0x054D, r1
	initTrackPoint(&prev);
	initTrackPoint(&curr);
	initTrackPoint(&next);
	currLoc.tp = &curr;
     ef6:	f0 93 2c 05 	sts	0x052C, r31
     efa:	e0 93 2b 05 	sts	0x052B, r30
	currLoc.distToWp = INFINITY;
     efe:	8f ef       	ldi	r24, 0xFF	; 255
     f00:	9f ef       	ldi	r25, 0xFF	; 255
     f02:	90 93 2e 05 	sts	0x052E, r25
     f06:	80 93 2d 05 	sts	0x052D, r24
	totalDist = 0;
     f0a:	10 92 33 05 	sts	0x0533, r1
     f0e:	10 92 32 05 	sts	0x0532, r1
	lastidx = sizeof(path)/sizeof(path[0]);
     f12:	85 e0       	ldi	r24, 0x05	; 5
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	90 93 21 05 	sts	0x0521, r25
     f1a:	80 93 20 05 	sts	0x0520, r24
	wayptidx = 1;
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	90 93 4f 05 	sts	0x054F, r25
     f26:	80 93 4e 05 	sts	0x054E, r24
	direction = STRAIGHT;
     f2a:	10 92 30 05 	sts	0x0530, r1
	lcd_state = DONT_CHANGE;
     f2e:	83 e0       	ldi	r24, 0x03	; 3
     f30:	80 93 66 00 	sts	0x0066, r24
	hour = 0 ;
     f34:	10 92 37 05 	sts	0x0537, r1
     f38:	10 92 36 05 	sts	0x0536, r1
	min = 0;
     f3c:	10 92 41 05 	sts	0x0541, r1
     f40:	10 92 40 05 	sts	0x0540, r1
	sec = 0;
     f44:	10 92 42 05 	sts	0x0542, r1
     f48:	10 92 43 05 	sts	0x0543, r1
     f4c:	10 92 44 05 	sts	0x0544, r1
     f50:	10 92 45 05 	sts	0x0545, r1
	
	printf("completed initializing variables\n");
     f54:	89 e4       	ldi	r24, 0x49	; 73
     f56:	91 e0       	ldi	r25, 0x01	; 1
     f58:	0e 94 0d 19 	call	0x321a	; 0x321a <puts>
     f5c:	08 95       	ret

00000f5e <__vector_2>:
	}
}

//maintains push-button state
ISR(INT1_vect)
{
     f5e:	1f 92       	push	r1
     f60:	0f 92       	push	r0
     f62:	0f b6       	in	r0, 0x3f	; 63
     f64:	0f 92       	push	r0
     f66:	11 24       	eor	r1, r1
     f68:	2f 93       	push	r18
     f6a:	3f 93       	push	r19
     f6c:	4f 93       	push	r20
     f6e:	5f 93       	push	r21
     f70:	6f 93       	push	r22
     f72:	7f 93       	push	r23
     f74:	8f 93       	push	r24
     f76:	9f 93       	push	r25
     f78:	af 93       	push	r26
     f7a:	bf 93       	push	r27
     f7c:	ef 93       	push	r30
     f7e:	ff 93       	push	r31
	printf("button pushed\n");
     f80:	8a e6       	ldi	r24, 0x6A	; 106
     f82:	91 e0       	ldi	r25, 0x01	; 1
     f84:	0e 94 0d 19 	call	0x321a	; 0x321a <puts>
	Lcd4_Clear();
     f88:	0e 94 ca 02 	call	0x594	; 0x594 <Lcd4_Clear>
	Lcd4_Set_Cursor(1,0);
     f8c:	60 e0       	ldi	r22, 0x00	; 0
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <Lcd4_Set_Cursor>
	
	if(button_state == NOT_STARTED){
     f94:	80 91 1d 05 	lds	r24, 0x051D
     f98:	81 11       	cpse	r24, r1
     f9a:	0a c0       	rjmp	.+20     	; 0xfb0 <__vector_2+0x52>
		Lcd4_Write_String("Starting...");
     f9c:	88 e7       	ldi	r24, 0x78	; 120
     f9e:	91 e0       	ldi	r25, 0x01	; 1
     fa0:	0e 94 65 03 	call	0x6ca	; 0x6ca <Lcd4_Write_String>
		init();
     fa4:	0e 94 27 07 	call	0xe4e	; 0xe4e <init>
		button_state = STARTED;
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	80 93 1d 05 	sts	0x051D, r24
     fae:	2d c0       	rjmp	.+90     	; 0x100a <__vector_2+0xac>
		
	}else if(button_state == STARTED){
     fb0:	81 30       	cpi	r24, 0x01	; 1
     fb2:	a9 f4       	brne	.+42     	; 0xfde <__vector_2+0x80>
		button_state =  STOPPED;
     fb4:	82 e0       	ldi	r24, 0x02	; 2
     fb6:	80 93 1d 05 	sts	0x051D, r24
		started = 0;
     fba:	10 92 2f 05 	sts	0x052F, r1
		
		Lcd4_Write_String("Stopping...");
     fbe:	84 e8       	ldi	r24, 0x84	; 132
     fc0:	91 e0       	ldi	r25, 0x01	; 1
     fc2:	0e 94 65 03 	call	0x6ca	; 0x6ca <Lcd4_Write_String>
     fc6:	2f e3       	ldi	r18, 0x3F	; 63
     fc8:	8d e0       	ldi	r24, 0x0D	; 13
     fca:	93 e0       	ldi	r25, 0x03	; 3
     fcc:	21 50       	subi	r18, 0x01	; 1
     fce:	80 40       	sbci	r24, 0x00	; 0
     fd0:	90 40       	sbci	r25, 0x00	; 0
     fd2:	e1 f7       	brne	.-8      	; 0xfcc <__vector_2+0x6e>
     fd4:	00 c0       	rjmp	.+0      	; 0xfd6 <__vector_2+0x78>
     fd6:	00 00       	nop
		_delay_ms(1000);
		Lcd4_Clear();
     fd8:	0e 94 ca 02 	call	0x594	; 0x594 <Lcd4_Clear>
     fdc:	16 c0       	rjmp	.+44     	; 0x100a <__vector_2+0xac>
		
	}else if(button_state == STOPPED){
     fde:	82 30       	cpi	r24, 0x02	; 2
     fe0:	a1 f4       	brne	.+40     	; 0x100a <__vector_2+0xac>
		
		Lcd4_Clear();
     fe2:	0e 94 ca 02 	call	0x594	; 0x594 <Lcd4_Clear>
		Lcd4_Set_Cursor(1,0);
     fe6:	60 e0       	ldi	r22, 0x00	; 0
     fe8:	81 e0       	ldi	r24, 0x01	; 1
     fea:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <Lcd4_Set_Cursor>
		
		Lcd4_Write_String("Welcome To!");
     fee:	80 e9       	ldi	r24, 0x90	; 144
     ff0:	91 e0       	ldi	r25, 0x01	; 1
     ff2:	0e 94 65 03 	call	0x6ca	; 0x6ca <Lcd4_Write_String>
		Lcd4_Set_Cursor(2,0);
     ff6:	60 e0       	ldi	r22, 0x00	; 0
     ff8:	82 e0       	ldi	r24, 0x02	; 2
     ffa:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <Lcd4_Set_Cursor>
		Lcd4_Write_String("-GPS NAVIGATOR-");
     ffe:	8c e9       	ldi	r24, 0x9C	; 156
    1000:	91 e0       	ldi	r25, 0x01	; 1
    1002:	0e 94 65 03 	call	0x6ca	; 0x6ca <Lcd4_Write_String>
		button_state = NOT_STARTED;
    1006:	10 92 1d 05 	sts	0x051D, r1
	}
	//_delay_ms(1000);
	printf("button current state %d\n",button_state);
    100a:	80 91 1d 05 	lds	r24, 0x051D
    100e:	1f 92       	push	r1
    1010:	8f 93       	push	r24
    1012:	8c ea       	ldi	r24, 0xAC	; 172
    1014:	91 e0       	ldi	r25, 0x01	; 1
    1016:	9f 93       	push	r25
    1018:	8f 93       	push	r24
    101a:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <printf>
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	0f 90       	pop	r0
    1024:	0f 90       	pop	r0
}
    1026:	ff 91       	pop	r31
    1028:	ef 91       	pop	r30
    102a:	bf 91       	pop	r27
    102c:	af 91       	pop	r26
    102e:	9f 91       	pop	r25
    1030:	8f 91       	pop	r24
    1032:	7f 91       	pop	r23
    1034:	6f 91       	pop	r22
    1036:	5f 91       	pop	r21
    1038:	4f 91       	pop	r20
    103a:	3f 91       	pop	r19
    103c:	2f 91       	pop	r18
    103e:	0f 90       	pop	r0
    1040:	0f be       	out	0x3f, r0	; 63
    1042:	0f 90       	pop	r0
    1044:	1f 90       	pop	r1
    1046:	18 95       	reti

00001048 <main>:
	
	printf("completed initializing variables\n");
}

int main(void)
{
    1048:	cf 93       	push	r28
    104a:	df 93       	push	r29
    104c:	cd b7       	in	r28, 0x3d	; 61
    104e:	de b7       	in	r29, 0x3e	; 62
    1050:	6c 97       	sbiw	r28, 0x1c	; 28
    1052:	0f b6       	in	r0, 0x3f	; 63
    1054:	f8 94       	cli
    1056:	de bf       	out	0x3e, r29	; 62
    1058:	0f be       	out	0x3f, r0	; 63
    105a:	cd bf       	out	0x3d, r28	; 61
	//lcd init
	DDRD = 0xff;
    105c:	8f ef       	ldi	r24, 0xFF	; 255
    105e:	81 bb       	out	0x11, r24	; 17
	DDRC = 0xFF;
    1060:	84 bb       	out	0x14, r24	; 20
	
	DDRA = 0x03;//button and motor
    1062:	93 e0       	ldi	r25, 0x03	; 3
    1064:	9a bb       	out	0x1a, r25	; 26
	DDRB = 0xff;//lED 4 test
    1066:	87 bb       	out	0x17, r24	; 23

	//initializing LCD
	Lcd4_Init();
    1068:	0e 94 ee 02 	call	0x5dc	; 0x5dc <Lcd4_Init>
	//interrupt init
	int1_init();
    106c:	0e 94 15 07 	call	0xe2a	; 0xe2a <int1_init>
	
	//USART initialization
	usart_init();
    1070:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <usart_init>
	FILE uart_output = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);
    1074:	2e e0       	ldi	r18, 0x0E	; 14
    1076:	de 01       	movw	r26, r28
    1078:	11 96       	adiw	r26, 0x01	; 1
    107a:	fd 01       	movw	r30, r26
    107c:	82 2f       	mov	r24, r18
    107e:	11 92       	st	Z+, r1
    1080:	8a 95       	dec	r24
    1082:	e9 f7       	brne	.-6      	; 0x107e <main+0x36>
    1084:	82 e0       	ldi	r24, 0x02	; 2
    1086:	8c 83       	std	Y+4, r24	; 0x04
    1088:	85 e1       	ldi	r24, 0x15	; 21
    108a:	91 e0       	ldi	r25, 0x01	; 1
    108c:	9a 87       	std	Y+10, r25	; 0x0a
    108e:	89 87       	std	Y+9, r24	; 0x09
	FILE uart_input = FDEV_SETUP_STREAM(NULL, uart_getchar, _FDEV_SETUP_READ);
    1090:	ae 01       	movw	r20, r28
    1092:	41 5f       	subi	r20, 0xF1	; 241
    1094:	5f 4f       	sbci	r21, 0xFF	; 255
    1096:	fa 01       	movw	r30, r20
    1098:	11 92       	st	Z+, r1
    109a:	2a 95       	dec	r18
    109c:	e9 f7       	brne	.-6      	; 0x1098 <main+0x50>
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	8a 8b       	std	Y+18, r24	; 0x12
    10a2:	81 e2       	ldi	r24, 0x21	; 33
    10a4:	91 e0       	ldi	r25, 0x01	; 1
    10a6:	9a 8f       	std	Y+26, r25	; 0x1a
    10a8:	89 8f       	std	Y+25, r24	; 0x19
	stdout = &uart_output;
    10aa:	b0 93 57 05 	sts	0x0557, r27
    10ae:	a0 93 56 05 	sts	0x0556, r26
	stdin  = &uart_input;
    10b2:	50 93 55 05 	sts	0x0555, r21
    10b6:	40 93 54 05 	sts	0x0554, r20
	printf("\n\n-----------------------MAIN-----------------------\n\n");
    10ba:	85 ec       	ldi	r24, 0xC5	; 197
    10bc:	91 e0       	ldi	r25, 0x01	; 1
    10be:	0e 94 0d 19 	call	0x321a	; 0x321a <puts>
   
   Lcd4_Clear();
    10c2:	0e 94 ca 02 	call	0x594	; 0x594 <Lcd4_Clear>
   Lcd4_Set_Cursor(1,0);
    10c6:	60 e0       	ldi	r22, 0x00	; 0
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <Lcd4_Set_Cursor>
   
   Lcd4_Write_String("Welcome To!");
    10ce:	80 e9       	ldi	r24, 0x90	; 144
    10d0:	91 e0       	ldi	r25, 0x01	; 1
    10d2:	0e 94 65 03 	call	0x6ca	; 0x6ca <Lcd4_Write_String>
   Lcd4_Set_Cursor(2,0);
    10d6:	60 e0       	ldi	r22, 0x00	; 0
    10d8:	82 e0       	ldi	r24, 0x02	; 2
    10da:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <Lcd4_Set_Cursor>
   Lcd4_Write_String("-GPS NAVIGATOR-");
    10de:	8c e9       	ldi	r24, 0x9C	; 156
    10e0:	91 e0       	ldi	r25, 0x01	; 1
    10e2:	0e 94 65 03 	call	0x6ca	; 0x6ca <Lcd4_Write_String>
    10e6:	ff e3       	ldi	r31, 0x3F	; 63
    10e8:	2d e0       	ldi	r18, 0x0D	; 13
    10ea:	83 e0       	ldi	r24, 0x03	; 3
    10ec:	f1 50       	subi	r31, 0x01	; 1
    10ee:	20 40       	sbci	r18, 0x00	; 0
    10f0:	80 40       	sbci	r24, 0x00	; 0
    10f2:	e1 f7       	brne	.-8      	; 0x10ec <main+0xa4>
    10f4:	00 c0       	rjmp	.+0      	; 0x10f6 <main+0xae>
    10f6:	00 00       	nop
    10f8:	ff cf       	rjmp	.-2      	; 0x10f8 <main+0xb0>

000010fa <motorSwitch>:
/************************************************************************/
/* controls which motor to turn on, which one to turn off
0 = off , 1 = on                                                                     */
/************************************************************************/
void motorSwitch(char left, char right){
	if(left == 0)
    10fa:	81 11       	cpse	r24, r1
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <motorSwitch+0x8>
	PORTA = PORTA & (~(1<<LEFT_MOTOR));
    10fe:	d8 98       	cbi	0x1b, 0	; 27
    1100:	01 c0       	rjmp	.+2      	; 0x1104 <motorSwitch+0xa>
	else
	PORTA = PORTA | (1<<LEFT_MOTOR);
    1102:	d8 9a       	sbi	0x1b, 0	; 27
	if(right == 0)
    1104:	61 11       	cpse	r22, r1
    1106:	02 c0       	rjmp	.+4      	; 0x110c <motorSwitch+0x12>
	PORTA = PORTA & (~(1<<RIGHT_MOTOR));
    1108:	d9 98       	cbi	0x1b, 1	; 27
    110a:	08 95       	ret
	else
	PORTA = PORTA | (1<<RIGHT_MOTOR);
    110c:	d9 9a       	sbi	0x1b, 1	; 27
    110e:	08 95       	ret

00001110 <useDirection>:
/************************************************************************/
/* given direction proper instruction is show on LCD 
and proper motor's are vibrated                                                                     */
/************************************************************************/
void useDirection(int direction)
{
    1110:	0f 93       	push	r16
    1112:	1f 93       	push	r17
    1114:	cf 93       	push	r28
    1116:	df 93       	push	r29
    1118:	cd b7       	in	r28, 0x3d	; 61
    111a:	de b7       	in	r29, 0x3e	; 62
    111c:	61 97       	sbiw	r28, 0x11	; 17
    111e:	0f b6       	in	r0, 0x3f	; 63
    1120:	f8 94       	cli
    1122:	de bf       	out	0x3e, r29	; 62
    1124:	0f be       	out	0x3f, r0	; 63
    1126:	cd bf       	out	0x3d, r28	; 61
    1128:	8c 01       	movw	r16, r24
	printf("\nhandling direction\n");
    112a:	80 e2       	ldi	r24, 0x20	; 32
    112c:	92 e0       	ldi	r25, 0x02	; 2
    112e:	0e 94 0d 19 	call	0x321a	; 0x321a <puts>
	printf("\ndirection: %d\n",direction);
    1132:	1f 93       	push	r17
    1134:	0f 93       	push	r16
    1136:	84 e3       	ldi	r24, 0x34	; 52
    1138:	92 e0       	ldi	r25, 0x02	; 2
    113a:	9f 93       	push	r25
    113c:	8f 93       	push	r24
    113e:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <printf>
	if(direction==LEFT) {
    1142:	0f 90       	pop	r0
    1144:	0f 90       	pop	r0
    1146:	0f 90       	pop	r0
    1148:	0f 90       	pop	r0
    114a:	02 30       	cpi	r16, 0x02	; 2
    114c:	11 05       	cpc	r17, r1
    114e:	b1 f5       	brne	.+108    	; 0x11bc <useDirection+0xac>
		printf("****TURN LEFT\n");
    1150:	84 e4       	ldi	r24, 0x44	; 68
    1152:	92 e0       	ldi	r25, 0x02	; 2
    1154:	0e 94 0d 19 	call	0x321a	; 0x321a <puts>
		//showDirection();
		lcd_state = SHOW_DIRECTION;
    1158:	82 e0       	ldi	r24, 0x02	; 2
    115a:	80 93 66 00 	sts	0x0066, r24
		//show in lcd turn left
		Lcd4_Clear();
    115e:	0e 94 ca 02 	call	0x594	; 0x594 <Lcd4_Clear>
		Lcd4_Set_Cursor(1,0);
    1162:	60 e0       	ldi	r22, 0x00	; 0
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <Lcd4_Set_Cursor>
		Lcd4_Write_String("TURN LEFT");
    116a:	88 e4       	ldi	r24, 0x48	; 72
    116c:	92 e0       	ldi	r25, 0x02	; 2
    116e:	0e 94 65 03 	call	0x6ca	; 0x6ca <Lcd4_Write_String>
		char buffer[17];
		snprintf(buffer, sizeof buffer, "covered %dm", totalDist);
    1172:	80 91 33 05 	lds	r24, 0x0533
    1176:	8f 93       	push	r24
    1178:	80 91 32 05 	lds	r24, 0x0532
    117c:	8f 93       	push	r24
    117e:	82 e5       	ldi	r24, 0x52	; 82
    1180:	92 e0       	ldi	r25, 0x02	; 2
    1182:	9f 93       	push	r25
    1184:	8f 93       	push	r24
    1186:	1f 92       	push	r1
    1188:	81 e1       	ldi	r24, 0x11	; 17
    118a:	8f 93       	push	r24
    118c:	8e 01       	movw	r16, r28
    118e:	0f 5f       	subi	r16, 0xFF	; 255
    1190:	1f 4f       	sbci	r17, 0xFF	; 255
    1192:	1f 93       	push	r17
    1194:	0f 93       	push	r16
    1196:	0e 94 3a 19 	call	0x3274	; 0x3274 <snprintf>
		Lcd4_Set_Cursor(2,0);
    119a:	60 e0       	ldi	r22, 0x00	; 0
    119c:	82 e0       	ldi	r24, 0x02	; 2
    119e:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <Lcd4_Set_Cursor>
		Lcd4_Write_String(buffer);
    11a2:	c8 01       	movw	r24, r16
    11a4:	0e 94 65 03 	call	0x6ca	; 0x6ca <Lcd4_Write_String>
		Lcd4_Write_String("Dist");
		Lcd4_Set_Cursor(2,5);
		Lcd4_Write_String(buffer);*/
		
		//turn on left motor turn off right motor
		motorSwitch(1,0);
    11a8:	60 e0       	ldi	r22, 0x00	; 0
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	0e 94 7d 08 	call	0x10fa	; 0x10fa <motorSwitch>
    11b0:	0f b6       	in	r0, 0x3f	; 63
    11b2:	f8 94       	cli
    11b4:	de bf       	out	0x3e, r29	; 62
    11b6:	0f be       	out	0x3f, r0	; 63
    11b8:	cd bf       	out	0x3d, r28	; 61
    11ba:	91 c0       	rjmp	.+290    	; 0x12de <useDirection+0x1ce>
	}
	else if(direction == RIGHT){
    11bc:	01 30       	cpi	r16, 0x01	; 1
    11be:	11 05       	cpc	r17, r1
    11c0:	b1 f5       	brne	.+108    	; 0x122e <useDirection+0x11e>
		printf("****TURN RIGHT\n");
    11c2:	8e e5       	ldi	r24, 0x5E	; 94
    11c4:	92 e0       	ldi	r25, 0x02	; 2
    11c6:	0e 94 0d 19 	call	0x321a	; 0x321a <puts>
		lcd_state = SHOW_DIRECTION;
    11ca:	82 e0       	ldi	r24, 0x02	; 2
    11cc:	80 93 66 00 	sts	0x0066, r24
		//showDirection();
		//show in lcd turn left
		Lcd4_Clear();
    11d0:	0e 94 ca 02 	call	0x594	; 0x594 <Lcd4_Clear>
		Lcd4_Set_Cursor(1,0);
    11d4:	60 e0       	ldi	r22, 0x00	; 0
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <Lcd4_Set_Cursor>
		Lcd4_Write_String("TURN RIGHT");
    11dc:	82 e6       	ldi	r24, 0x62	; 98
    11de:	92 e0       	ldi	r25, 0x02	; 2
    11e0:	0e 94 65 03 	call	0x6ca	; 0x6ca <Lcd4_Write_String>
		char buffer[17];
		snprintf(buffer, sizeof buffer, "covered %dm", totalDist);
    11e4:	80 91 33 05 	lds	r24, 0x0533
    11e8:	8f 93       	push	r24
    11ea:	80 91 32 05 	lds	r24, 0x0532
    11ee:	8f 93       	push	r24
    11f0:	82 e5       	ldi	r24, 0x52	; 82
    11f2:	92 e0       	ldi	r25, 0x02	; 2
    11f4:	9f 93       	push	r25
    11f6:	8f 93       	push	r24
    11f8:	1f 92       	push	r1
    11fa:	81 e1       	ldi	r24, 0x11	; 17
    11fc:	8f 93       	push	r24
    11fe:	8e 01       	movw	r16, r28
    1200:	0f 5f       	subi	r16, 0xFF	; 255
    1202:	1f 4f       	sbci	r17, 0xFF	; 255
    1204:	1f 93       	push	r17
    1206:	0f 93       	push	r16
    1208:	0e 94 3a 19 	call	0x3274	; 0x3274 <snprintf>
		Lcd4_Set_Cursor(2,0);
    120c:	60 e0       	ldi	r22, 0x00	; 0
    120e:	82 e0       	ldi	r24, 0x02	; 2
    1210:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <Lcd4_Set_Cursor>
		Lcd4_Write_String(buffer);
    1214:	c8 01       	movw	r24, r16
    1216:	0e 94 65 03 	call	0x6ca	; 0x6ca <Lcd4_Write_String>
		Lcd4_Write_String("Dist");
		Lcd4_Set_Cursor(2,5);
		Lcd4_Write_String(buffer);*/
		
		//turn off left motor turn on right motor
		motorSwitch(0,1);
    121a:	61 e0       	ldi	r22, 0x01	; 1
    121c:	80 e0       	ldi	r24, 0x00	; 0
    121e:	0e 94 7d 08 	call	0x10fa	; 0x10fa <motorSwitch>
    1222:	0f b6       	in	r0, 0x3f	; 63
    1224:	f8 94       	cli
    1226:	de bf       	out	0x3e, r29	; 62
    1228:	0f be       	out	0x3f, r0	; 63
    122a:	cd bf       	out	0x3d, r28	; 61
    122c:	58 c0       	rjmp	.+176    	; 0x12de <useDirection+0x1ce>
	}
	else if(direction == STRAIGHT || direction == NO_CHANGE){
    122e:	01 15       	cp	r16, r1
    1230:	11 05       	cpc	r17, r1
    1232:	21 f0       	breq	.+8      	; 0x123c <useDirection+0x12c>
    1234:	03 30       	cpi	r16, 0x03	; 3
    1236:	11 05       	cpc	r17, r1
    1238:	09 f0       	breq	.+2      	; 0x123c <useDirection+0x12c>
    123a:	42 c0       	rjmp	.+132    	; 0x12c0 <useDirection+0x1b0>
		printf("****GO STRAIGHT\n");
    123c:	8d e6       	ldi	r24, 0x6D	; 109
    123e:	92 e0       	ldi	r25, 0x02	; 2
    1240:	0e 94 0d 19 	call	0x321a	; 0x321a <puts>
		//show in lcd turn left
		
		Lcd4_Clear();
    1244:	0e 94 ca 02 	call	0x594	; 0x594 <Lcd4_Clear>
		Lcd4_Set_Cursor(1,0);
    1248:	60 e0       	ldi	r22, 0x00	; 0
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <Lcd4_Set_Cursor>
		Lcd4_Write_String("Go Straight");
    1250:	8d e7       	ldi	r24, 0x7D	; 125
    1252:	92 e0       	ldi	r25, 0x02	; 2
    1254:	0e 94 65 03 	call	0x6ca	; 0x6ca <Lcd4_Write_String>
		char buffer[17];
		snprintf(buffer, sizeof buffer, "covered %dm", totalDist);
    1258:	80 91 33 05 	lds	r24, 0x0533
    125c:	8f 93       	push	r24
    125e:	80 91 32 05 	lds	r24, 0x0532
    1262:	8f 93       	push	r24
    1264:	82 e5       	ldi	r24, 0x52	; 82
    1266:	92 e0       	ldi	r25, 0x02	; 2
    1268:	9f 93       	push	r25
    126a:	8f 93       	push	r24
    126c:	1f 92       	push	r1
    126e:	81 e1       	ldi	r24, 0x11	; 17
    1270:	8f 93       	push	r24
    1272:	8e 01       	movw	r16, r28
    1274:	0f 5f       	subi	r16, 0xFF	; 255
    1276:	1f 4f       	sbci	r17, 0xFF	; 255
    1278:	1f 93       	push	r17
    127a:	0f 93       	push	r16
    127c:	0e 94 3a 19 	call	0x3274	; 0x3274 <snprintf>
		Lcd4_Set_Cursor(2,0);
    1280:	60 e0       	ldi	r22, 0x00	; 0
    1282:	82 e0       	ldi	r24, 0x02	; 2
    1284:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <Lcd4_Set_Cursor>
		Lcd4_Write_String(buffer);
    1288:	c8 01       	movw	r24, r16
    128a:	0e 94 65 03 	call	0x6ca	; 0x6ca <Lcd4_Write_String>
		/*snprintf(buffer, sizeof buffer, "%d", currLoc.distToWp);
		Lcd4_Set_Cursor(2,0);
		Lcd4_Write_String("Dist");
		Lcd4_Set_Cursor(2,5);
		Lcd4_Write_String(buffer);*/
		if(x==0){
    128e:	0f b6       	in	r0, 0x3f	; 63
    1290:	f8 94       	cli
    1292:	de bf       	out	0x3e, r29	; 62
    1294:	0f be       	out	0x3f, r0	; 63
    1296:	cd bf       	out	0x3d, r28	; 61
    1298:	80 91 1e 05 	lds	r24, 0x051E
    129c:	81 11       	cpse	r24, r1
    129e:	06 c0       	rjmp	.+12     	; 0x12ac <useDirection+0x19c>
			lcd_state = SHOW_CURR_LOC;
    12a0:	10 92 66 00 	sts	0x0066, r1
			x++;
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	80 93 1e 05 	sts	0x051E, r24
    12aa:	05 c0       	rjmp	.+10     	; 0x12b6 <useDirection+0x1a6>
		}else{
			lcd_state = SHOW_LOC_DIST;
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	80 93 66 00 	sts	0x0066, r24
			x=0;
    12b2:	10 92 1e 05 	sts	0x051E, r1
		}
		
		//turn off left motor turn off right motor
		motorSwitch(0,0);
    12b6:	60 e0       	ldi	r22, 0x00	; 0
    12b8:	80 e0       	ldi	r24, 0x00	; 0
    12ba:	0e 94 7d 08 	call	0x10fa	; 0x10fa <motorSwitch>
		Lcd4_Write_String(buffer);*/
		
		//turn off left motor turn on right motor
		motorSwitch(0,1);
	}
	else if(direction == STRAIGHT || direction == NO_CHANGE){
    12be:	0f c0       	rjmp	.+30     	; 0x12de <useDirection+0x1ce>
		}
		
		//turn off left motor turn off right motor
		motorSwitch(0,0);
	}
	else if(direction == ERROR){
    12c0:	04 30       	cpi	r16, 0x04	; 4
    12c2:	11 05       	cpc	r17, r1
    12c4:	61 f4       	brne	.+24     	; 0x12de <useDirection+0x1ce>
		printf("--------ERROR-------");
    12c6:	89 e8       	ldi	r24, 0x89	; 137
    12c8:	92 e0       	ldi	r25, 0x02	; 2
    12ca:	9f 93       	push	r25
    12cc:	8f 93       	push	r24
    12ce:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <printf>
		motorSwitch(0,0);
    12d2:	60 e0       	ldi	r22, 0x00	; 0
    12d4:	80 e0       	ldi	r24, 0x00	; 0
    12d6:	0e 94 7d 08 	call	0x10fa	; 0x10fa <motorSwitch>
    12da:	0f 90       	pop	r0
    12dc:	0f 90       	pop	r0
	}
	printf("handled direction\n\n");
    12de:	8e e9       	ldi	r24, 0x9E	; 158
    12e0:	92 e0       	ldi	r25, 0x02	; 2
    12e2:	0e 94 0d 19 	call	0x321a	; 0x321a <puts>
}
    12e6:	61 96       	adiw	r28, 0x11	; 17
    12e8:	0f b6       	in	r0, 0x3f	; 63
    12ea:	f8 94       	cli
    12ec:	de bf       	out	0x3e, r29	; 62
    12ee:	0f be       	out	0x3f, r0	; 63
    12f0:	cd bf       	out	0x3d, r28	; 61
    12f2:	df 91       	pop	r29
    12f4:	cf 91       	pop	r28
    12f6:	1f 91       	pop	r17
    12f8:	0f 91       	pop	r16
    12fa:	08 95       	ret

000012fc <navigation>:

if user should turn left , left motor is vibrated
if user should turn right , right motor is vibrated
                                                                  */
/************************************************************************/
void navigation(int idx){
    12fc:	2f 92       	push	r2
    12fe:	3f 92       	push	r3
    1300:	4f 92       	push	r4
    1302:	5f 92       	push	r5
    1304:	6f 92       	push	r6
    1306:	7f 92       	push	r7
    1308:	8f 92       	push	r8
    130a:	af 92       	push	r10
    130c:	bf 92       	push	r11
    130e:	cf 92       	push	r12
    1310:	df 92       	push	r13
    1312:	ef 92       	push	r14
    1314:	ff 92       	push	r15
    1316:	0f 93       	push	r16
    1318:	1f 93       	push	r17
    131a:	cf 93       	push	r28
    131c:	df 93       	push	r29
    131e:	cd b7       	in	r28, 0x3d	; 61
    1320:	de b7       	in	r29, 0x3e	; 62
    1322:	e7 97       	sbiw	r28, 0x37	; 55
    1324:	0f b6       	in	r0, 0x3f	; 63
    1326:	f8 94       	cli
    1328:	de bf       	out	0x3e, r29	; 62
    132a:	0f be       	out	0x3f, r0	; 63
    132c:	cd bf       	out	0x3d, r28	; 61
	
	printf("\n\nstarting navigation\n");
    132e:	81 eb       	ldi	r24, 0xB1	; 177
    1330:	92 e0       	ldi	r25, 0x02	; 2
    1332:	0e 94 0d 19 	call	0x321a	; 0x321a <puts>
	char b1[17]; char b2[17]; snprintf(b1,sizeof b1,"%lf",curr.lat); snprintf(b2,sizeof b2,"%lf",curr.lon);
    1336:	e3 e2       	ldi	r30, 0x23	; 35
    1338:	f5 e0       	ldi	r31, 0x05	; 5
    133a:	83 81       	ldd	r24, Z+3	; 0x03
    133c:	8f 93       	push	r24
    133e:	82 81       	ldd	r24, Z+2	; 0x02
    1340:	8f 93       	push	r24
    1342:	81 81       	ldd	r24, Z+1	; 0x01
    1344:	8f 93       	push	r24
    1346:	80 81       	ld	r24, Z
    1348:	8f 93       	push	r24
    134a:	0f 2e       	mov	r0, r31
    134c:	f7 ec       	ldi	r31, 0xC7	; 199
    134e:	cf 2e       	mov	r12, r31
    1350:	f2 e0       	ldi	r31, 0x02	; 2
    1352:	df 2e       	mov	r13, r31
    1354:	f0 2d       	mov	r31, r0
    1356:	df 92       	push	r13
    1358:	cf 92       	push	r12
    135a:	1f 92       	push	r1
    135c:	0f 2e       	mov	r0, r31
    135e:	f1 e1       	ldi	r31, 0x11	; 17
    1360:	bf 2e       	mov	r11, r31
    1362:	f0 2d       	mov	r31, r0
    1364:	bf 92       	push	r11
    1366:	8e 01       	movw	r16, r28
    1368:	0f 5f       	subi	r16, 0xFF	; 255
    136a:	1f 4f       	sbci	r17, 0xFF	; 255
    136c:	1f 93       	push	r17
    136e:	0f 93       	push	r16
    1370:	0e 94 3a 19 	call	0x3274	; 0x3274 <snprintf>
    1374:	e7 e2       	ldi	r30, 0x27	; 39
    1376:	f5 e0       	ldi	r31, 0x05	; 5
    1378:	83 81       	ldd	r24, Z+3	; 0x03
    137a:	8f 93       	push	r24
    137c:	82 81       	ldd	r24, Z+2	; 0x02
    137e:	8f 93       	push	r24
    1380:	81 81       	ldd	r24, Z+1	; 0x01
    1382:	8f 93       	push	r24
    1384:	80 81       	ld	r24, Z
    1386:	8f 93       	push	r24
    1388:	df 92       	push	r13
    138a:	cf 92       	push	r12
    138c:	1f 92       	push	r1
    138e:	bf 92       	push	r11
    1390:	7e 01       	movw	r14, r28
    1392:	22 e1       	ldi	r18, 0x12	; 18
    1394:	e2 0e       	add	r14, r18
    1396:	f1 1c       	adc	r15, r1
    1398:	ff 92       	push	r15
    139a:	ef 92       	push	r14
    139c:	0e 94 3a 19 	call	0x3274	; 0x3274 <snprintf>
	printf("\ncurr: %s %s \n",b1,b2);
    13a0:	ff 92       	push	r15
    13a2:	ef 92       	push	r14
    13a4:	1f 93       	push	r17
    13a6:	0f 93       	push	r16
    13a8:	8b ec       	ldi	r24, 0xCB	; 203
    13aa:	92 e0       	ldi	r25, 0x02	; 2
    13ac:	9f 93       	push	r25
    13ae:	8f 93       	push	r24
    13b0:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <printf>
	snprintf(b1,sizeof b1,"%lf",prev.lat); snprintf(b2,sizeof b2,"%lf",prev.lon);
    13b4:	e8 e3       	ldi	r30, 0x38	; 56
    13b6:	f5 e0       	ldi	r31, 0x05	; 5
    13b8:	83 81       	ldd	r24, Z+3	; 0x03
    13ba:	8f 93       	push	r24
    13bc:	82 81       	ldd	r24, Z+2	; 0x02
    13be:	8f 93       	push	r24
    13c0:	81 81       	ldd	r24, Z+1	; 0x01
    13c2:	8f 93       	push	r24
    13c4:	80 81       	ld	r24, Z
    13c6:	8f 93       	push	r24
    13c8:	df 92       	push	r13
    13ca:	cf 92       	push	r12
    13cc:	1f 92       	push	r1
    13ce:	bf 92       	push	r11
    13d0:	1f 93       	push	r17
    13d2:	0f 93       	push	r16
    13d4:	0e 94 3a 19 	call	0x3274	; 0x3274 <snprintf>
    13d8:	0f b6       	in	r0, 0x3f	; 63
    13da:	f8 94       	cli
    13dc:	de bf       	out	0x3e, r29	; 62
    13de:	0f be       	out	0x3f, r0	; 63
    13e0:	cd bf       	out	0x3d, r28	; 61
    13e2:	ec e3       	ldi	r30, 0x3C	; 60
    13e4:	f5 e0       	ldi	r31, 0x05	; 5
    13e6:	83 81       	ldd	r24, Z+3	; 0x03
    13e8:	8f 93       	push	r24
    13ea:	82 81       	ldd	r24, Z+2	; 0x02
    13ec:	8f 93       	push	r24
    13ee:	81 81       	ldd	r24, Z+1	; 0x01
    13f0:	8f 93       	push	r24
    13f2:	80 81       	ld	r24, Z
    13f4:	8f 93       	push	r24
    13f6:	df 92       	push	r13
    13f8:	cf 92       	push	r12
    13fa:	1f 92       	push	r1
    13fc:	bf 92       	push	r11
    13fe:	ff 92       	push	r15
    1400:	ef 92       	push	r14
    1402:	0e 94 3a 19 	call	0x3274	; 0x3274 <snprintf>
	printf("prev: %s %s \n",b1,b2);
    1406:	ff 92       	push	r15
    1408:	ef 92       	push	r14
    140a:	1f 93       	push	r17
    140c:	0f 93       	push	r16
    140e:	8a ed       	ldi	r24, 0xDA	; 218
    1410:	92 e0       	ldi	r25, 0x02	; 2
    1412:	9f 93       	push	r25
    1414:	8f 93       	push	r24
    1416:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <printf>
	printf("waypoint idx: %d \n",wayptidx);
    141a:	80 91 4f 05 	lds	r24, 0x054F
    141e:	8f 93       	push	r24
    1420:	80 91 4e 05 	lds	r24, 0x054E
    1424:	8f 93       	push	r24
    1426:	88 ee       	ldi	r24, 0xE8	; 232
    1428:	92 e0       	ldi	r25, 0x02	; 2
    142a:	9f 93       	push	r25
    142c:	8f 93       	push	r24
    142e:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <printf>
	snprintf(b1,sizeof b1,"%lf",path[wayptidx][0]); snprintf(b2,sizeof b2,"%lf",path[wayptidx][1]);
    1432:	e0 91 4e 05 	lds	r30, 0x054E
    1436:	f0 91 4f 05 	lds	r31, 0x054F
    143a:	ee 0f       	add	r30, r30
    143c:	ff 1f       	adc	r31, r31
    143e:	ee 0f       	add	r30, r30
    1440:	ff 1f       	adc	r31, r31
    1442:	ee 0f       	add	r30, r30
    1444:	ff 1f       	adc	r31, r31
    1446:	e3 50       	subi	r30, 0x03	; 3
    1448:	ff 4f       	sbci	r31, 0xFF	; 255
    144a:	83 81       	ldd	r24, Z+3	; 0x03
    144c:	8f 93       	push	r24
    144e:	82 81       	ldd	r24, Z+2	; 0x02
    1450:	8f 93       	push	r24
    1452:	81 81       	ldd	r24, Z+1	; 0x01
    1454:	8f 93       	push	r24
    1456:	80 81       	ld	r24, Z
    1458:	8f 93       	push	r24
    145a:	df 92       	push	r13
    145c:	cf 92       	push	r12
    145e:	1f 92       	push	r1
    1460:	bf 92       	push	r11
    1462:	1f 93       	push	r17
    1464:	0f 93       	push	r16
    1466:	0e 94 3a 19 	call	0x3274	; 0x3274 <snprintf>
    146a:	a0 91 4e 05 	lds	r26, 0x054E
    146e:	b0 91 4f 05 	lds	r27, 0x054F
    1472:	aa 0f       	add	r26, r26
    1474:	bb 1f       	adc	r27, r27
    1476:	aa 0f       	add	r26, r26
    1478:	bb 1f       	adc	r27, r27
    147a:	aa 0f       	add	r26, r26
    147c:	bb 1f       	adc	r27, r27
    147e:	a3 50       	subi	r26, 0x03	; 3
    1480:	bf 4f       	sbci	r27, 0xFF	; 255
    1482:	fd 01       	movw	r30, r26
    1484:	34 96       	adiw	r30, 0x04	; 4
    1486:	83 81       	ldd	r24, Z+3	; 0x03
    1488:	8f 93       	push	r24
    148a:	82 81       	ldd	r24, Z+2	; 0x02
    148c:	8f 93       	push	r24
    148e:	81 81       	ldd	r24, Z+1	; 0x01
    1490:	8f 93       	push	r24
    1492:	14 96       	adiw	r26, 0x04	; 4
    1494:	8c 91       	ld	r24, X
    1496:	8f 93       	push	r24
    1498:	df 92       	push	r13
    149a:	cf 92       	push	r12
    149c:	1f 92       	push	r1
    149e:	bf 92       	push	r11
    14a0:	ff 92       	push	r15
    14a2:	ef 92       	push	r14
    14a4:	0e 94 3a 19 	call	0x3274	; 0x3274 <snprintf>
	printf("waypoint : %s %s\n",b1,b2);
    14a8:	0f b6       	in	r0, 0x3f	; 63
    14aa:	f8 94       	cli
    14ac:	de bf       	out	0x3e, r29	; 62
    14ae:	0f be       	out	0x3f, r0	; 63
    14b0:	cd bf       	out	0x3d, r28	; 61
    14b2:	ff 92       	push	r15
    14b4:	ef 92       	push	r14
    14b6:	1f 93       	push	r17
    14b8:	0f 93       	push	r16
    14ba:	8b ef       	ldi	r24, 0xFB	; 251
    14bc:	92 e0       	ldi	r25, 0x02	; 2
    14be:	9f 93       	push	r25
    14c0:	8f 93       	push	r24
    14c2:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <printf>
	if(wayptidx<lastidx) {
    14c6:	80 91 4e 05 	lds	r24, 0x054E
    14ca:	90 91 4f 05 	lds	r25, 0x054F
    14ce:	20 90 20 05 	lds	r2, 0x0520
    14d2:	30 90 21 05 	lds	r3, 0x0521
    14d6:	0f 90       	pop	r0
    14d8:	0f 90       	pop	r0
    14da:	0f 90       	pop	r0
    14dc:	0f 90       	pop	r0
    14de:	0f 90       	pop	r0
    14e0:	0f 90       	pop	r0
    14e2:	82 15       	cp	r24, r2
    14e4:	93 05       	cpc	r25, r3
    14e6:	0c f0       	brlt	.+2      	; 0x14ea <navigation+0x1ee>
    14e8:	4d c1       	rjmp	.+666    	; 0x1784 <navigation+0x488>
		
		uint16_t dist = distance(curr.lat,curr.lon,path[wayptidx][0],path[wayptidx][1],'m');
    14ea:	fc 01       	movw	r30, r24
    14ec:	ee 0f       	add	r30, r30
    14ee:	ff 1f       	adc	r31, r31
    14f0:	ee 0f       	add	r30, r30
    14f2:	ff 1f       	adc	r31, r31
    14f4:	ee 0f       	add	r30, r30
    14f6:	ff 1f       	adc	r31, r31
    14f8:	e3 50       	subi	r30, 0x03	; 3
    14fa:	ff 4f       	sbci	r31, 0xFF	; 255
    14fc:	a4 80       	ldd	r10, Z+4	; 0x04
    14fe:	b5 80       	ldd	r11, Z+5	; 0x05
    1500:	c6 80       	ldd	r12, Z+6	; 0x06
    1502:	d7 80       	ldd	r13, Z+7	; 0x07
    1504:	e0 80       	ld	r14, Z
    1506:	f1 80       	ldd	r15, Z+1	; 0x01
    1508:	02 81       	ldd	r16, Z+2	; 0x02
    150a:	13 81       	ldd	r17, Z+3	; 0x03
    150c:	0f 2e       	mov	r0, r31
    150e:	f7 e2       	ldi	r31, 0x27	; 39
    1510:	4f 2e       	mov	r4, r31
    1512:	f5 e0       	ldi	r31, 0x05	; 5
    1514:	5f 2e       	mov	r5, r31
    1516:	f0 2d       	mov	r31, r0
    1518:	f2 01       	movw	r30, r4
    151a:	20 81       	ld	r18, Z
    151c:	31 81       	ldd	r19, Z+1	; 0x01
    151e:	42 81       	ldd	r20, Z+2	; 0x02
    1520:	53 81       	ldd	r21, Z+3	; 0x03
    1522:	0f 2e       	mov	r0, r31
    1524:	f3 e2       	ldi	r31, 0x23	; 35
    1526:	2f 2e       	mov	r2, r31
    1528:	f5 e0       	ldi	r31, 0x05	; 5
    152a:	3f 2e       	mov	r3, r31
    152c:	f0 2d       	mov	r31, r0
    152e:	d1 01       	movw	r26, r2
    1530:	6d 91       	ld	r22, X+
    1532:	7d 91       	ld	r23, X+
    1534:	8d 91       	ld	r24, X+
    1536:	9c 91       	ld	r25, X
    1538:	0f 2e       	mov	r0, r31
    153a:	fd e6       	ldi	r31, 0x6D	; 109
    153c:	8f 2e       	mov	r8, r31
    153e:	f0 2d       	mov	r31, r0
    1540:	0e 94 79 04 	call	0x8f2	; 0x8f2 <distance>
    1544:	3c 01       	movw	r6, r24
		currLoc.distToWp=dist;
    1546:	90 93 2e 05 	sts	0x052E, r25
    154a:	80 93 2d 05 	sts	0x052D, r24
		
		printf("distance to next wp: %d m\n",dist);
    154e:	7f 92       	push	r7
    1550:	8f 93       	push	r24
    1552:	8d e0       	ldi	r24, 0x0D	; 13
    1554:	93 e0       	ldi	r25, 0x03	; 3
    1556:	9f 93       	push	r25
    1558:	8f 93       	push	r24
    155a:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <printf>
		uint16_t tempDist=0;
		
		tempDist = distance(prev.lat,prev.lon,curr.lat,curr.lon,'m');
    155e:	f2 01       	movw	r30, r4
    1560:	a0 80       	ld	r10, Z
    1562:	b1 80       	ldd	r11, Z+1	; 0x01
    1564:	c2 80       	ldd	r12, Z+2	; 0x02
    1566:	d3 80       	ldd	r13, Z+3	; 0x03
    1568:	d1 01       	movw	r26, r2
    156a:	ed 90       	ld	r14, X+
    156c:	fd 90       	ld	r15, X+
    156e:	0d 91       	ld	r16, X+
    1570:	1c 91       	ld	r17, X
    1572:	20 91 3c 05 	lds	r18, 0x053C
    1576:	30 91 3d 05 	lds	r19, 0x053D
    157a:	40 91 3e 05 	lds	r20, 0x053E
    157e:	50 91 3f 05 	lds	r21, 0x053F
    1582:	60 91 38 05 	lds	r22, 0x0538
    1586:	70 91 39 05 	lds	r23, 0x0539
    158a:	80 91 3a 05 	lds	r24, 0x053A
    158e:	90 91 3b 05 	lds	r25, 0x053B
    1592:	0e 94 79 04 	call	0x8f2	; 0x8f2 <distance>
    1596:	2c 01       	movw	r4, r24
		printf("tempdist: %d m\n",tempDist);
    1598:	5f 92       	push	r5
    159a:	8f 93       	push	r24
    159c:	88 e2       	ldi	r24, 0x28	; 40
    159e:	93 e0       	ldi	r25, 0x03	; 3
    15a0:	9f 93       	push	r25
    15a2:	8f 93       	push	r24
    15a4:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <printf>
		if(dist<NEAR_DIST){
    15a8:	0f b6       	in	r0, 0x3f	; 63
    15aa:	f8 94       	cli
    15ac:	de bf       	out	0x3e, r29	; 62
    15ae:	0f be       	out	0x3f, r0	; 63
    15b0:	cd bf       	out	0x3d, r28	; 61
    15b2:	f4 e1       	ldi	r31, 0x14	; 20
    15b4:	6f 16       	cp	r6, r31
    15b6:	71 04       	cpc	r7, r1
    15b8:	08 f0       	brcs	.+2      	; 0x15bc <navigation+0x2c0>
    15ba:	68 c0       	rjmp	.+208    	; 0x168c <navigation+0x390>
			printf("NEAR_DIST\n");
    15bc:	88 e3       	ldi	r24, 0x38	; 56
    15be:	93 e0       	ldi	r25, 0x03	; 3
    15c0:	0e 94 0d 19 	call	0x321a	; 0x321a <puts>
			wayptidx++;
    15c4:	e0 91 4e 05 	lds	r30, 0x054E
    15c8:	f0 91 4f 05 	lds	r31, 0x054F
    15cc:	31 96       	adiw	r30, 0x01	; 1
    15ce:	f0 93 4f 05 	sts	0x054F, r31
    15d2:	e0 93 4e 05 	sts	0x054E, r30
			if(started == 0 ){
    15d6:	80 91 2f 05 	lds	r24, 0x052F
    15da:	81 11       	cpse	r24, r1
    15dc:	4e c0       	rjmp	.+156    	; 0x167a <navigation+0x37e>
				double angle = getAngle(prev.lat,prev.lon,curr.lat,curr.lon,path[wayptidx][0],path[wayptidx][1]);
    15de:	a0 90 27 05 	lds	r10, 0x0527
    15e2:	b0 90 28 05 	lds	r11, 0x0528
    15e6:	c0 90 29 05 	lds	r12, 0x0529
    15ea:	d0 90 2a 05 	lds	r13, 0x052A
    15ee:	e0 90 23 05 	lds	r14, 0x0523
    15f2:	f0 90 24 05 	lds	r15, 0x0524
    15f6:	00 91 25 05 	lds	r16, 0x0525
    15fa:	10 91 26 05 	lds	r17, 0x0526
    15fe:	20 91 3c 05 	lds	r18, 0x053C
    1602:	30 91 3d 05 	lds	r19, 0x053D
    1606:	40 91 3e 05 	lds	r20, 0x053E
    160a:	50 91 3f 05 	lds	r21, 0x053F
    160e:	60 91 38 05 	lds	r22, 0x0538
    1612:	70 91 39 05 	lds	r23, 0x0539
    1616:	80 91 3a 05 	lds	r24, 0x053A
    161a:	90 91 3b 05 	lds	r25, 0x053B
    161e:	ee 0f       	add	r30, r30
    1620:	ff 1f       	adc	r31, r31
    1622:	ee 0f       	add	r30, r30
    1624:	ff 1f       	adc	r31, r31
    1626:	ee 0f       	add	r30, r30
    1628:	ff 1f       	adc	r31, r31
    162a:	e3 50       	subi	r30, 0x03	; 3
    162c:	ff 4f       	sbci	r31, 0xFF	; 255
    162e:	df 01       	movw	r26, r30
    1630:	14 96       	adiw	r26, 0x04	; 4
    1632:	13 96       	adiw	r26, 0x03	; 3
    1634:	7c 90       	ld	r7, X
    1636:	13 97       	sbiw	r26, 0x03	; 3
    1638:	7f 92       	push	r7
    163a:	12 96       	adiw	r26, 0x02	; 2
    163c:	7c 90       	ld	r7, X
    163e:	12 97       	sbiw	r26, 0x02	; 2
    1640:	7f 92       	push	r7
    1642:	11 96       	adiw	r26, 0x01	; 1
    1644:	ac 91       	ld	r26, X
    1646:	af 93       	push	r26
    1648:	a4 81       	ldd	r26, Z+4	; 0x04
    164a:	af 93       	push	r26
    164c:	a3 81       	ldd	r26, Z+3	; 0x03
    164e:	af 93       	push	r26
    1650:	a2 81       	ldd	r26, Z+2	; 0x02
    1652:	af 93       	push	r26
    1654:	a1 81       	ldd	r26, Z+1	; 0x01
    1656:	af 93       	push	r26
    1658:	e0 81       	ld	r30, Z
    165a:	ef 93       	push	r30
    165c:	0e 94 74 03 	call	0x6e8	; 0x6e8 <getAngle>
    1660:	0f b6       	in	r0, 0x3f	; 63
    1662:	f8 94       	cli
    1664:	de bf       	out	0x3e, r29	; 62
    1666:	0f be       	out	0x3f, r0	; 63
    1668:	cd bf       	out	0x3d, r28	; 61
				direction = getTurn(angle);
    166a:	0e 94 41 04 	call	0x882	; 0x882 <getTurn>
    166e:	80 93 30 05 	sts	0x0530, r24
				useDirection(direction);
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	0e 94 88 08 	call	0x1110	; 0x1110 <useDirection>
    1678:	04 c0       	rjmp	.+8      	; 0x1682 <navigation+0x386>

			}else
			{
				useDirection(STRAIGHT);
    167a:	80 e0       	ldi	r24, 0x00	; 0
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	0e 94 88 08 	call	0x1110	; 0x1110 <useDirection>
				//showLatLonInLCD();
			}
			//turn off both Motor
			motorSwitch(0,0);
    1682:	60 e0       	ldi	r22, 0x00	; 0
    1684:	80 e0       	ldi	r24, 0x00	; 0
    1686:	0e 94 7d 08 	call	0x10fa	; 0x10fa <motorSwitch>
    168a:	65 c0       	rjmp	.+202    	; 0x1756 <navigation+0x45a>
		}
		else if(dist<INIT_DIST){
    168c:	39 e1       	ldi	r19, 0x19	; 25
    168e:	63 16       	cp	r6, r19
    1690:	71 04       	cpc	r7, r1
    1692:	08 f0       	brcs	.+2      	; 0x1696 <navigation+0x39a>
    1694:	54 c0       	rjmp	.+168    	; 0x173e <navigation+0x442>
			printf("INIT_DIST\n");
    1696:	82 e4       	ldi	r24, 0x42	; 66
    1698:	93 e0       	ldi	r25, 0x03	; 3
    169a:	0e 94 0d 19 	call	0x321a	; 0x321a <puts>

			double angle = getAngle(prev.lat,prev.lon,curr.lat,curr.lon,path[wayptidx][0],path[wayptidx][1]);
    169e:	e0 91 4e 05 	lds	r30, 0x054E
    16a2:	f0 91 4f 05 	lds	r31, 0x054F
    16a6:	a0 90 27 05 	lds	r10, 0x0527
    16aa:	b0 90 28 05 	lds	r11, 0x0528
    16ae:	c0 90 29 05 	lds	r12, 0x0529
    16b2:	d0 90 2a 05 	lds	r13, 0x052A
    16b6:	e0 90 23 05 	lds	r14, 0x0523
    16ba:	f0 90 24 05 	lds	r15, 0x0524
    16be:	00 91 25 05 	lds	r16, 0x0525
    16c2:	10 91 26 05 	lds	r17, 0x0526
    16c6:	20 91 3c 05 	lds	r18, 0x053C
    16ca:	30 91 3d 05 	lds	r19, 0x053D
    16ce:	40 91 3e 05 	lds	r20, 0x053E
    16d2:	50 91 3f 05 	lds	r21, 0x053F
    16d6:	60 91 38 05 	lds	r22, 0x0538
    16da:	70 91 39 05 	lds	r23, 0x0539
    16de:	80 91 3a 05 	lds	r24, 0x053A
    16e2:	90 91 3b 05 	lds	r25, 0x053B
    16e6:	ee 0f       	add	r30, r30
    16e8:	ff 1f       	adc	r31, r31
    16ea:	ee 0f       	add	r30, r30
    16ec:	ff 1f       	adc	r31, r31
    16ee:	ee 0f       	add	r30, r30
    16f0:	ff 1f       	adc	r31, r31
    16f2:	e3 50       	subi	r30, 0x03	; 3
    16f4:	ff 4f       	sbci	r31, 0xFF	; 255
    16f6:	df 01       	movw	r26, r30
    16f8:	14 96       	adiw	r26, 0x04	; 4
    16fa:	13 96       	adiw	r26, 0x03	; 3
    16fc:	7c 90       	ld	r7, X
    16fe:	13 97       	sbiw	r26, 0x03	; 3
    1700:	7f 92       	push	r7
    1702:	12 96       	adiw	r26, 0x02	; 2
    1704:	7c 90       	ld	r7, X
    1706:	12 97       	sbiw	r26, 0x02	; 2
    1708:	7f 92       	push	r7
    170a:	11 96       	adiw	r26, 0x01	; 1
    170c:	ac 91       	ld	r26, X
    170e:	af 93       	push	r26
    1710:	a4 81       	ldd	r26, Z+4	; 0x04
    1712:	af 93       	push	r26
    1714:	a3 81       	ldd	r26, Z+3	; 0x03
    1716:	af 93       	push	r26
    1718:	a2 81       	ldd	r26, Z+2	; 0x02
    171a:	af 93       	push	r26
    171c:	a1 81       	ldd	r26, Z+1	; 0x01
    171e:	af 93       	push	r26
    1720:	e0 81       	ld	r30, Z
    1722:	ef 93       	push	r30
    1724:	0e 94 74 03 	call	0x6e8	; 0x6e8 <getAngle>
    1728:	0f b6       	in	r0, 0x3f	; 63
    172a:	f8 94       	cli
    172c:	de bf       	out	0x3e, r29	; 62
    172e:	0f be       	out	0x3f, r0	; 63
    1730:	cd bf       	out	0x3d, r28	; 61
			char direction = getTurn(angle);
    1732:	0e 94 41 04 	call	0x882	; 0x882 <getTurn>
			useDirection(direction);
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	0e 94 88 08 	call	0x1110	; 0x1110 <useDirection>
    173c:	0c c0       	rjmp	.+24     	; 0x1756 <navigation+0x45a>
		}
		else{
			printf("More than 25 meter");
    173e:	8c e4       	ldi	r24, 0x4C	; 76
    1740:	93 e0       	ldi	r25, 0x03	; 3
    1742:	9f 93       	push	r25
    1744:	8f 93       	push	r24
    1746:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <printf>
			useDirection(STRAIGHT);
    174a:	80 e0       	ldi	r24, 0x00	; 0
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	0e 94 88 08 	call	0x1110	; 0x1110 <useDirection>
    1752:	0f 90       	pop	r0
    1754:	0f 90       	pop	r0
		}
		totalDist+=tempDist;
    1756:	80 91 32 05 	lds	r24, 0x0532
    175a:	90 91 33 05 	lds	r25, 0x0533
    175e:	48 0e       	add	r4, r24
    1760:	59 1e       	adc	r5, r25
    1762:	50 92 33 05 	sts	0x0533, r5
    1766:	40 92 32 05 	sts	0x0532, r4
		printf("distance covered till now : %d m\n",totalDist);
    176a:	5f 92       	push	r5
    176c:	4f 92       	push	r4
    176e:	8f e5       	ldi	r24, 0x5F	; 95
    1770:	93 e0       	ldi	r25, 0x03	; 3
    1772:	9f 93       	push	r25
    1774:	8f 93       	push	r24
    1776:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <printf>
    177a:	0f 90       	pop	r0
    177c:	0f 90       	pop	r0
    177e:	0f 90       	pop	r0
    1780:	0f 90       	pop	r0
    1782:	b1 c0       	rjmp	.+354    	; 0x18e6 <navigation+0x5ea>

	}
	else{//if destination reached
		uint16_t tempDist = distance(prev.lat,prev.lon,curr.lat,curr.lon,'m');
    1784:	40 90 27 05 	lds	r4, 0x0527
    1788:	50 90 28 05 	lds	r5, 0x0528
    178c:	60 90 29 05 	lds	r6, 0x0529
    1790:	70 90 2a 05 	lds	r7, 0x052A
    1794:	80 91 23 05 	lds	r24, 0x0523
    1798:	90 91 24 05 	lds	r25, 0x0524
    179c:	a0 91 25 05 	lds	r26, 0x0525
    17a0:	b0 91 26 05 	lds	r27, 0x0526
    17a4:	8c ab       	std	Y+52, r24	; 0x34
    17a6:	9d ab       	std	Y+53, r25	; 0x35
    17a8:	ae ab       	std	Y+54, r26	; 0x36
    17aa:	bf ab       	std	Y+55, r27	; 0x37
    17ac:	20 91 3c 05 	lds	r18, 0x053C
    17b0:	30 91 3d 05 	lds	r19, 0x053D
    17b4:	40 91 3e 05 	lds	r20, 0x053E
    17b8:	50 91 3f 05 	lds	r21, 0x053F
    17bc:	60 91 38 05 	lds	r22, 0x0538
    17c0:	70 91 39 05 	lds	r23, 0x0539
    17c4:	80 91 3a 05 	lds	r24, 0x053A
    17c8:	90 91 3b 05 	lds	r25, 0x053B
    17cc:	0f 2e       	mov	r0, r31
    17ce:	fd e6       	ldi	r31, 0x6D	; 109
    17d0:	8f 2e       	mov	r8, r31
    17d2:	f0 2d       	mov	r31, r0
    17d4:	63 01       	movw	r12, r6
    17d6:	52 01       	movw	r10, r4
    17d8:	ec a8       	ldd	r14, Y+52	; 0x34
    17da:	fd a8       	ldd	r15, Y+53	; 0x35
    17dc:	0e a9       	ldd	r16, Y+54	; 0x36
    17de:	1f a9       	ldd	r17, Y+55	; 0x37
    17e0:	0e 94 79 04 	call	0x8f2	; 0x8f2 <distance>
		if(currLoc.distToWp - tempDist > 5)
    17e4:	20 91 2d 05 	lds	r18, 0x052D
    17e8:	30 91 2e 05 	lds	r19, 0x052E
    17ec:	28 1b       	sub	r18, r24
    17ee:	39 0b       	sbc	r19, r25
    17f0:	26 30       	cpi	r18, 0x06	; 6
    17f2:	31 05       	cpc	r19, r1
    17f4:	f0 f0       	brcs	.+60     	; 0x1832 <navigation+0x536>
			 currLoc.distToWp = distance(curr.lat,curr.lon,path[lastidx-1][0],path[lastidx-1][1],'m');
    17f6:	f1 01       	movw	r30, r2
    17f8:	ee 0f       	add	r30, r30
    17fa:	ff 1f       	adc	r31, r31
    17fc:	ee 0f       	add	r30, r30
    17fe:	ff 1f       	adc	r31, r31
    1800:	ee 0f       	add	r30, r30
    1802:	ff 1f       	adc	r31, r31
    1804:	eb 50       	subi	r30, 0x0B	; 11
    1806:	ff 4f       	sbci	r31, 0xFF	; 255
    1808:	a4 80       	ldd	r10, Z+4	; 0x04
    180a:	b5 80       	ldd	r11, Z+5	; 0x05
    180c:	c6 80       	ldd	r12, Z+6	; 0x06
    180e:	d7 80       	ldd	r13, Z+7	; 0x07
    1810:	e0 80       	ld	r14, Z
    1812:	f1 80       	ldd	r15, Z+1	; 0x01
    1814:	02 81       	ldd	r16, Z+2	; 0x02
    1816:	13 81       	ldd	r17, Z+3	; 0x03
    1818:	a3 01       	movw	r20, r6
    181a:	92 01       	movw	r18, r4
    181c:	6c a9       	ldd	r22, Y+52	; 0x34
    181e:	7d a9       	ldd	r23, Y+53	; 0x35
    1820:	8e a9       	ldd	r24, Y+54	; 0x36
    1822:	9f a9       	ldd	r25, Y+55	; 0x37
    1824:	0e 94 79 04 	call	0x8f2	; 0x8f2 <distance>
    1828:	90 93 2e 05 	sts	0x052E, r25
    182c:	80 93 2d 05 	sts	0x052D, r24
    1830:	5a c0       	rjmp	.+180    	; 0x18e6 <navigation+0x5ea>
		else{
			printf("\n***RUN COMPLETE***\n\n");
    1832:	81 e8       	ldi	r24, 0x81	; 129
    1834:	93 e0       	ldi	r25, 0x03	; 3
    1836:	0e 94 0d 19 	call	0x321a	; 0x321a <puts>
			completed = 1;
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	80 93 22 05 	sts	0x0522, r24
			lcd_state = DONT_CHANGE;
    1840:	83 e0       	ldi	r24, 0x03	; 3
    1842:	80 93 66 00 	sts	0x0066, r24
		
			Lcd4_Clear();
    1846:	0e 94 ca 02 	call	0x594	; 0x594 <Lcd4_Clear>
			Lcd4_Set_Cursor(1,0);
    184a:	60 e0       	ldi	r22, 0x00	; 0
    184c:	81 e0       	ldi	r24, 0x01	; 1
    184e:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <Lcd4_Set_Cursor>
			Lcd4_Write_String("RUN COMPLETE");
    1852:	86 e9       	ldi	r24, 0x96	; 150
    1854:	93 e0       	ldi	r25, 0x03	; 3
    1856:	0e 94 65 03 	call	0x6ca	; 0x6ca <Lcd4_Write_String>
			char buffer[17];
			snprintf(buffer, sizeof buffer, "Total %dm", totalDist);
    185a:	80 91 33 05 	lds	r24, 0x0533
    185e:	8f 93       	push	r24
    1860:	80 91 32 05 	lds	r24, 0x0532
    1864:	8f 93       	push	r24
    1866:	83 ea       	ldi	r24, 0xA3	; 163
    1868:	93 e0       	ldi	r25, 0x03	; 3
    186a:	9f 93       	push	r25
    186c:	8f 93       	push	r24
    186e:	1f 92       	push	r1
    1870:	81 e1       	ldi	r24, 0x11	; 17
    1872:	8f 93       	push	r24
    1874:	8e 01       	movw	r16, r28
    1876:	0d 5d       	subi	r16, 0xDD	; 221
    1878:	1f 4f       	sbci	r17, 0xFF	; 255
    187a:	1f 93       	push	r17
    187c:	0f 93       	push	r16
    187e:	0e 94 3a 19 	call	0x3274	; 0x3274 <snprintf>
			Lcd4_Set_Cursor(2,0);
    1882:	60 e0       	ldi	r22, 0x00	; 0
    1884:	82 e0       	ldi	r24, 0x02	; 2
    1886:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <Lcd4_Set_Cursor>
			Lcd4_Write_String(buffer);
    188a:	c8 01       	movw	r24, r16
    188c:	0e 94 65 03 	call	0x6ca	; 0x6ca <Lcd4_Write_String>
		
			//turn off left motor turn off right motor
			motorSwitch(1,1);
    1890:	61 e0       	ldi	r22, 0x01	; 1
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	0e 94 7d 08 	call	0x10fa	; 0x10fa <motorSwitch>
    1898:	9f e3       	ldi	r25, 0x3F	; 63
    189a:	ad e0       	ldi	r26, 0x0D	; 13
    189c:	b3 e0       	ldi	r27, 0x03	; 3
    189e:	91 50       	subi	r25, 0x01	; 1
    18a0:	a0 40       	sbci	r26, 0x00	; 0
    18a2:	b0 40       	sbci	r27, 0x00	; 0
    18a4:	e1 f7       	brne	.-8      	; 0x189e <navigation+0x5a2>
    18a6:	00 c0       	rjmp	.+0      	; 0x18a8 <navigation+0x5ac>
    18a8:	00 00       	nop
			_delay_ms(1000);
			motorSwitch(0,0);
    18aa:	60 e0       	ldi	r22, 0x00	; 0
    18ac:	80 e0       	ldi	r24, 0x00	; 0
    18ae:	0e 94 7d 08 	call	0x10fa	; 0x10fa <motorSwitch>
			printf("total distance %d\n",totalDist);
    18b2:	80 91 33 05 	lds	r24, 0x0533
    18b6:	8f 93       	push	r24
    18b8:	80 91 32 05 	lds	r24, 0x0532
    18bc:	8f 93       	push	r24
    18be:	8d ea       	ldi	r24, 0xAD	; 173
    18c0:	93 e0       	ldi	r25, 0x03	; 3
    18c2:	9f 93       	push	r25
    18c4:	8f 93       	push	r24
    18c6:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <printf>
    18ca:	ef e7       	ldi	r30, 0x7F	; 127
    18cc:	fa e1       	ldi	r31, 0x1A	; 26
    18ce:	26 e0       	ldi	r18, 0x06	; 6
    18d0:	e1 50       	subi	r30, 0x01	; 1
    18d2:	f0 40       	sbci	r31, 0x00	; 0
    18d4:	20 40       	sbci	r18, 0x00	; 0
    18d6:	e1 f7       	brne	.-8      	; 0x18d0 <navigation+0x5d4>
    18d8:	00 c0       	rjmp	.+0      	; 0x18da <navigation+0x5de>
    18da:	00 00       	nop
    18dc:	0f b6       	in	r0, 0x3f	; 63
    18de:	f8 94       	cli
    18e0:	de bf       	out	0x3e, r29	; 62
    18e2:	0f be       	out	0x3f, r0	; 63
    18e4:	cd bf       	out	0x3d, r28	; 61
			_delay_ms(2000);
		}
		
	}
	started=1;
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	80 93 2f 05 	sts	0x052F, r24
	snprintf(b1,sizeof b1,"%lf",path[wayptidx][0]); snprintf(b2,sizeof b2,"%lf",path[wayptidx][1]);
    18ec:	e0 91 4e 05 	lds	r30, 0x054E
    18f0:	f0 91 4f 05 	lds	r31, 0x054F
    18f4:	ee 0f       	add	r30, r30
    18f6:	ff 1f       	adc	r31, r31
    18f8:	ee 0f       	add	r30, r30
    18fa:	ff 1f       	adc	r31, r31
    18fc:	ee 0f       	add	r30, r30
    18fe:	ff 1f       	adc	r31, r31
    1900:	e3 50       	subi	r30, 0x03	; 3
    1902:	ff 4f       	sbci	r31, 0xFF	; 255
    1904:	83 81       	ldd	r24, Z+3	; 0x03
    1906:	8f 93       	push	r24
    1908:	82 81       	ldd	r24, Z+2	; 0x02
    190a:	8f 93       	push	r24
    190c:	81 81       	ldd	r24, Z+1	; 0x01
    190e:	8f 93       	push	r24
    1910:	80 81       	ld	r24, Z
    1912:	8f 93       	push	r24
    1914:	0f 2e       	mov	r0, r31
    1916:	f7 ec       	ldi	r31, 0xC7	; 199
    1918:	ef 2e       	mov	r14, r31
    191a:	f2 e0       	ldi	r31, 0x02	; 2
    191c:	ff 2e       	mov	r15, r31
    191e:	f0 2d       	mov	r31, r0
    1920:	ff 92       	push	r15
    1922:	ef 92       	push	r14
    1924:	1f 92       	push	r1
    1926:	0f 2e       	mov	r0, r31
    1928:	f1 e1       	ldi	r31, 0x11	; 17
    192a:	df 2e       	mov	r13, r31
    192c:	f0 2d       	mov	r31, r0
    192e:	df 92       	push	r13
    1930:	8e 01       	movw	r16, r28
    1932:	0f 5f       	subi	r16, 0xFF	; 255
    1934:	1f 4f       	sbci	r17, 0xFF	; 255
    1936:	1f 93       	push	r17
    1938:	0f 93       	push	r16
    193a:	0e 94 3a 19 	call	0x3274	; 0x3274 <snprintf>
    193e:	a0 91 4e 05 	lds	r26, 0x054E
    1942:	b0 91 4f 05 	lds	r27, 0x054F
    1946:	aa 0f       	add	r26, r26
    1948:	bb 1f       	adc	r27, r27
    194a:	aa 0f       	add	r26, r26
    194c:	bb 1f       	adc	r27, r27
    194e:	aa 0f       	add	r26, r26
    1950:	bb 1f       	adc	r27, r27
    1952:	a3 50       	subi	r26, 0x03	; 3
    1954:	bf 4f       	sbci	r27, 0xFF	; 255
    1956:	fd 01       	movw	r30, r26
    1958:	34 96       	adiw	r30, 0x04	; 4
    195a:	83 81       	ldd	r24, Z+3	; 0x03
    195c:	8f 93       	push	r24
    195e:	82 81       	ldd	r24, Z+2	; 0x02
    1960:	8f 93       	push	r24
    1962:	81 81       	ldd	r24, Z+1	; 0x01
    1964:	8f 93       	push	r24
    1966:	14 96       	adiw	r26, 0x04	; 4
    1968:	8c 91       	ld	r24, X
    196a:	8f 93       	push	r24
    196c:	ff 92       	push	r15
    196e:	ef 92       	push	r14
    1970:	1f 92       	push	r1
    1972:	df 92       	push	r13
    1974:	7e 01       	movw	r14, r28
    1976:	92 e1       	ldi	r25, 0x12	; 18
    1978:	e9 0e       	add	r14, r25
    197a:	f1 1c       	adc	r15, r1
    197c:	ff 92       	push	r15
    197e:	ef 92       	push	r14
    1980:	0e 94 3a 19 	call	0x3274	; 0x3274 <snprintf>
	printf("next waypoint    : %s %s\n",b1,b2);
    1984:	ff 92       	push	r15
    1986:	ef 92       	push	r14
    1988:	1f 93       	push	r17
    198a:	0f 93       	push	r16
    198c:	80 ec       	ldi	r24, 0xC0	; 192
    198e:	93 e0       	ldi	r25, 0x03	; 3
    1990:	9f 93       	push	r25
    1992:	8f 93       	push	r24
    1994:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <printf>
	printf("\nending navigation\n");
    1998:	8a ed       	ldi	r24, 0xDA	; 218
    199a:	93 e0       	ldi	r25, 0x03	; 3
    199c:	0e 94 0d 19 	call	0x321a	; 0x321a <puts>
    19a0:	0f b6       	in	r0, 0x3f	; 63
    19a2:	f8 94       	cli
    19a4:	de bf       	out	0x3e, r29	; 62
    19a6:	0f be       	out	0x3f, r0	; 63
    19a8:	cd bf       	out	0x3d, r28	; 61
}
    19aa:	e7 96       	adiw	r28, 0x37	; 55
    19ac:	0f b6       	in	r0, 0x3f	; 63
    19ae:	f8 94       	cli
    19b0:	de bf       	out	0x3e, r29	; 62
    19b2:	0f be       	out	0x3f, r0	; 63
    19b4:	cd bf       	out	0x3d, r28	; 61
    19b6:	df 91       	pop	r29
    19b8:	cf 91       	pop	r28
    19ba:	1f 91       	pop	r17
    19bc:	0f 91       	pop	r16
    19be:	ff 90       	pop	r15
    19c0:	ef 90       	pop	r14
    19c2:	df 90       	pop	r13
    19c4:	cf 90       	pop	r12
    19c6:	bf 90       	pop	r11
    19c8:	af 90       	pop	r10
    19ca:	8f 90       	pop	r8
    19cc:	7f 90       	pop	r7
    19ce:	6f 90       	pop	r6
    19d0:	5f 90       	pop	r5
    19d2:	4f 90       	pop	r4
    19d4:	3f 90       	pop	r3
    19d6:	2f 90       	pop	r2
    19d8:	08 95       	ret

000019da <getData>:
checks the string's validity.
if valid start navigation
else keep fetching data                                                                  */
/************************************************************************/

void getData(){
    19da:	6f 92       	push	r6
    19dc:	7f 92       	push	r7
    19de:	8f 92       	push	r8
    19e0:	9f 92       	push	r9
    19e2:	af 92       	push	r10
    19e4:	bf 92       	push	r11
    19e6:	cf 92       	push	r12
    19e8:	df 92       	push	r13
    19ea:	ef 92       	push	r14
    19ec:	ff 92       	push	r15
    19ee:	0f 93       	push	r16
    19f0:	1f 93       	push	r17
    19f2:	cf 93       	push	r28
    19f4:	df 93       	push	r29
    19f6:	cd b7       	in	r28, 0x3d	; 61
    19f8:	de b7       	in	r29, 0x3e	; 62
    19fa:	64 97       	sbiw	r28, 0x14	; 20
    19fc:	0f b6       	in	r0, 0x3f	; 63
    19fe:	f8 94       	cli
    1a00:	de bf       	out	0x3e, r29	; 62
    1a02:	0f be       	out	0x3f, r0	; 63
    1a04:	cd bf       	out	0x3d, r28	; 61
	printf("\n\n\nget Data\n");
    1a06:	8d ee       	ldi	r24, 0xED	; 237
    1a08:	93 e0       	ldi	r25, 0x03	; 3
    1a0a:	0e 94 0d 19 	call	0x321a	; 0x321a <puts>
	if(button_state == STARTED && completed == 0){
    1a0e:	80 91 1d 05 	lds	r24, 0x051D
    1a12:	81 30       	cpi	r24, 0x01	; 1
    1a14:	09 f0       	breq	.+2      	; 0x1a18 <getData+0x3e>
    1a16:	8e c0       	rjmp	.+284    	; 0x1b34 <getData+0x15a>
    1a18:	80 91 22 05 	lds	r24, 0x0522
    1a1c:	81 11       	cpse	r24, r1
    1a1e:	8a c0       	rjmp	.+276    	; 0x1b34 <getData+0x15a>
				if(res==false)
				printf("invalid data\n");
				else{
					char buff1[10];
					char buff2[10];
					snprintf(buff1,sizeof(buff1),"%f", curr.lat);
    1a20:	0f 2e       	mov	r0, r31
    1a22:	f8 e7       	ldi	r31, 0x78	; 120
    1a24:	af 2e       	mov	r10, r31
    1a26:	f4 e0       	ldi	r31, 0x04	; 4
    1a28:	bf 2e       	mov	r11, r31
    1a2a:	f0 2d       	mov	r31, r0
    1a2c:	0f 2e       	mov	r0, r31
    1a2e:	fa e0       	ldi	r31, 0x0A	; 10
    1a30:	7f 2e       	mov	r7, r31
    1a32:	f0 2d       	mov	r31, r0
    1a34:	6e 01       	movw	r12, r28
    1a36:	8b e0       	ldi	r24, 0x0B	; 11
    1a38:	c8 0e       	add	r12, r24
    1a3a:	d1 1c       	adc	r13, r1
					snprintf(buff2,sizeof(buff2),"%f", curr.lon);
    1a3c:	0f 2e       	mov	r0, r31
    1a3e:	f7 e2       	ldi	r31, 0x27	; 39
    1a40:	ef 2e       	mov	r14, r31
    1a42:	f5 e0       	ldi	r31, 0x05	; 5
    1a44:	ff 2e       	mov	r15, r31
    1a46:	f0 2d       	mov	r31, r0
    1a48:	8e 01       	movw	r16, r28
    1a4a:	0f 5f       	subi	r16, 0xFF	; 255
    1a4c:	1f 4f       	sbci	r17, 0xFF	; 255
					printf("---------valid lat: %s lon: %s--------\n",buff1,buff2);
    1a4e:	0f 2e       	mov	r0, r31
    1a50:	f6 e0       	ldi	r31, 0x06	; 6
    1a52:	8f 2e       	mov	r8, r31
    1a54:	f4 e0       	ldi	r31, 0x04	; 4
    1a56:	9f 2e       	mov	r9, r31
    1a58:	f0 2d       	mov	r31, r0
					//printf("lat %d lon %d \n",curr.lat,curr.lon);
					
					if(firstData==1)
						navigation();
					firstData=1;
    1a5a:	66 24       	eor	r6, r6
    1a5c:	63 94       	inc	r6

void getData(){
	printf("\n\n\nget Data\n");
	if(button_state == STARTED && completed == 0){
		while(1){
			char value = usart_getch();
    1a5e:	0e 94 02 07 	call	0xe04	; 0xe04 <usart_getch>
			
			if(value == '$')
    1a62:	84 32       	cpi	r24, 0x24	; 36
    1a64:	09 f0       	breq	.+2      	; 0x1a68 <getData+0x8e>
    1a66:	57 c0       	rjmp	.+174    	; 0x1b16 <getData+0x13c>
			{
				str[cursor]=0;
    1a68:	e0 91 34 05 	lds	r30, 0x0534
    1a6c:	f0 91 35 05 	lds	r31, 0x0535
    1a70:	e9 59       	subi	r30, 0x99	; 153
    1a72:	ff 4f       	sbci	r31, 0xFF	; 255
    1a74:	10 82       	st	Z, r1
				printf("%s\n",str);
    1a76:	87 e6       	ldi	r24, 0x67	; 103
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	0e 94 0d 19 	call	0x321a	; 0x321a <puts>
				
				int res = getCurrlocation(str, &curr, &prev);
    1a7e:	48 e3       	ldi	r20, 0x38	; 56
    1a80:	55 e0       	ldi	r21, 0x05	; 5
    1a82:	63 e2       	ldi	r22, 0x23	; 35
    1a84:	75 e0       	ldi	r23, 0x05	; 5
    1a86:	87 e6       	ldi	r24, 0x67	; 103
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	0e 94 21 06 	call	0xc42	; 0xc42 <getCurrlocation>
				if(res==false)
    1a8e:	89 2b       	or	r24, r25
    1a90:	29 f4       	brne	.+10     	; 0x1a9c <getData+0xc2>
				printf("invalid data\n");
    1a92:	89 ef       	ldi	r24, 0xF9	; 249
    1a94:	93 e0       	ldi	r25, 0x03	; 3
    1a96:	0e 94 0d 19 	call	0x321a	; 0x321a <puts>
    1a9a:	38 c0       	rjmp	.+112    	; 0x1b0c <getData+0x132>
				else{
					char buff1[10];
					char buff2[10];
					snprintf(buff1,sizeof(buff1),"%f", curr.lat);
    1a9c:	e3 e2       	ldi	r30, 0x23	; 35
    1a9e:	f5 e0       	ldi	r31, 0x05	; 5
    1aa0:	83 81       	ldd	r24, Z+3	; 0x03
    1aa2:	8f 93       	push	r24
    1aa4:	82 81       	ldd	r24, Z+2	; 0x02
    1aa6:	8f 93       	push	r24
    1aa8:	81 81       	ldd	r24, Z+1	; 0x01
    1aaa:	8f 93       	push	r24
    1aac:	80 81       	ld	r24, Z
    1aae:	8f 93       	push	r24
    1ab0:	bf 92       	push	r11
    1ab2:	af 92       	push	r10
    1ab4:	1f 92       	push	r1
    1ab6:	7f 92       	push	r7
    1ab8:	df 92       	push	r13
    1aba:	cf 92       	push	r12
    1abc:	0e 94 3a 19 	call	0x3274	; 0x3274 <snprintf>
					snprintf(buff2,sizeof(buff2),"%f", curr.lon);
    1ac0:	f7 01       	movw	r30, r14
    1ac2:	83 81       	ldd	r24, Z+3	; 0x03
    1ac4:	8f 93       	push	r24
    1ac6:	82 81       	ldd	r24, Z+2	; 0x02
    1ac8:	8f 93       	push	r24
    1aca:	81 81       	ldd	r24, Z+1	; 0x01
    1acc:	8f 93       	push	r24
    1ace:	80 81       	ld	r24, Z
    1ad0:	8f 93       	push	r24
    1ad2:	bf 92       	push	r11
    1ad4:	af 92       	push	r10
    1ad6:	1f 92       	push	r1
    1ad8:	7f 92       	push	r7
    1ada:	1f 93       	push	r17
    1adc:	0f 93       	push	r16
    1ade:	0e 94 3a 19 	call	0x3274	; 0x3274 <snprintf>
					printf("---------valid lat: %s lon: %s--------\n",buff1,buff2);
    1ae2:	1f 93       	push	r17
    1ae4:	0f 93       	push	r16
    1ae6:	df 92       	push	r13
    1ae8:	cf 92       	push	r12
    1aea:	9f 92       	push	r9
    1aec:	8f 92       	push	r8
    1aee:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <printf>
					//printf("lat %d lon %d \n",curr.lat,curr.lon);
					
					if(firstData==1)
    1af2:	0f b6       	in	r0, 0x3f	; 63
    1af4:	f8 94       	cli
    1af6:	de bf       	out	0x3e, r29	; 62
    1af8:	0f be       	out	0x3f, r0	; 63
    1afa:	cd bf       	out	0x3d, r28	; 61
    1afc:	80 91 1f 05 	lds	r24, 0x051F
    1b00:	81 30       	cpi	r24, 0x01	; 1
    1b02:	11 f4       	brne	.+4      	; 0x1b08 <getData+0x12e>
						navigation();
    1b04:	0e 94 7e 09 	call	0x12fc	; 0x12fc <navigation>
					firstData=1;
    1b08:	60 92 1f 05 	sts	0x051F, r6
				}
				cursor=0;
    1b0c:	10 92 35 05 	sts	0x0535, r1
    1b10:	10 92 34 05 	sts	0x0534, r1
    1b14:	a4 cf       	rjmp	.-184    	; 0x1a5e <getData+0x84>
			}
			else
			{
				str[cursor] = value;
    1b16:	20 91 34 05 	lds	r18, 0x0534
    1b1a:	30 91 35 05 	lds	r19, 0x0535
    1b1e:	f9 01       	movw	r30, r18
    1b20:	e9 59       	subi	r30, 0x99	; 153
    1b22:	ff 4f       	sbci	r31, 0xFF	; 255
    1b24:	80 83       	st	Z, r24
				cursor++;
    1b26:	2f 5f       	subi	r18, 0xFF	; 255
    1b28:	3f 4f       	sbci	r19, 0xFF	; 255
    1b2a:	30 93 35 05 	sts	0x0535, r19
    1b2e:	20 93 34 05 	sts	0x0534, r18
    1b32:	95 cf       	rjmp	.-214    	; 0x1a5e <getData+0x84>
			}
			//printf("%c)",value);
		}
	}
}
    1b34:	64 96       	adiw	r28, 0x14	; 20
    1b36:	0f b6       	in	r0, 0x3f	; 63
    1b38:	f8 94       	cli
    1b3a:	de bf       	out	0x3e, r29	; 62
    1b3c:	0f be       	out	0x3f, r0	; 63
    1b3e:	cd bf       	out	0x3d, r28	; 61
    1b40:	df 91       	pop	r29
    1b42:	cf 91       	pop	r28
    1b44:	1f 91       	pop	r17
    1b46:	0f 91       	pop	r16
    1b48:	ff 90       	pop	r15
    1b4a:	ef 90       	pop	r14
    1b4c:	df 90       	pop	r13
    1b4e:	cf 90       	pop	r12
    1b50:	bf 90       	pop	r11
    1b52:	af 90       	pop	r10
    1b54:	9f 90       	pop	r9
    1b56:	8f 90       	pop	r8
    1b58:	7f 90       	pop	r7
    1b5a:	6f 90       	pop	r6
    1b5c:	08 95       	ret

00001b5e <__vector_7>:
}

// this ISR is fired whenever a match occurs
// triggers getting data from GPS and navigation
ISR (TIMER1_COMPA_vect)
{
    1b5e:	1f 92       	push	r1
    1b60:	0f 92       	push	r0
    1b62:	0f b6       	in	r0, 0x3f	; 63
    1b64:	0f 92       	push	r0
    1b66:	11 24       	eor	r1, r1
    1b68:	2f 93       	push	r18
    1b6a:	3f 93       	push	r19
    1b6c:	4f 93       	push	r20
    1b6e:	5f 93       	push	r21
    1b70:	6f 93       	push	r22
    1b72:	7f 93       	push	r23
    1b74:	8f 93       	push	r24
    1b76:	9f 93       	push	r25
    1b78:	af 93       	push	r26
    1b7a:	bf 93       	push	r27
    1b7c:	ef 93       	push	r30
    1b7e:	ff 93       	push	r31
	//PORTB = ~PORTB;
	timer1_count++;
    1b80:	80 91 1c 05 	lds	r24, 0x051C
    1b84:	8f 5f       	subi	r24, 0xFF	; 255
	if(timer1_count == 2){
    1b86:	82 30       	cpi	r24, 0x02	; 2
    1b88:	19 f0       	breq	.+6      	; 0x1b90 <__vector_7+0x32>
// this ISR is fired whenever a match occurs
// triggers getting data from GPS and navigation
ISR (TIMER1_COMPA_vect)
{
	//PORTB = ~PORTB;
	timer1_count++;
    1b8a:	80 93 1c 05 	sts	0x051C, r24
    1b8e:	0c c0       	rjmp	.+24     	; 0x1ba8 <__vector_7+0x4a>
	if(timer1_count == 2){
		timer1_count = 0;
    1b90:	10 92 1c 05 	sts	0x051C, r1
		if(button_state==STARTED && completed == 0)
    1b94:	80 91 1d 05 	lds	r24, 0x051D
    1b98:	81 30       	cpi	r24, 0x01	; 1
    1b9a:	31 f4       	brne	.+12     	; 0x1ba8 <__vector_7+0x4a>
    1b9c:	80 91 22 05 	lds	r24, 0x0522
    1ba0:	81 11       	cpse	r24, r1
    1ba2:	02 c0       	rjmp	.+4      	; 0x1ba8 <__vector_7+0x4a>
		getData();
    1ba4:	0e 94 ed 0c 	call	0x19da	; 0x19da <getData>
	}
}
    1ba8:	ff 91       	pop	r31
    1baa:	ef 91       	pop	r30
    1bac:	bf 91       	pop	r27
    1bae:	af 91       	pop	r26
    1bb0:	9f 91       	pop	r25
    1bb2:	8f 91       	pop	r24
    1bb4:	7f 91       	pop	r23
    1bb6:	6f 91       	pop	r22
    1bb8:	5f 91       	pop	r21
    1bba:	4f 91       	pop	r20
    1bbc:	3f 91       	pop	r19
    1bbe:	2f 91       	pop	r18
    1bc0:	0f 90       	pop	r0
    1bc2:	0f be       	out	0x3f, r0	; 63
    1bc4:	0f 90       	pop	r0
    1bc6:	1f 90       	pop	r1
    1bc8:	18 95       	reti

00001bca <showCurrentLocation>:
	//Lcd4_Write_String("Dist");
	Lcd4_Set_Cursor(2,0);
	Lcd4_Write_String(buffer);
}

void showCurrentLocation(){
    1bca:	ef 92       	push	r14
    1bcc:	ff 92       	push	r15
    1bce:	0f 93       	push	r16
    1bd0:	1f 93       	push	r17
    1bd2:	cf 93       	push	r28
    1bd4:	df 93       	push	r29
    1bd6:	cd b7       	in	r28, 0x3d	; 61
    1bd8:	de b7       	in	r29, 0x3e	; 62
    1bda:	a2 97       	sbiw	r28, 0x22	; 34
    1bdc:	0f b6       	in	r0, 0x3f	; 63
    1bde:	f8 94       	cli
    1be0:	de bf       	out	0x3e, r29	; 62
    1be2:	0f be       	out	0x3f, r0	; 63
    1be4:	cd bf       	out	0x3d, r28	; 61
	printf("showing current location\n");
    1be6:	8e e4       	ldi	r24, 0x4E	; 78
    1be8:	94 e0       	ldi	r25, 0x04	; 4
    1bea:	0e 94 0d 19 	call	0x321a	; 0x321a <puts>
	char buff1[17];char buff2[17];
	snprintf(buff1,sizeof buff1,"curLat %f",curr.lat);
    1bee:	e3 e2       	ldi	r30, 0x23	; 35
    1bf0:	f5 e0       	ldi	r31, 0x05	; 5
    1bf2:	83 81       	ldd	r24, Z+3	; 0x03
    1bf4:	8f 93       	push	r24
    1bf6:	82 81       	ldd	r24, Z+2	; 0x02
    1bf8:	8f 93       	push	r24
    1bfa:	81 81       	ldd	r24, Z+1	; 0x01
    1bfc:	8f 93       	push	r24
    1bfe:	80 81       	ld	r24, Z
    1c00:	8f 93       	push	r24
    1c02:	87 e6       	ldi	r24, 0x67	; 103
    1c04:	94 e0       	ldi	r25, 0x04	; 4
    1c06:	9f 93       	push	r25
    1c08:	8f 93       	push	r24
    1c0a:	1f 92       	push	r1
    1c0c:	11 e1       	ldi	r17, 0x11	; 17
    1c0e:	1f 93       	push	r17
    1c10:	ce 01       	movw	r24, r28
    1c12:	01 96       	adiw	r24, 0x01	; 1
    1c14:	7c 01       	movw	r14, r24
    1c16:	ff 92       	push	r15
    1c18:	8f 93       	push	r24
    1c1a:	0e 94 3a 19 	call	0x3274	; 0x3274 <snprintf>
	snprintf(buff2,sizeof buff2,"curLon %f",curr.lon);
    1c1e:	e7 e2       	ldi	r30, 0x27	; 39
    1c20:	f5 e0       	ldi	r31, 0x05	; 5
    1c22:	83 81       	ldd	r24, Z+3	; 0x03
    1c24:	8f 93       	push	r24
    1c26:	82 81       	ldd	r24, Z+2	; 0x02
    1c28:	8f 93       	push	r24
    1c2a:	81 81       	ldd	r24, Z+1	; 0x01
    1c2c:	8f 93       	push	r24
    1c2e:	80 81       	ld	r24, Z
    1c30:	8f 93       	push	r24
    1c32:	81 e7       	ldi	r24, 0x71	; 113
    1c34:	94 e0       	ldi	r25, 0x04	; 4
    1c36:	9f 93       	push	r25
    1c38:	8f 93       	push	r24
    1c3a:	1f 92       	push	r1
    1c3c:	1f 93       	push	r17
    1c3e:	8e 01       	movw	r16, r28
    1c40:	0e 5e       	subi	r16, 0xEE	; 238
    1c42:	1f 4f       	sbci	r17, 0xFF	; 255
    1c44:	1f 93       	push	r17
    1c46:	0f 93       	push	r16
    1c48:	0e 94 3a 19 	call	0x3274	; 0x3274 <snprintf>
	Lcd4_Clear();
    1c4c:	0e 94 ca 02 	call	0x594	; 0x594 <Lcd4_Clear>
	Lcd4_Set_Cursor(1,0);
    1c50:	60 e0       	ldi	r22, 0x00	; 0
    1c52:	81 e0       	ldi	r24, 0x01	; 1
    1c54:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <Lcd4_Set_Cursor>
	Lcd4_Write_String(buff1);
    1c58:	c7 01       	movw	r24, r14
    1c5a:	0e 94 65 03 	call	0x6ca	; 0x6ca <Lcd4_Write_String>
	Lcd4_Set_Cursor(2,0);
    1c5e:	60 e0       	ldi	r22, 0x00	; 0
    1c60:	82 e0       	ldi	r24, 0x02	; 2
    1c62:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <Lcd4_Set_Cursor>
	Lcd4_Write_String(buff2);
    1c66:	c8 01       	movw	r24, r16
    1c68:	0e 94 65 03 	call	0x6ca	; 0x6ca <Lcd4_Write_String>
    1c6c:	0f b6       	in	r0, 0x3f	; 63
    1c6e:	f8 94       	cli
    1c70:	de bf       	out	0x3e, r29	; 62
    1c72:	0f be       	out	0x3f, r0	; 63
    1c74:	cd bf       	out	0x3d, r28	; 61
}
    1c76:	a2 96       	adiw	r28, 0x22	; 34
    1c78:	0f b6       	in	r0, 0x3f	; 63
    1c7a:	f8 94       	cli
    1c7c:	de bf       	out	0x3e, r29	; 62
    1c7e:	0f be       	out	0x3f, r0	; 63
    1c80:	cd bf       	out	0x3d, r28	; 61
    1c82:	df 91       	pop	r29
    1c84:	cf 91       	pop	r28
    1c86:	1f 91       	pop	r17
    1c88:	0f 91       	pop	r16
    1c8a:	ff 90       	pop	r15
    1c8c:	ef 90       	pop	r14
    1c8e:	08 95       	ret

00001c90 <showLocationDistance>:

void showLocationDistance(){
    1c90:	8f 92       	push	r8
    1c92:	9f 92       	push	r9
    1c94:	af 92       	push	r10
    1c96:	bf 92       	push	r11
    1c98:	cf 92       	push	r12
    1c9a:	df 92       	push	r13
    1c9c:	ef 92       	push	r14
    1c9e:	ff 92       	push	r15
    1ca0:	1f 93       	push	r17
    1ca2:	cf 93       	push	r28
    1ca4:	df 93       	push	r29
    1ca6:	cd b7       	in	r28, 0x3d	; 61
    1ca8:	de b7       	in	r29, 0x3e	; 62
    1caa:	a2 97       	sbiw	r28, 0x22	; 34
    1cac:	0f b6       	in	r0, 0x3f	; 63
    1cae:	f8 94       	cli
    1cb0:	de bf       	out	0x3e, r29	; 62
    1cb2:	0f be       	out	0x3f, r0	; 63
    1cb4:	cd bf       	out	0x3d, r28	; 61
	printf("showing currloc & distance left");
    1cb6:	8b e7       	ldi	r24, 0x7B	; 123
    1cb8:	94 e0       	ldi	r25, 0x04	; 4
    1cba:	9f 93       	push	r25
    1cbc:	8f 93       	push	r24
    1cbe:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <printf>
	Lcd4_Clear();
    1cc2:	0e 94 ca 02 	call	0x594	; 0x594 <Lcd4_Clear>
	//ftoa(curr.lon,buff2,4);
	//Lcd4_Set_Cursor(1,0);
	//Lcd4_Write_String(buff1);
	//Lcd4_Set_Cursor(1,9);
	//Lcd4_Write_String(buff2);
	snprintf(buff1,sizeof buff1,"covered %d m",totalDist);
    1cc6:	80 91 33 05 	lds	r24, 0x0533
    1cca:	8f 93       	push	r24
    1ccc:	80 91 32 05 	lds	r24, 0x0532
    1cd0:	8f 93       	push	r24
    1cd2:	8b e9       	ldi	r24, 0x9B	; 155
    1cd4:	94 e0       	ldi	r25, 0x04	; 4
    1cd6:	9f 93       	push	r25
    1cd8:	8f 93       	push	r24
    1cda:	1f 92       	push	r1
    1cdc:	11 e1       	ldi	r17, 0x11	; 17
    1cde:	1f 93       	push	r17
    1ce0:	ce 01       	movw	r24, r28
    1ce2:	01 96       	adiw	r24, 0x01	; 1
    1ce4:	7c 01       	movw	r14, r24
    1ce6:	ff 92       	push	r15
    1ce8:	8f 93       	push	r24
    1cea:	0e 94 3a 19 	call	0x3274	; 0x3274 <snprintf>
	printf(buff1);
    1cee:	ff 92       	push	r15
    1cf0:	ef 92       	push	r14
    1cf2:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <printf>
	Lcd4_Set_Cursor(1,0);
    1cf6:	60 e0       	ldi	r22, 0x00	; 0
    1cf8:	81 e0       	ldi	r24, 0x01	; 1
    1cfa:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <Lcd4_Set_Cursor>
	Lcd4_Write_String(buff1);
    1cfe:	c7 01       	movw	r24, r14
    1d00:	0e 94 65 03 	call	0x6ca	; 0x6ca <Lcd4_Write_String>
	//uint16_t d = distance(curr.lat,curr.lon,path[lastidx-1][0],path[lastidx-1][1],'m');
	//printf("distance left %d covered %d\n",d,totalDist);
	char buff3[17];
	//snprintf(buff3,sizeof buff3,"%dm to go",d);
	float dd = totalDist;
	uint16_t elapsedTime = hour*3600 + min*60 + sec;
    1d04:	80 91 40 05 	lds	r24, 0x0540
    1d08:	90 91 41 05 	lds	r25, 0x0541
    1d0c:	2c e3       	ldi	r18, 0x3C	; 60
    1d0e:	28 9f       	mul	r18, r24
    1d10:	b0 01       	movw	r22, r0
    1d12:	29 9f       	mul	r18, r25
    1d14:	70 0d       	add	r23, r0
    1d16:	11 24       	eor	r1, r1
    1d18:	40 91 36 05 	lds	r20, 0x0536
    1d1c:	50 91 37 05 	lds	r21, 0x0537
    1d20:	20 e1       	ldi	r18, 0x10	; 16
    1d22:	3e e0       	ldi	r19, 0x0E	; 14
    1d24:	42 9f       	mul	r20, r18
    1d26:	c0 01       	movw	r24, r0
    1d28:	43 9f       	mul	r20, r19
    1d2a:	90 0d       	add	r25, r0
    1d2c:	52 9f       	mul	r21, r18
    1d2e:	90 0d       	add	r25, r0
    1d30:	11 24       	eor	r1, r1
    1d32:	68 0f       	add	r22, r24
    1d34:	79 1f       	adc	r23, r25
    1d36:	80 e0       	ldi	r24, 0x00	; 0
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	0e 94 da 10 	call	0x21b4	; 0x21b4 <__floatunsisf>
    1d3e:	20 91 42 05 	lds	r18, 0x0542
    1d42:	30 91 43 05 	lds	r19, 0x0543
    1d46:	40 91 44 05 	lds	r20, 0x0544
    1d4a:	50 91 45 05 	lds	r21, 0x0545
    1d4e:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <__addsf3>
    1d52:	0e 94 ae 10 	call	0x215c	; 0x215c <__fixunssfsi>
    1d56:	6b 01       	movw	r12, r22
    1d58:	7c 01       	movw	r14, r24
	
	//uint16_t d = distance(curr.lat,curr.lon,path[lastidx-1][0],path[lastidx-1][1],'m');
	//printf("distance left %d covered %d\n",d,totalDist);
	char buff3[17];
	//snprintf(buff3,sizeof buff3,"%dm to go",d);
	float dd = totalDist;
    1d5a:	60 91 32 05 	lds	r22, 0x0532
    1d5e:	70 91 33 05 	lds	r23, 0x0533
    1d62:	80 e0       	ldi	r24, 0x00	; 0
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	0e 94 da 10 	call	0x21b4	; 0x21b4 <__floatunsisf>
    1d6a:	4b 01       	movw	r8, r22
    1d6c:	5c 01       	movw	r10, r24
	uint16_t elapsedTime = hour*3600 + min*60 + sec;
	float velo =dd/elapsedTime; //precision lost
    1d6e:	b6 01       	movw	r22, r12
    1d70:	80 e0       	ldi	r24, 0x00	; 0
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	0e 94 da 10 	call	0x21b4	; 0x21b4 <__floatunsisf>
    1d78:	9b 01       	movw	r18, r22
    1d7a:	ac 01       	movw	r20, r24
    1d7c:	c5 01       	movw	r24, r10
    1d7e:	b4 01       	movw	r22, r8
    1d80:	0e 94 41 10 	call	0x2082	; 0x2082 <__divsf3>
	snprintf(buff3,sizeof buff3,"Speed %.2f mps",velo);
    1d84:	9f 93       	push	r25
    1d86:	8f 93       	push	r24
    1d88:	7f 93       	push	r23
    1d8a:	6f 93       	push	r22
    1d8c:	88 ea       	ldi	r24, 0xA8	; 168
    1d8e:	94 e0       	ldi	r25, 0x04	; 4
    1d90:	9f 93       	push	r25
    1d92:	8f 93       	push	r24
    1d94:	1f 92       	push	r1
    1d96:	1f 93       	push	r17
    1d98:	5e 01       	movw	r10, r28
    1d9a:	92 e1       	ldi	r25, 0x12	; 18
    1d9c:	a9 0e       	add	r10, r25
    1d9e:	b1 1c       	adc	r11, r1
    1da0:	bf 92       	push	r11
    1da2:	af 92       	push	r10
    1da4:	0e 94 3a 19 	call	0x3274	; 0x3274 <snprintf>
	printf(buff3);
    1da8:	bf 92       	push	r11
    1daa:	af 92       	push	r10
    1dac:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <printf>
	printf("totalDist %d elapsed time %d s\n",totalDist,elapsedTime);
    1db0:	df 92       	push	r13
    1db2:	cf 92       	push	r12
    1db4:	80 91 33 05 	lds	r24, 0x0533
    1db8:	8f 93       	push	r24
    1dba:	80 91 32 05 	lds	r24, 0x0532
    1dbe:	8f 93       	push	r24
    1dc0:	87 eb       	ldi	r24, 0xB7	; 183
    1dc2:	94 e0       	ldi	r25, 0x04	; 4
    1dc4:	9f 93       	push	r25
    1dc6:	8f 93       	push	r24
    1dc8:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <printf>
	Lcd4_Set_Cursor(2,0);
    1dcc:	60 e0       	ldi	r22, 0x00	; 0
    1dce:	82 e0       	ldi	r24, 0x02	; 2
    1dd0:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <Lcd4_Set_Cursor>
	Lcd4_Write_String(buff3);
    1dd4:	c5 01       	movw	r24, r10
    1dd6:	0e 94 65 03 	call	0x6ca	; 0x6ca <Lcd4_Write_String>
    1dda:	0f b6       	in	r0, 0x3f	; 63
    1ddc:	f8 94       	cli
    1dde:	de bf       	out	0x3e, r29	; 62
    1de0:	0f be       	out	0x3f, r0	; 63
    1de2:	cd bf       	out	0x3d, r28	; 61
}
    1de4:	a2 96       	adiw	r28, 0x22	; 34
    1de6:	0f b6       	in	r0, 0x3f	; 63
    1de8:	f8 94       	cli
    1dea:	de bf       	out	0x3e, r29	; 62
    1dec:	0f be       	out	0x3f, r0	; 63
    1dee:	cd bf       	out	0x3d, r28	; 61
    1df0:	df 91       	pop	r29
    1df2:	cf 91       	pop	r28
    1df4:	1f 91       	pop	r17
    1df6:	ff 90       	pop	r15
    1df8:	ef 90       	pop	r14
    1dfa:	df 90       	pop	r13
    1dfc:	cf 90       	pop	r12
    1dfe:	bf 90       	pop	r11
    1e00:	af 90       	pop	r10
    1e02:	9f 90       	pop	r9
    1e04:	8f 90       	pop	r8
    1e06:	08 95       	ret

00001e08 <__vector_11>:
}

// TIMER0 overflow interrupt service routine
// called whenever TCNT0 overflows
ISR(TIMER0_OVF_vect)
{
    1e08:	1f 92       	push	r1
    1e0a:	0f 92       	push	r0
    1e0c:	0f b6       	in	r0, 0x3f	; 63
    1e0e:	0f 92       	push	r0
    1e10:	11 24       	eor	r1, r1
    1e12:	cf 92       	push	r12
    1e14:	df 92       	push	r13
    1e16:	ef 92       	push	r14
    1e18:	ff 92       	push	r15
    1e1a:	0f 93       	push	r16
    1e1c:	1f 93       	push	r17
    1e1e:	2f 93       	push	r18
    1e20:	3f 93       	push	r19
    1e22:	4f 93       	push	r20
    1e24:	5f 93       	push	r21
    1e26:	6f 93       	push	r22
    1e28:	7f 93       	push	r23
    1e2a:	8f 93       	push	r24
    1e2c:	9f 93       	push	r25
    1e2e:	af 93       	push	r26
    1e30:	bf 93       	push	r27
    1e32:	cf 93       	push	r28
    1e34:	df 93       	push	r29
    1e36:	ef 93       	push	r30
    1e38:	ff 93       	push	r31
	// keep a track of number of overflows
	tot_overflow++;
    1e3a:	80 91 31 05 	lds	r24, 0x0531
    1e3e:	8f 5f       	subi	r24, 0xFF	; 255
    1e40:	80 93 31 05 	sts	0x0531, r24
	if(tot_overflow == 46){
    1e44:	80 91 31 05 	lds	r24, 0x0531
    1e48:	8e 32       	cpi	r24, 0x2E	; 46
    1e4a:	09 f0       	breq	.+2      	; 0x1e4e <__vector_11+0x46>
    1e4c:	7e c0       	rjmp	.+252    	; 0x1f4a <__vector_11+0x142>
		sec += 3.0;
    1e4e:	20 e0       	ldi	r18, 0x00	; 0
    1e50:	30 e0       	ldi	r19, 0x00	; 0
    1e52:	40 e4       	ldi	r20, 0x40	; 64
    1e54:	50 e4       	ldi	r21, 0x40	; 64
    1e56:	60 91 42 05 	lds	r22, 0x0542
    1e5a:	70 91 43 05 	lds	r23, 0x0543
    1e5e:	80 91 44 05 	lds	r24, 0x0544
    1e62:	90 91 45 05 	lds	r25, 0x0545
    1e66:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <__addsf3>
    1e6a:	6b 01       	movw	r12, r22
    1e6c:	7c 01       	movw	r14, r24
    1e6e:	60 93 42 05 	sts	0x0542, r22
    1e72:	70 93 43 05 	sts	0x0543, r23
    1e76:	80 93 44 05 	sts	0x0544, r24
    1e7a:	90 93 45 05 	sts	0x0545, r25
		if(sec >= 60){
    1e7e:	20 e0       	ldi	r18, 0x00	; 0
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	40 e7       	ldi	r20, 0x70	; 112
    1e84:	52 e4       	ldi	r21, 0x42	; 66
    1e86:	0e 94 16 12 	call	0x242c	; 0x242c <__gesf2>
    1e8a:	88 23       	and	r24, r24
    1e8c:	5c f1       	brlt	.+86     	; 0x1ee4 <__vector_11+0xdc>
			min++;
    1e8e:	00 91 40 05 	lds	r16, 0x0540
    1e92:	10 91 41 05 	lds	r17, 0x0541
    1e96:	e8 01       	movw	r28, r16
    1e98:	21 96       	adiw	r28, 0x01	; 1
    1e9a:	d0 93 41 05 	sts	0x0541, r29
    1e9e:	c0 93 40 05 	sts	0x0540, r28
			sec -= 60;
    1ea2:	20 e0       	ldi	r18, 0x00	; 0
    1ea4:	30 e0       	ldi	r19, 0x00	; 0
    1ea6:	40 e7       	ldi	r20, 0x70	; 112
    1ea8:	52 e4       	ldi	r21, 0x42	; 66
    1eaa:	c7 01       	movw	r24, r14
    1eac:	b6 01       	movw	r22, r12
    1eae:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <__subsf3>
    1eb2:	60 93 42 05 	sts	0x0542, r22
    1eb6:	70 93 43 05 	sts	0x0543, r23
    1eba:	80 93 44 05 	sts	0x0544, r24
    1ebe:	90 93 45 05 	sts	0x0545, r25
			if(min >= 60){
    1ec2:	ec 97       	sbiw	r28, 0x3c	; 60
    1ec4:	78 f0       	brcs	.+30     	; 0x1ee4 <__vector_11+0xdc>
				hour++;
    1ec6:	80 91 36 05 	lds	r24, 0x0536
    1eca:	90 91 37 05 	lds	r25, 0x0537
    1ece:	01 96       	adiw	r24, 0x01	; 1
    1ed0:	90 93 37 05 	sts	0x0537, r25
    1ed4:	80 93 36 05 	sts	0x0536, r24
				min -= 60;
    1ed8:	0b 53       	subi	r16, 0x3B	; 59
    1eda:	11 09       	sbc	r17, r1
    1edc:	10 93 41 05 	sts	0x0541, r17
    1ee0:	00 93 40 05 	sts	0x0540, r16
			}
		}
		//PORTB = ~PORTB;
		printf("timer0\n");
    1ee4:	87 ed       	ldi	r24, 0xD7	; 215
    1ee6:	94 e0       	ldi	r25, 0x04	; 4
    1ee8:	0e 94 0d 19 	call	0x321a	; 0x321a <puts>
		tot_overflow = 0;
    1eec:	10 92 31 05 	sts	0x0531, r1
		if(completed == 0 && button_state== STARTED ){
    1ef0:	80 91 22 05 	lds	r24, 0x0522
    1ef4:	81 11       	cpse	r24, r1
    1ef6:	29 c0       	rjmp	.+82     	; 0x1f4a <__vector_11+0x142>
    1ef8:	80 91 1d 05 	lds	r24, 0x051D
    1efc:	81 30       	cpi	r24, 0x01	; 1
    1efe:	29 f5       	brne	.+74     	; 0x1f4a <__vector_11+0x142>
			printf("lcd state: %d\n",lcd_state);
    1f00:	80 91 66 00 	lds	r24, 0x0066
    1f04:	1f 92       	push	r1
    1f06:	8f 93       	push	r24
    1f08:	8e ed       	ldi	r24, 0xDE	; 222
    1f0a:	94 e0       	ldi	r25, 0x04	; 4
    1f0c:	9f 93       	push	r25
    1f0e:	8f 93       	push	r24
    1f10:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <printf>
			if(lcd_state == SHOW_CURR_LOC){
    1f14:	80 91 66 00 	lds	r24, 0x0066
    1f18:	0f 90       	pop	r0
    1f1a:	0f 90       	pop	r0
    1f1c:	0f 90       	pop	r0
    1f1e:	0f 90       	pop	r0
    1f20:	81 11       	cpse	r24, r1
    1f22:	03 c0       	rjmp	.+6      	; 0x1f2a <__vector_11+0x122>
				showCurrentLocation();
    1f24:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <showCurrentLocation>
    1f28:	10 c0       	rjmp	.+32     	; 0x1f4a <__vector_11+0x142>
				//lcd_state = SHOW_LOC_DIST;
			}else if(lcd_state == SHOW_DIRECTION){
    1f2a:	82 30       	cpi	r24, 0x02	; 2
    1f2c:	19 f4       	brne	.+6      	; 0x1f34 <__vector_11+0x12c>
				//showDirection();
				lcd_state = SHOW_CURR_LOC;
    1f2e:	10 92 66 00 	sts	0x0066, r1
    1f32:	0b c0       	rjmp	.+22     	; 0x1f4a <__vector_11+0x142>
			}else if(lcd_state == SHOW_LOC_DIST){
    1f34:	81 30       	cpi	r24, 0x01	; 1
    1f36:	29 f4       	brne	.+10     	; 0x1f42 <__vector_11+0x13a>
				showLocationDistance();
    1f38:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <showLocationDistance>
				lcd_state = SHOW_CURR_LOC;
    1f3c:	10 92 66 00 	sts	0x0066, r1
    1f40:	04 c0       	rjmp	.+8      	; 0x1f4a <__vector_11+0x142>
			}else if(lcd_state == DONT_CHANGE ){
    1f42:	83 30       	cpi	r24, 0x03	; 3
    1f44:	11 f4       	brne	.+4      	; 0x1f4a <__vector_11+0x142>
				
				lcd_state = SHOW_CURR_LOC;
    1f46:	10 92 66 00 	sts	0x0066, r1
			}
		}
	}
}
    1f4a:	ff 91       	pop	r31
    1f4c:	ef 91       	pop	r30
    1f4e:	df 91       	pop	r29
    1f50:	cf 91       	pop	r28
    1f52:	bf 91       	pop	r27
    1f54:	af 91       	pop	r26
    1f56:	9f 91       	pop	r25
    1f58:	8f 91       	pop	r24
    1f5a:	7f 91       	pop	r23
    1f5c:	6f 91       	pop	r22
    1f5e:	5f 91       	pop	r21
    1f60:	4f 91       	pop	r20
    1f62:	3f 91       	pop	r19
    1f64:	2f 91       	pop	r18
    1f66:	1f 91       	pop	r17
    1f68:	0f 91       	pop	r16
    1f6a:	ff 90       	pop	r15
    1f6c:	ef 90       	pop	r14
    1f6e:	df 90       	pop	r13
    1f70:	cf 90       	pop	r12
    1f72:	0f 90       	pop	r0
    1f74:	0f be       	out	0x3f, r0	; 63
    1f76:	0f 90       	pop	r0
    1f78:	1f 90       	pop	r1
    1f7a:	18 95       	reti

00001f7c <__subsf3>:
    1f7c:	50 58       	subi	r21, 0x80	; 128

00001f7e <__addsf3>:
    1f7e:	bb 27       	eor	r27, r27
    1f80:	aa 27       	eor	r26, r26
    1f82:	0e d0       	rcall	.+28     	; 0x1fa0 <__addsf3x>
    1f84:	08 c2       	rjmp	.+1040   	; 0x2396 <__fp_round>
    1f86:	d1 d1       	rcall	.+930    	; 0x232a <__fp_pscA>
    1f88:	30 f0       	brcs	.+12     	; 0x1f96 <__addsf3+0x18>
    1f8a:	d6 d1       	rcall	.+940    	; 0x2338 <__fp_pscB>
    1f8c:	20 f0       	brcs	.+8      	; 0x1f96 <__addsf3+0x18>
    1f8e:	31 f4       	brne	.+12     	; 0x1f9c <__addsf3+0x1e>
    1f90:	9f 3f       	cpi	r25, 0xFF	; 255
    1f92:	11 f4       	brne	.+4      	; 0x1f98 <__addsf3+0x1a>
    1f94:	1e f4       	brtc	.+6      	; 0x1f9c <__addsf3+0x1e>
    1f96:	90 c1       	rjmp	.+800    	; 0x22b8 <__fp_nan>
    1f98:	0e f4       	brtc	.+2      	; 0x1f9c <__addsf3+0x1e>
    1f9a:	e0 95       	com	r30
    1f9c:	e7 fb       	bst	r30, 7
    1f9e:	86 c1       	rjmp	.+780    	; 0x22ac <__fp_inf>

00001fa0 <__addsf3x>:
    1fa0:	e9 2f       	mov	r30, r25
    1fa2:	1b d2       	rcall	.+1078   	; 0x23da <__fp_split3>
    1fa4:	80 f3       	brcs	.-32     	; 0x1f86 <__addsf3+0x8>
    1fa6:	ba 17       	cp	r27, r26
    1fa8:	62 07       	cpc	r22, r18
    1faa:	73 07       	cpc	r23, r19
    1fac:	84 07       	cpc	r24, r20
    1fae:	95 07       	cpc	r25, r21
    1fb0:	18 f0       	brcs	.+6      	; 0x1fb8 <__addsf3x+0x18>
    1fb2:	71 f4       	brne	.+28     	; 0x1fd0 <__addsf3x+0x30>
    1fb4:	9e f5       	brtc	.+102    	; 0x201c <__addsf3x+0x7c>
    1fb6:	33 c2       	rjmp	.+1126   	; 0x241e <__fp_zero>
    1fb8:	0e f4       	brtc	.+2      	; 0x1fbc <__addsf3x+0x1c>
    1fba:	e0 95       	com	r30
    1fbc:	0b 2e       	mov	r0, r27
    1fbe:	ba 2f       	mov	r27, r26
    1fc0:	a0 2d       	mov	r26, r0
    1fc2:	0b 01       	movw	r0, r22
    1fc4:	b9 01       	movw	r22, r18
    1fc6:	90 01       	movw	r18, r0
    1fc8:	0c 01       	movw	r0, r24
    1fca:	ca 01       	movw	r24, r20
    1fcc:	a0 01       	movw	r20, r0
    1fce:	11 24       	eor	r1, r1
    1fd0:	ff 27       	eor	r31, r31
    1fd2:	59 1b       	sub	r21, r25
    1fd4:	99 f0       	breq	.+38     	; 0x1ffc <__addsf3x+0x5c>
    1fd6:	59 3f       	cpi	r21, 0xF9	; 249
    1fd8:	50 f4       	brcc	.+20     	; 0x1fee <__addsf3x+0x4e>
    1fda:	50 3e       	cpi	r21, 0xE0	; 224
    1fdc:	68 f1       	brcs	.+90     	; 0x2038 <__addsf3x+0x98>
    1fde:	1a 16       	cp	r1, r26
    1fe0:	f0 40       	sbci	r31, 0x00	; 0
    1fe2:	a2 2f       	mov	r26, r18
    1fe4:	23 2f       	mov	r18, r19
    1fe6:	34 2f       	mov	r19, r20
    1fe8:	44 27       	eor	r20, r20
    1fea:	58 5f       	subi	r21, 0xF8	; 248
    1fec:	f3 cf       	rjmp	.-26     	; 0x1fd4 <__addsf3x+0x34>
    1fee:	46 95       	lsr	r20
    1ff0:	37 95       	ror	r19
    1ff2:	27 95       	ror	r18
    1ff4:	a7 95       	ror	r26
    1ff6:	f0 40       	sbci	r31, 0x00	; 0
    1ff8:	53 95       	inc	r21
    1ffa:	c9 f7       	brne	.-14     	; 0x1fee <__addsf3x+0x4e>
    1ffc:	7e f4       	brtc	.+30     	; 0x201c <__addsf3x+0x7c>
    1ffe:	1f 16       	cp	r1, r31
    2000:	ba 0b       	sbc	r27, r26
    2002:	62 0b       	sbc	r22, r18
    2004:	73 0b       	sbc	r23, r19
    2006:	84 0b       	sbc	r24, r20
    2008:	ba f0       	brmi	.+46     	; 0x2038 <__addsf3x+0x98>
    200a:	91 50       	subi	r25, 0x01	; 1
    200c:	a1 f0       	breq	.+40     	; 0x2036 <__addsf3x+0x96>
    200e:	ff 0f       	add	r31, r31
    2010:	bb 1f       	adc	r27, r27
    2012:	66 1f       	adc	r22, r22
    2014:	77 1f       	adc	r23, r23
    2016:	88 1f       	adc	r24, r24
    2018:	c2 f7       	brpl	.-16     	; 0x200a <__addsf3x+0x6a>
    201a:	0e c0       	rjmp	.+28     	; 0x2038 <__addsf3x+0x98>
    201c:	ba 0f       	add	r27, r26
    201e:	62 1f       	adc	r22, r18
    2020:	73 1f       	adc	r23, r19
    2022:	84 1f       	adc	r24, r20
    2024:	48 f4       	brcc	.+18     	; 0x2038 <__addsf3x+0x98>
    2026:	87 95       	ror	r24
    2028:	77 95       	ror	r23
    202a:	67 95       	ror	r22
    202c:	b7 95       	ror	r27
    202e:	f7 95       	ror	r31
    2030:	9e 3f       	cpi	r25, 0xFE	; 254
    2032:	08 f0       	brcs	.+2      	; 0x2036 <__addsf3x+0x96>
    2034:	b3 cf       	rjmp	.-154    	; 0x1f9c <__addsf3+0x1e>
    2036:	93 95       	inc	r25
    2038:	88 0f       	add	r24, r24
    203a:	08 f0       	brcs	.+2      	; 0x203e <__addsf3x+0x9e>
    203c:	99 27       	eor	r25, r25
    203e:	ee 0f       	add	r30, r30
    2040:	97 95       	ror	r25
    2042:	87 95       	ror	r24
    2044:	08 95       	ret

00002046 <asin>:
    2046:	9f 93       	push	r25
    2048:	9f 77       	andi	r25, 0x7F	; 127
    204a:	ee e3       	ldi	r30, 0x3E	; 62
    204c:	89 37       	cpi	r24, 0x79	; 121
    204e:	9e 07       	cpc	r25, r30
    2050:	20 f4       	brcc	.+8      	; 0x205a <asin+0x14>
    2052:	e4 e5       	ldi	r30, 0x54	; 84
    2054:	f0 e0       	ldi	r31, 0x00	; 0
    2056:	58 d1       	rcall	.+688    	; 0x2308 <__fp_powsodd>
    2058:	09 c0       	rjmp	.+18     	; 0x206c <asin+0x26>
    205a:	e9 d0       	rcall	.+466    	; 0x222e <__fp_arccos>
    205c:	90 58       	subi	r25, 0x80	; 128
    205e:	a2 ea       	ldi	r26, 0xA2	; 162
    2060:	2a ed       	ldi	r18, 0xDA	; 218
    2062:	3f e0       	ldi	r19, 0x0F	; 15
    2064:	49 ec       	ldi	r20, 0xC9	; 201
    2066:	5f e3       	ldi	r21, 0x3F	; 63
    2068:	9b df       	rcall	.-202    	; 0x1fa0 <__addsf3x>
    206a:	95 d1       	rcall	.+810    	; 0x2396 <__fp_round>
    206c:	0f 90       	pop	r0
    206e:	07 fc       	sbrc	r0, 7
    2070:	90 58       	subi	r25, 0x80	; 128
    2072:	08 95       	ret

00002074 <__cmpsf2>:
    2074:	f7 d0       	rcall	.+494    	; 0x2264 <__fp_cmp>
    2076:	08 f4       	brcc	.+2      	; 0x207a <__cmpsf2+0x6>
    2078:	81 e0       	ldi	r24, 0x01	; 1
    207a:	08 95       	ret

0000207c <cos>:
    207c:	65 d1       	rcall	.+714    	; 0x2348 <__fp_rempio2>
    207e:	e3 95       	inc	r30
    2080:	9b c1       	rjmp	.+822    	; 0x23b8 <__fp_sinus>

00002082 <__divsf3>:
    2082:	0c d0       	rcall	.+24     	; 0x209c <__divsf3x>
    2084:	88 c1       	rjmp	.+784    	; 0x2396 <__fp_round>
    2086:	58 d1       	rcall	.+688    	; 0x2338 <__fp_pscB>
    2088:	40 f0       	brcs	.+16     	; 0x209a <__divsf3+0x18>
    208a:	4f d1       	rcall	.+670    	; 0x232a <__fp_pscA>
    208c:	30 f0       	brcs	.+12     	; 0x209a <__divsf3+0x18>
    208e:	21 f4       	brne	.+8      	; 0x2098 <__divsf3+0x16>
    2090:	5f 3f       	cpi	r21, 0xFF	; 255
    2092:	19 f0       	breq	.+6      	; 0x209a <__divsf3+0x18>
    2094:	0b c1       	rjmp	.+534    	; 0x22ac <__fp_inf>
    2096:	51 11       	cpse	r21, r1
    2098:	c3 c1       	rjmp	.+902    	; 0x2420 <__fp_szero>
    209a:	0e c1       	rjmp	.+540    	; 0x22b8 <__fp_nan>

0000209c <__divsf3x>:
    209c:	9e d1       	rcall	.+828    	; 0x23da <__fp_split3>
    209e:	98 f3       	brcs	.-26     	; 0x2086 <__divsf3+0x4>

000020a0 <__divsf3_pse>:
    20a0:	99 23       	and	r25, r25
    20a2:	c9 f3       	breq	.-14     	; 0x2096 <__divsf3+0x14>
    20a4:	55 23       	and	r21, r21
    20a6:	b1 f3       	breq	.-20     	; 0x2094 <__divsf3+0x12>
    20a8:	95 1b       	sub	r25, r21
    20aa:	55 0b       	sbc	r21, r21
    20ac:	bb 27       	eor	r27, r27
    20ae:	aa 27       	eor	r26, r26
    20b0:	62 17       	cp	r22, r18
    20b2:	73 07       	cpc	r23, r19
    20b4:	84 07       	cpc	r24, r20
    20b6:	38 f0       	brcs	.+14     	; 0x20c6 <__divsf3_pse+0x26>
    20b8:	9f 5f       	subi	r25, 0xFF	; 255
    20ba:	5f 4f       	sbci	r21, 0xFF	; 255
    20bc:	22 0f       	add	r18, r18
    20be:	33 1f       	adc	r19, r19
    20c0:	44 1f       	adc	r20, r20
    20c2:	aa 1f       	adc	r26, r26
    20c4:	a9 f3       	breq	.-22     	; 0x20b0 <__divsf3_pse+0x10>
    20c6:	33 d0       	rcall	.+102    	; 0x212e <__divsf3_pse+0x8e>
    20c8:	0e 2e       	mov	r0, r30
    20ca:	3a f0       	brmi	.+14     	; 0x20da <__divsf3_pse+0x3a>
    20cc:	e0 e8       	ldi	r30, 0x80	; 128
    20ce:	30 d0       	rcall	.+96     	; 0x2130 <__divsf3_pse+0x90>
    20d0:	91 50       	subi	r25, 0x01	; 1
    20d2:	50 40       	sbci	r21, 0x00	; 0
    20d4:	e6 95       	lsr	r30
    20d6:	00 1c       	adc	r0, r0
    20d8:	ca f7       	brpl	.-14     	; 0x20cc <__divsf3_pse+0x2c>
    20da:	29 d0       	rcall	.+82     	; 0x212e <__divsf3_pse+0x8e>
    20dc:	fe 2f       	mov	r31, r30
    20de:	27 d0       	rcall	.+78     	; 0x212e <__divsf3_pse+0x8e>
    20e0:	66 0f       	add	r22, r22
    20e2:	77 1f       	adc	r23, r23
    20e4:	88 1f       	adc	r24, r24
    20e6:	bb 1f       	adc	r27, r27
    20e8:	26 17       	cp	r18, r22
    20ea:	37 07       	cpc	r19, r23
    20ec:	48 07       	cpc	r20, r24
    20ee:	ab 07       	cpc	r26, r27
    20f0:	b0 e8       	ldi	r27, 0x80	; 128
    20f2:	09 f0       	breq	.+2      	; 0x20f6 <__divsf3_pse+0x56>
    20f4:	bb 0b       	sbc	r27, r27
    20f6:	80 2d       	mov	r24, r0
    20f8:	bf 01       	movw	r22, r30
    20fa:	ff 27       	eor	r31, r31
    20fc:	93 58       	subi	r25, 0x83	; 131
    20fe:	5f 4f       	sbci	r21, 0xFF	; 255
    2100:	2a f0       	brmi	.+10     	; 0x210c <__divsf3_pse+0x6c>
    2102:	9e 3f       	cpi	r25, 0xFE	; 254
    2104:	51 05       	cpc	r21, r1
    2106:	68 f0       	brcs	.+26     	; 0x2122 <__divsf3_pse+0x82>
    2108:	d1 c0       	rjmp	.+418    	; 0x22ac <__fp_inf>
    210a:	8a c1       	rjmp	.+788    	; 0x2420 <__fp_szero>
    210c:	5f 3f       	cpi	r21, 0xFF	; 255
    210e:	ec f3       	brlt	.-6      	; 0x210a <__divsf3_pse+0x6a>
    2110:	98 3e       	cpi	r25, 0xE8	; 232
    2112:	dc f3       	brlt	.-10     	; 0x210a <__divsf3_pse+0x6a>
    2114:	86 95       	lsr	r24
    2116:	77 95       	ror	r23
    2118:	67 95       	ror	r22
    211a:	b7 95       	ror	r27
    211c:	f7 95       	ror	r31
    211e:	9f 5f       	subi	r25, 0xFF	; 255
    2120:	c9 f7       	brne	.-14     	; 0x2114 <__divsf3_pse+0x74>
    2122:	88 0f       	add	r24, r24
    2124:	91 1d       	adc	r25, r1
    2126:	96 95       	lsr	r25
    2128:	87 95       	ror	r24
    212a:	97 f9       	bld	r25, 7
    212c:	08 95       	ret
    212e:	e1 e0       	ldi	r30, 0x01	; 1
    2130:	66 0f       	add	r22, r22
    2132:	77 1f       	adc	r23, r23
    2134:	88 1f       	adc	r24, r24
    2136:	bb 1f       	adc	r27, r27
    2138:	62 17       	cp	r22, r18
    213a:	73 07       	cpc	r23, r19
    213c:	84 07       	cpc	r24, r20
    213e:	ba 07       	cpc	r27, r26
    2140:	20 f0       	brcs	.+8      	; 0x214a <__divsf3_pse+0xaa>
    2142:	62 1b       	sub	r22, r18
    2144:	73 0b       	sbc	r23, r19
    2146:	84 0b       	sbc	r24, r20
    2148:	ba 0b       	sbc	r27, r26
    214a:	ee 1f       	adc	r30, r30
    214c:	88 f7       	brcc	.-30     	; 0x2130 <__divsf3_pse+0x90>
    214e:	e0 95       	com	r30
    2150:	08 95       	ret

00002152 <__fixsfsi>:
    2152:	04 d0       	rcall	.+8      	; 0x215c <__fixunssfsi>
    2154:	68 94       	set
    2156:	b1 11       	cpse	r27, r1
    2158:	63 c1       	rjmp	.+710    	; 0x2420 <__fp_szero>
    215a:	08 95       	ret

0000215c <__fixunssfsi>:
    215c:	46 d1       	rcall	.+652    	; 0x23ea <__fp_splitA>
    215e:	88 f0       	brcs	.+34     	; 0x2182 <__fixunssfsi+0x26>
    2160:	9f 57       	subi	r25, 0x7F	; 127
    2162:	90 f0       	brcs	.+36     	; 0x2188 <__fixunssfsi+0x2c>
    2164:	b9 2f       	mov	r27, r25
    2166:	99 27       	eor	r25, r25
    2168:	b7 51       	subi	r27, 0x17	; 23
    216a:	a0 f0       	brcs	.+40     	; 0x2194 <__fixunssfsi+0x38>
    216c:	d1 f0       	breq	.+52     	; 0x21a2 <__fixunssfsi+0x46>
    216e:	66 0f       	add	r22, r22
    2170:	77 1f       	adc	r23, r23
    2172:	88 1f       	adc	r24, r24
    2174:	99 1f       	adc	r25, r25
    2176:	1a f0       	brmi	.+6      	; 0x217e <__fixunssfsi+0x22>
    2178:	ba 95       	dec	r27
    217a:	c9 f7       	brne	.-14     	; 0x216e <__fixunssfsi+0x12>
    217c:	12 c0       	rjmp	.+36     	; 0x21a2 <__fixunssfsi+0x46>
    217e:	b1 30       	cpi	r27, 0x01	; 1
    2180:	81 f0       	breq	.+32     	; 0x21a2 <__fixunssfsi+0x46>
    2182:	4d d1       	rcall	.+666    	; 0x241e <__fp_zero>
    2184:	b1 e0       	ldi	r27, 0x01	; 1
    2186:	08 95       	ret
    2188:	4a c1       	rjmp	.+660    	; 0x241e <__fp_zero>
    218a:	67 2f       	mov	r22, r23
    218c:	78 2f       	mov	r23, r24
    218e:	88 27       	eor	r24, r24
    2190:	b8 5f       	subi	r27, 0xF8	; 248
    2192:	39 f0       	breq	.+14     	; 0x21a2 <__fixunssfsi+0x46>
    2194:	b9 3f       	cpi	r27, 0xF9	; 249
    2196:	cc f3       	brlt	.-14     	; 0x218a <__fixunssfsi+0x2e>
    2198:	86 95       	lsr	r24
    219a:	77 95       	ror	r23
    219c:	67 95       	ror	r22
    219e:	b3 95       	inc	r27
    21a0:	d9 f7       	brne	.-10     	; 0x2198 <__fixunssfsi+0x3c>
    21a2:	3e f4       	brtc	.+14     	; 0x21b2 <__fixunssfsi+0x56>
    21a4:	90 95       	com	r25
    21a6:	80 95       	com	r24
    21a8:	70 95       	com	r23
    21aa:	61 95       	neg	r22
    21ac:	7f 4f       	sbci	r23, 0xFF	; 255
    21ae:	8f 4f       	sbci	r24, 0xFF	; 255
    21b0:	9f 4f       	sbci	r25, 0xFF	; 255
    21b2:	08 95       	ret

000021b4 <__floatunsisf>:
    21b4:	e8 94       	clt
    21b6:	09 c0       	rjmp	.+18     	; 0x21ca <__floatsisf+0x12>

000021b8 <__floatsisf>:
    21b8:	97 fb       	bst	r25, 7
    21ba:	3e f4       	brtc	.+14     	; 0x21ca <__floatsisf+0x12>
    21bc:	90 95       	com	r25
    21be:	80 95       	com	r24
    21c0:	70 95       	com	r23
    21c2:	61 95       	neg	r22
    21c4:	7f 4f       	sbci	r23, 0xFF	; 255
    21c6:	8f 4f       	sbci	r24, 0xFF	; 255
    21c8:	9f 4f       	sbci	r25, 0xFF	; 255
    21ca:	99 23       	and	r25, r25
    21cc:	a9 f0       	breq	.+42     	; 0x21f8 <__floatsisf+0x40>
    21ce:	f9 2f       	mov	r31, r25
    21d0:	96 e9       	ldi	r25, 0x96	; 150
    21d2:	bb 27       	eor	r27, r27
    21d4:	93 95       	inc	r25
    21d6:	f6 95       	lsr	r31
    21d8:	87 95       	ror	r24
    21da:	77 95       	ror	r23
    21dc:	67 95       	ror	r22
    21de:	b7 95       	ror	r27
    21e0:	f1 11       	cpse	r31, r1
    21e2:	f8 cf       	rjmp	.-16     	; 0x21d4 <__floatsisf+0x1c>
    21e4:	fa f4       	brpl	.+62     	; 0x2224 <__floatsisf+0x6c>
    21e6:	bb 0f       	add	r27, r27
    21e8:	11 f4       	brne	.+4      	; 0x21ee <__floatsisf+0x36>
    21ea:	60 ff       	sbrs	r22, 0
    21ec:	1b c0       	rjmp	.+54     	; 0x2224 <__floatsisf+0x6c>
    21ee:	6f 5f       	subi	r22, 0xFF	; 255
    21f0:	7f 4f       	sbci	r23, 0xFF	; 255
    21f2:	8f 4f       	sbci	r24, 0xFF	; 255
    21f4:	9f 4f       	sbci	r25, 0xFF	; 255
    21f6:	16 c0       	rjmp	.+44     	; 0x2224 <__floatsisf+0x6c>
    21f8:	88 23       	and	r24, r24
    21fa:	11 f0       	breq	.+4      	; 0x2200 <__floatsisf+0x48>
    21fc:	96 e9       	ldi	r25, 0x96	; 150
    21fe:	11 c0       	rjmp	.+34     	; 0x2222 <__floatsisf+0x6a>
    2200:	77 23       	and	r23, r23
    2202:	21 f0       	breq	.+8      	; 0x220c <__floatsisf+0x54>
    2204:	9e e8       	ldi	r25, 0x8E	; 142
    2206:	87 2f       	mov	r24, r23
    2208:	76 2f       	mov	r23, r22
    220a:	05 c0       	rjmp	.+10     	; 0x2216 <__floatsisf+0x5e>
    220c:	66 23       	and	r22, r22
    220e:	71 f0       	breq	.+28     	; 0x222c <__floatsisf+0x74>
    2210:	96 e8       	ldi	r25, 0x86	; 134
    2212:	86 2f       	mov	r24, r22
    2214:	70 e0       	ldi	r23, 0x00	; 0
    2216:	60 e0       	ldi	r22, 0x00	; 0
    2218:	2a f0       	brmi	.+10     	; 0x2224 <__floatsisf+0x6c>
    221a:	9a 95       	dec	r25
    221c:	66 0f       	add	r22, r22
    221e:	77 1f       	adc	r23, r23
    2220:	88 1f       	adc	r24, r24
    2222:	da f7       	brpl	.-10     	; 0x221a <__floatsisf+0x62>
    2224:	88 0f       	add	r24, r24
    2226:	96 95       	lsr	r25
    2228:	87 95       	ror	r24
    222a:	97 f9       	bld	r25, 7
    222c:	08 95       	ret

0000222e <__fp_arccos>:
    222e:	df 93       	push	r29
    2230:	cf 93       	push	r28
    2232:	1f 93       	push	r17
    2234:	0f 93       	push	r16
    2236:	8b 01       	movw	r16, r22
    2238:	ec 01       	movw	r28, r24
    223a:	e8 e6       	ldi	r30, 0x68	; 104
    223c:	f0 e0       	ldi	r31, 0x00	; 0
    223e:	3f d0       	rcall	.+126    	; 0x22be <__fp_powser>
    2240:	aa d0       	rcall	.+340    	; 0x2396 <__fp_round>
    2242:	98 01       	movw	r18, r16
    2244:	ae 01       	movw	r20, r28
    2246:	8b 01       	movw	r16, r22
    2248:	ec 01       	movw	r28, r24
    224a:	60 e0       	ldi	r22, 0x00	; 0
    224c:	70 e0       	ldi	r23, 0x00	; 0
    224e:	80 e8       	ldi	r24, 0x80	; 128
    2250:	9f e3       	ldi	r25, 0x3F	; 63
    2252:	94 de       	rcall	.-728    	; 0x1f7c <__subsf3>
    2254:	56 d1       	rcall	.+684    	; 0x2502 <sqrt>
    2256:	98 01       	movw	r18, r16
    2258:	ae 01       	movw	r20, r28
    225a:	0f 91       	pop	r16
    225c:	1f 91       	pop	r17
    225e:	cf 91       	pop	r28
    2260:	df 91       	pop	r29
    2262:	f4 c0       	rjmp	.+488    	; 0x244c <__mulsf3x>

00002264 <__fp_cmp>:
    2264:	99 0f       	add	r25, r25
    2266:	00 08       	sbc	r0, r0
    2268:	55 0f       	add	r21, r21
    226a:	aa 0b       	sbc	r26, r26
    226c:	e0 e8       	ldi	r30, 0x80	; 128
    226e:	fe ef       	ldi	r31, 0xFE	; 254
    2270:	16 16       	cp	r1, r22
    2272:	17 06       	cpc	r1, r23
    2274:	e8 07       	cpc	r30, r24
    2276:	f9 07       	cpc	r31, r25
    2278:	c0 f0       	brcs	.+48     	; 0x22aa <__fp_cmp+0x46>
    227a:	12 16       	cp	r1, r18
    227c:	13 06       	cpc	r1, r19
    227e:	e4 07       	cpc	r30, r20
    2280:	f5 07       	cpc	r31, r21
    2282:	98 f0       	brcs	.+38     	; 0x22aa <__fp_cmp+0x46>
    2284:	62 1b       	sub	r22, r18
    2286:	73 0b       	sbc	r23, r19
    2288:	84 0b       	sbc	r24, r20
    228a:	95 0b       	sbc	r25, r21
    228c:	39 f4       	brne	.+14     	; 0x229c <__fp_cmp+0x38>
    228e:	0a 26       	eor	r0, r26
    2290:	61 f0       	breq	.+24     	; 0x22aa <__fp_cmp+0x46>
    2292:	23 2b       	or	r18, r19
    2294:	24 2b       	or	r18, r20
    2296:	25 2b       	or	r18, r21
    2298:	21 f4       	brne	.+8      	; 0x22a2 <__fp_cmp+0x3e>
    229a:	08 95       	ret
    229c:	0a 26       	eor	r0, r26
    229e:	09 f4       	brne	.+2      	; 0x22a2 <__fp_cmp+0x3e>
    22a0:	a1 40       	sbci	r26, 0x01	; 1
    22a2:	a6 95       	lsr	r26
    22a4:	8f ef       	ldi	r24, 0xFF	; 255
    22a6:	81 1d       	adc	r24, r1
    22a8:	81 1d       	adc	r24, r1
    22aa:	08 95       	ret

000022ac <__fp_inf>:
    22ac:	97 f9       	bld	r25, 7
    22ae:	9f 67       	ori	r25, 0x7F	; 127
    22b0:	80 e8       	ldi	r24, 0x80	; 128
    22b2:	70 e0       	ldi	r23, 0x00	; 0
    22b4:	60 e0       	ldi	r22, 0x00	; 0
    22b6:	08 95       	ret

000022b8 <__fp_nan>:
    22b8:	9f ef       	ldi	r25, 0xFF	; 255
    22ba:	80 ec       	ldi	r24, 0xC0	; 192
    22bc:	08 95       	ret

000022be <__fp_powser>:
    22be:	df 93       	push	r29
    22c0:	cf 93       	push	r28
    22c2:	1f 93       	push	r17
    22c4:	0f 93       	push	r16
    22c6:	ff 92       	push	r15
    22c8:	ef 92       	push	r14
    22ca:	df 92       	push	r13
    22cc:	7b 01       	movw	r14, r22
    22ce:	8c 01       	movw	r16, r24
    22d0:	68 94       	set
    22d2:	05 c0       	rjmp	.+10     	; 0x22de <__fp_powser+0x20>
    22d4:	da 2e       	mov	r13, r26
    22d6:	ef 01       	movw	r28, r30
    22d8:	b9 d0       	rcall	.+370    	; 0x244c <__mulsf3x>
    22da:	fe 01       	movw	r30, r28
    22dc:	e8 94       	clt
    22de:	a5 91       	lpm	r26, Z+
    22e0:	25 91       	lpm	r18, Z+
    22e2:	35 91       	lpm	r19, Z+
    22e4:	45 91       	lpm	r20, Z+
    22e6:	55 91       	lpm	r21, Z+
    22e8:	ae f3       	brts	.-22     	; 0x22d4 <__fp_powser+0x16>
    22ea:	ef 01       	movw	r28, r30
    22ec:	59 de       	rcall	.-846    	; 0x1fa0 <__addsf3x>
    22ee:	fe 01       	movw	r30, r28
    22f0:	97 01       	movw	r18, r14
    22f2:	a8 01       	movw	r20, r16
    22f4:	da 94       	dec	r13
    22f6:	79 f7       	brne	.-34     	; 0x22d6 <__fp_powser+0x18>
    22f8:	df 90       	pop	r13
    22fa:	ef 90       	pop	r14
    22fc:	ff 90       	pop	r15
    22fe:	0f 91       	pop	r16
    2300:	1f 91       	pop	r17
    2302:	cf 91       	pop	r28
    2304:	df 91       	pop	r29
    2306:	08 95       	ret

00002308 <__fp_powsodd>:
    2308:	9f 93       	push	r25
    230a:	8f 93       	push	r24
    230c:	7f 93       	push	r23
    230e:	6f 93       	push	r22
    2310:	ff 93       	push	r31
    2312:	ef 93       	push	r30
    2314:	9b 01       	movw	r18, r22
    2316:	ac 01       	movw	r20, r24
    2318:	8d d0       	rcall	.+282    	; 0x2434 <__mulsf3>
    231a:	ef 91       	pop	r30
    231c:	ff 91       	pop	r31
    231e:	cf df       	rcall	.-98     	; 0x22be <__fp_powser>
    2320:	2f 91       	pop	r18
    2322:	3f 91       	pop	r19
    2324:	4f 91       	pop	r20
    2326:	5f 91       	pop	r21
    2328:	85 c0       	rjmp	.+266    	; 0x2434 <__mulsf3>

0000232a <__fp_pscA>:
    232a:	00 24       	eor	r0, r0
    232c:	0a 94       	dec	r0
    232e:	16 16       	cp	r1, r22
    2330:	17 06       	cpc	r1, r23
    2332:	18 06       	cpc	r1, r24
    2334:	09 06       	cpc	r0, r25
    2336:	08 95       	ret

00002338 <__fp_pscB>:
    2338:	00 24       	eor	r0, r0
    233a:	0a 94       	dec	r0
    233c:	12 16       	cp	r1, r18
    233e:	13 06       	cpc	r1, r19
    2340:	14 06       	cpc	r1, r20
    2342:	05 06       	cpc	r0, r21
    2344:	08 95       	ret
    2346:	b8 cf       	rjmp	.-144    	; 0x22b8 <__fp_nan>

00002348 <__fp_rempio2>:
    2348:	50 d0       	rcall	.+160    	; 0x23ea <__fp_splitA>
    234a:	e8 f3       	brcs	.-6      	; 0x2346 <__fp_pscB+0xe>
    234c:	e8 94       	clt
    234e:	e0 e0       	ldi	r30, 0x00	; 0
    2350:	bb 27       	eor	r27, r27
    2352:	9f 57       	subi	r25, 0x7F	; 127
    2354:	f0 f0       	brcs	.+60     	; 0x2392 <__fp_rempio2+0x4a>
    2356:	2a ed       	ldi	r18, 0xDA	; 218
    2358:	3f e0       	ldi	r19, 0x0F	; 15
    235a:	49 ec       	ldi	r20, 0xC9	; 201
    235c:	06 c0       	rjmp	.+12     	; 0x236a <__fp_rempio2+0x22>
    235e:	ee 0f       	add	r30, r30
    2360:	bb 0f       	add	r27, r27
    2362:	66 1f       	adc	r22, r22
    2364:	77 1f       	adc	r23, r23
    2366:	88 1f       	adc	r24, r24
    2368:	28 f0       	brcs	.+10     	; 0x2374 <__fp_rempio2+0x2c>
    236a:	b2 3a       	cpi	r27, 0xA2	; 162
    236c:	62 07       	cpc	r22, r18
    236e:	73 07       	cpc	r23, r19
    2370:	84 07       	cpc	r24, r20
    2372:	28 f0       	brcs	.+10     	; 0x237e <__fp_rempio2+0x36>
    2374:	b2 5a       	subi	r27, 0xA2	; 162
    2376:	62 0b       	sbc	r22, r18
    2378:	73 0b       	sbc	r23, r19
    237a:	84 0b       	sbc	r24, r20
    237c:	e3 95       	inc	r30
    237e:	9a 95       	dec	r25
    2380:	72 f7       	brpl	.-36     	; 0x235e <__fp_rempio2+0x16>
    2382:	80 38       	cpi	r24, 0x80	; 128
    2384:	30 f4       	brcc	.+12     	; 0x2392 <__fp_rempio2+0x4a>
    2386:	9a 95       	dec	r25
    2388:	bb 0f       	add	r27, r27
    238a:	66 1f       	adc	r22, r22
    238c:	77 1f       	adc	r23, r23
    238e:	88 1f       	adc	r24, r24
    2390:	d2 f7       	brpl	.-12     	; 0x2386 <__fp_rempio2+0x3e>
    2392:	90 48       	sbci	r25, 0x80	; 128
    2394:	f6 c0       	rjmp	.+492    	; 0x2582 <__fp_mpack_finite>

00002396 <__fp_round>:
    2396:	09 2e       	mov	r0, r25
    2398:	03 94       	inc	r0
    239a:	00 0c       	add	r0, r0
    239c:	11 f4       	brne	.+4      	; 0x23a2 <__fp_round+0xc>
    239e:	88 23       	and	r24, r24
    23a0:	52 f0       	brmi	.+20     	; 0x23b6 <__fp_round+0x20>
    23a2:	bb 0f       	add	r27, r27
    23a4:	40 f4       	brcc	.+16     	; 0x23b6 <__fp_round+0x20>
    23a6:	bf 2b       	or	r27, r31
    23a8:	11 f4       	brne	.+4      	; 0x23ae <__fp_round+0x18>
    23aa:	60 ff       	sbrs	r22, 0
    23ac:	04 c0       	rjmp	.+8      	; 0x23b6 <__fp_round+0x20>
    23ae:	6f 5f       	subi	r22, 0xFF	; 255
    23b0:	7f 4f       	sbci	r23, 0xFF	; 255
    23b2:	8f 4f       	sbci	r24, 0xFF	; 255
    23b4:	9f 4f       	sbci	r25, 0xFF	; 255
    23b6:	08 95       	ret

000023b8 <__fp_sinus>:
    23b8:	ef 93       	push	r30
    23ba:	e0 ff       	sbrs	r30, 0
    23bc:	06 c0       	rjmp	.+12     	; 0x23ca <__fp_sinus+0x12>
    23be:	a2 ea       	ldi	r26, 0xA2	; 162
    23c0:	2a ed       	ldi	r18, 0xDA	; 218
    23c2:	3f e0       	ldi	r19, 0x0F	; 15
    23c4:	49 ec       	ldi	r20, 0xC9	; 201
    23c6:	5f eb       	ldi	r21, 0xBF	; 191
    23c8:	eb dd       	rcall	.-1066   	; 0x1fa0 <__addsf3x>
    23ca:	e5 df       	rcall	.-54     	; 0x2396 <__fp_round>
    23cc:	0f 90       	pop	r0
    23ce:	03 94       	inc	r0
    23d0:	01 fc       	sbrc	r0, 1
    23d2:	90 58       	subi	r25, 0x80	; 128
    23d4:	e0 e9       	ldi	r30, 0x90	; 144
    23d6:	f0 e0       	ldi	r31, 0x00	; 0
    23d8:	97 cf       	rjmp	.-210    	; 0x2308 <__fp_powsodd>

000023da <__fp_split3>:
    23da:	57 fd       	sbrc	r21, 7
    23dc:	90 58       	subi	r25, 0x80	; 128
    23de:	44 0f       	add	r20, r20
    23e0:	55 1f       	adc	r21, r21
    23e2:	59 f0       	breq	.+22     	; 0x23fa <__fp_splitA+0x10>
    23e4:	5f 3f       	cpi	r21, 0xFF	; 255
    23e6:	71 f0       	breq	.+28     	; 0x2404 <__fp_splitA+0x1a>
    23e8:	47 95       	ror	r20

000023ea <__fp_splitA>:
    23ea:	88 0f       	add	r24, r24
    23ec:	97 fb       	bst	r25, 7
    23ee:	99 1f       	adc	r25, r25
    23f0:	61 f0       	breq	.+24     	; 0x240a <__fp_splitA+0x20>
    23f2:	9f 3f       	cpi	r25, 0xFF	; 255
    23f4:	79 f0       	breq	.+30     	; 0x2414 <__fp_splitA+0x2a>
    23f6:	87 95       	ror	r24
    23f8:	08 95       	ret
    23fa:	12 16       	cp	r1, r18
    23fc:	13 06       	cpc	r1, r19
    23fe:	14 06       	cpc	r1, r20
    2400:	55 1f       	adc	r21, r21
    2402:	f2 cf       	rjmp	.-28     	; 0x23e8 <__fp_split3+0xe>
    2404:	46 95       	lsr	r20
    2406:	f1 df       	rcall	.-30     	; 0x23ea <__fp_splitA>
    2408:	08 c0       	rjmp	.+16     	; 0x241a <__fp_splitA+0x30>
    240a:	16 16       	cp	r1, r22
    240c:	17 06       	cpc	r1, r23
    240e:	18 06       	cpc	r1, r24
    2410:	99 1f       	adc	r25, r25
    2412:	f1 cf       	rjmp	.-30     	; 0x23f6 <__fp_splitA+0xc>
    2414:	86 95       	lsr	r24
    2416:	71 05       	cpc	r23, r1
    2418:	61 05       	cpc	r22, r1
    241a:	08 94       	sec
    241c:	08 95       	ret

0000241e <__fp_zero>:
    241e:	e8 94       	clt

00002420 <__fp_szero>:
    2420:	bb 27       	eor	r27, r27
    2422:	66 27       	eor	r22, r22
    2424:	77 27       	eor	r23, r23
    2426:	cb 01       	movw	r24, r22
    2428:	97 f9       	bld	r25, 7
    242a:	08 95       	ret

0000242c <__gesf2>:
    242c:	1b df       	rcall	.-458    	; 0x2264 <__fp_cmp>
    242e:	08 f4       	brcc	.+2      	; 0x2432 <__gesf2+0x6>
    2430:	8f ef       	ldi	r24, 0xFF	; 255
    2432:	08 95       	ret

00002434 <__mulsf3>:
    2434:	0b d0       	rcall	.+22     	; 0x244c <__mulsf3x>
    2436:	af cf       	rjmp	.-162    	; 0x2396 <__fp_round>
    2438:	78 df       	rcall	.-272    	; 0x232a <__fp_pscA>
    243a:	28 f0       	brcs	.+10     	; 0x2446 <__mulsf3+0x12>
    243c:	7d df       	rcall	.-262    	; 0x2338 <__fp_pscB>
    243e:	18 f0       	brcs	.+6      	; 0x2446 <__mulsf3+0x12>
    2440:	95 23       	and	r25, r21
    2442:	09 f0       	breq	.+2      	; 0x2446 <__mulsf3+0x12>
    2444:	33 cf       	rjmp	.-410    	; 0x22ac <__fp_inf>
    2446:	38 cf       	rjmp	.-400    	; 0x22b8 <__fp_nan>
    2448:	11 24       	eor	r1, r1
    244a:	ea cf       	rjmp	.-44     	; 0x2420 <__fp_szero>

0000244c <__mulsf3x>:
    244c:	c6 df       	rcall	.-116    	; 0x23da <__fp_split3>
    244e:	a0 f3       	brcs	.-24     	; 0x2438 <__mulsf3+0x4>

00002450 <__mulsf3_pse>:
    2450:	95 9f       	mul	r25, r21
    2452:	d1 f3       	breq	.-12     	; 0x2448 <__mulsf3+0x14>
    2454:	95 0f       	add	r25, r21
    2456:	50 e0       	ldi	r21, 0x00	; 0
    2458:	55 1f       	adc	r21, r21
    245a:	62 9f       	mul	r22, r18
    245c:	f0 01       	movw	r30, r0
    245e:	72 9f       	mul	r23, r18
    2460:	bb 27       	eor	r27, r27
    2462:	f0 0d       	add	r31, r0
    2464:	b1 1d       	adc	r27, r1
    2466:	63 9f       	mul	r22, r19
    2468:	aa 27       	eor	r26, r26
    246a:	f0 0d       	add	r31, r0
    246c:	b1 1d       	adc	r27, r1
    246e:	aa 1f       	adc	r26, r26
    2470:	64 9f       	mul	r22, r20
    2472:	66 27       	eor	r22, r22
    2474:	b0 0d       	add	r27, r0
    2476:	a1 1d       	adc	r26, r1
    2478:	66 1f       	adc	r22, r22
    247a:	82 9f       	mul	r24, r18
    247c:	22 27       	eor	r18, r18
    247e:	b0 0d       	add	r27, r0
    2480:	a1 1d       	adc	r26, r1
    2482:	62 1f       	adc	r22, r18
    2484:	73 9f       	mul	r23, r19
    2486:	b0 0d       	add	r27, r0
    2488:	a1 1d       	adc	r26, r1
    248a:	62 1f       	adc	r22, r18
    248c:	83 9f       	mul	r24, r19
    248e:	a0 0d       	add	r26, r0
    2490:	61 1d       	adc	r22, r1
    2492:	22 1f       	adc	r18, r18
    2494:	74 9f       	mul	r23, r20
    2496:	33 27       	eor	r19, r19
    2498:	a0 0d       	add	r26, r0
    249a:	61 1d       	adc	r22, r1
    249c:	23 1f       	adc	r18, r19
    249e:	84 9f       	mul	r24, r20
    24a0:	60 0d       	add	r22, r0
    24a2:	21 1d       	adc	r18, r1
    24a4:	82 2f       	mov	r24, r18
    24a6:	76 2f       	mov	r23, r22
    24a8:	6a 2f       	mov	r22, r26
    24aa:	11 24       	eor	r1, r1
    24ac:	9f 57       	subi	r25, 0x7F	; 127
    24ae:	50 40       	sbci	r21, 0x00	; 0
    24b0:	8a f0       	brmi	.+34     	; 0x24d4 <__mulsf3_pse+0x84>
    24b2:	e1 f0       	breq	.+56     	; 0x24ec <__mulsf3_pse+0x9c>
    24b4:	88 23       	and	r24, r24
    24b6:	4a f0       	brmi	.+18     	; 0x24ca <__mulsf3_pse+0x7a>
    24b8:	ee 0f       	add	r30, r30
    24ba:	ff 1f       	adc	r31, r31
    24bc:	bb 1f       	adc	r27, r27
    24be:	66 1f       	adc	r22, r22
    24c0:	77 1f       	adc	r23, r23
    24c2:	88 1f       	adc	r24, r24
    24c4:	91 50       	subi	r25, 0x01	; 1
    24c6:	50 40       	sbci	r21, 0x00	; 0
    24c8:	a9 f7       	brne	.-22     	; 0x24b4 <__mulsf3_pse+0x64>
    24ca:	9e 3f       	cpi	r25, 0xFE	; 254
    24cc:	51 05       	cpc	r21, r1
    24ce:	70 f0       	brcs	.+28     	; 0x24ec <__mulsf3_pse+0x9c>
    24d0:	ed ce       	rjmp	.-550    	; 0x22ac <__fp_inf>
    24d2:	a6 cf       	rjmp	.-180    	; 0x2420 <__fp_szero>
    24d4:	5f 3f       	cpi	r21, 0xFF	; 255
    24d6:	ec f3       	brlt	.-6      	; 0x24d2 <__mulsf3_pse+0x82>
    24d8:	98 3e       	cpi	r25, 0xE8	; 232
    24da:	dc f3       	brlt	.-10     	; 0x24d2 <__mulsf3_pse+0x82>
    24dc:	86 95       	lsr	r24
    24de:	77 95       	ror	r23
    24e0:	67 95       	ror	r22
    24e2:	b7 95       	ror	r27
    24e4:	f7 95       	ror	r31
    24e6:	e7 95       	ror	r30
    24e8:	9f 5f       	subi	r25, 0xFF	; 255
    24ea:	c1 f7       	brne	.-16     	; 0x24dc <__mulsf3_pse+0x8c>
    24ec:	fe 2b       	or	r31, r30
    24ee:	88 0f       	add	r24, r24
    24f0:	91 1d       	adc	r25, r1
    24f2:	96 95       	lsr	r25
    24f4:	87 95       	ror	r24
    24f6:	97 f9       	bld	r25, 7
    24f8:	08 95       	ret
    24fa:	11 f4       	brne	.+4      	; 0x2500 <__mulsf3_pse+0xb0>
    24fc:	0e f4       	brtc	.+2      	; 0x2500 <__mulsf3_pse+0xb0>
    24fe:	dc ce       	rjmp	.-584    	; 0x22b8 <__fp_nan>
    2500:	3e c0       	rjmp	.+124    	; 0x257e <__fp_mpack>

00002502 <sqrt>:
    2502:	73 df       	rcall	.-282    	; 0x23ea <__fp_splitA>
    2504:	d0 f3       	brcs	.-12     	; 0x24fa <__mulsf3_pse+0xaa>
    2506:	99 23       	and	r25, r25
    2508:	d9 f3       	breq	.-10     	; 0x2500 <__mulsf3_pse+0xb0>
    250a:	ce f3       	brts	.-14     	; 0x24fe <__mulsf3_pse+0xae>
    250c:	9f 57       	subi	r25, 0x7F	; 127
    250e:	55 0b       	sbc	r21, r21
    2510:	87 ff       	sbrs	r24, 7
    2512:	43 d0       	rcall	.+134    	; 0x259a <__fp_norm2>
    2514:	00 24       	eor	r0, r0
    2516:	a0 e6       	ldi	r26, 0x60	; 96
    2518:	40 ea       	ldi	r20, 0xA0	; 160
    251a:	90 01       	movw	r18, r0
    251c:	80 58       	subi	r24, 0x80	; 128
    251e:	56 95       	lsr	r21
    2520:	97 95       	ror	r25
    2522:	28 f4       	brcc	.+10     	; 0x252e <sqrt+0x2c>
    2524:	80 5c       	subi	r24, 0xC0	; 192
    2526:	66 0f       	add	r22, r22
    2528:	77 1f       	adc	r23, r23
    252a:	88 1f       	adc	r24, r24
    252c:	20 f0       	brcs	.+8      	; 0x2536 <sqrt+0x34>
    252e:	26 17       	cp	r18, r22
    2530:	37 07       	cpc	r19, r23
    2532:	48 07       	cpc	r20, r24
    2534:	30 f4       	brcc	.+12     	; 0x2542 <sqrt+0x40>
    2536:	62 1b       	sub	r22, r18
    2538:	73 0b       	sbc	r23, r19
    253a:	84 0b       	sbc	r24, r20
    253c:	20 29       	or	r18, r0
    253e:	31 29       	or	r19, r1
    2540:	4a 2b       	or	r20, r26
    2542:	a6 95       	lsr	r26
    2544:	17 94       	ror	r1
    2546:	07 94       	ror	r0
    2548:	20 25       	eor	r18, r0
    254a:	31 25       	eor	r19, r1
    254c:	4a 27       	eor	r20, r26
    254e:	58 f7       	brcc	.-42     	; 0x2526 <sqrt+0x24>
    2550:	66 0f       	add	r22, r22
    2552:	77 1f       	adc	r23, r23
    2554:	88 1f       	adc	r24, r24
    2556:	20 f0       	brcs	.+8      	; 0x2560 <sqrt+0x5e>
    2558:	26 17       	cp	r18, r22
    255a:	37 07       	cpc	r19, r23
    255c:	48 07       	cpc	r20, r24
    255e:	30 f4       	brcc	.+12     	; 0x256c <sqrt+0x6a>
    2560:	62 0b       	sbc	r22, r18
    2562:	73 0b       	sbc	r23, r19
    2564:	84 0b       	sbc	r24, r20
    2566:	20 0d       	add	r18, r0
    2568:	31 1d       	adc	r19, r1
    256a:	41 1d       	adc	r20, r1
    256c:	a0 95       	com	r26
    256e:	81 f7       	brne	.-32     	; 0x2550 <sqrt+0x4e>
    2570:	b9 01       	movw	r22, r18
    2572:	84 2f       	mov	r24, r20
    2574:	91 58       	subi	r25, 0x81	; 129
    2576:	88 0f       	add	r24, r24
    2578:	96 95       	lsr	r25
    257a:	87 95       	ror	r24
    257c:	08 95       	ret

0000257e <__fp_mpack>:
    257e:	9f 3f       	cpi	r25, 0xFF	; 255
    2580:	31 f0       	breq	.+12     	; 0x258e <__fp_mpack_finite+0xc>

00002582 <__fp_mpack_finite>:
    2582:	91 50       	subi	r25, 0x01	; 1
    2584:	20 f4       	brcc	.+8      	; 0x258e <__fp_mpack_finite+0xc>
    2586:	87 95       	ror	r24
    2588:	77 95       	ror	r23
    258a:	67 95       	ror	r22
    258c:	b7 95       	ror	r27
    258e:	88 0f       	add	r24, r24
    2590:	91 1d       	adc	r25, r1
    2592:	96 95       	lsr	r25
    2594:	87 95       	ror	r24
    2596:	97 f9       	bld	r25, 7
    2598:	08 95       	ret

0000259a <__fp_norm2>:
    259a:	91 50       	subi	r25, 0x01	; 1
    259c:	50 40       	sbci	r21, 0x00	; 0
    259e:	66 0f       	add	r22, r22
    25a0:	77 1f       	adc	r23, r23
    25a2:	88 1f       	adc	r24, r24
    25a4:	d2 f7       	brpl	.-12     	; 0x259a <__fp_norm2>
    25a6:	08 95       	ret

000025a8 <vfprintf>:
    25a8:	a3 e1       	ldi	r26, 0x13	; 19
    25aa:	b0 e0       	ldi	r27, 0x00	; 0
    25ac:	ea ed       	ldi	r30, 0xDA	; 218
    25ae:	f2 e1       	ldi	r31, 0x12	; 18
    25b0:	0c 94 63 16 	jmp	0x2cc6	; 0x2cc6 <__prologue_saves__>
    25b4:	7c 01       	movw	r14, r24
    25b6:	1b 01       	movw	r2, r22
    25b8:	6a 01       	movw	r12, r20
    25ba:	fc 01       	movw	r30, r24
    25bc:	17 82       	std	Z+7, r1	; 0x07
    25be:	16 82       	std	Z+6, r1	; 0x06
    25c0:	83 81       	ldd	r24, Z+3	; 0x03
    25c2:	81 ff       	sbrs	r24, 1
    25c4:	66 c3       	rjmp	.+1740   	; 0x2c92 <vfprintf+0x6ea>
    25c6:	be 01       	movw	r22, r28
    25c8:	6f 5f       	subi	r22, 0xFF	; 255
    25ca:	7f 4f       	sbci	r23, 0xFF	; 255
    25cc:	4b 01       	movw	r8, r22
    25ce:	f7 01       	movw	r30, r14
    25d0:	93 81       	ldd	r25, Z+3	; 0x03
    25d2:	f1 01       	movw	r30, r2
    25d4:	93 fd       	sbrc	r25, 3
    25d6:	85 91       	lpm	r24, Z+
    25d8:	93 ff       	sbrs	r25, 3
    25da:	81 91       	ld	r24, Z+
    25dc:	1f 01       	movw	r2, r30
    25de:	88 23       	and	r24, r24
    25e0:	09 f4       	brne	.+2      	; 0x25e4 <vfprintf+0x3c>
    25e2:	53 c3       	rjmp	.+1702   	; 0x2c8a <vfprintf+0x6e2>
    25e4:	85 32       	cpi	r24, 0x25	; 37
    25e6:	39 f4       	brne	.+14     	; 0x25f6 <vfprintf+0x4e>
    25e8:	93 fd       	sbrc	r25, 3
    25ea:	85 91       	lpm	r24, Z+
    25ec:	93 ff       	sbrs	r25, 3
    25ee:	81 91       	ld	r24, Z+
    25f0:	1f 01       	movw	r2, r30
    25f2:	85 32       	cpi	r24, 0x25	; 37
    25f4:	39 f4       	brne	.+14     	; 0x2604 <vfprintf+0x5c>
    25f6:	b7 01       	movw	r22, r14
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	0e 94 c7 18 	call	0x318e	; 0x318e <fputc>
    25fe:	56 01       	movw	r10, r12
    2600:	65 01       	movw	r12, r10
    2602:	e5 cf       	rjmp	.-54     	; 0x25ce <vfprintf+0x26>
    2604:	10 e0       	ldi	r17, 0x00	; 0
    2606:	51 2c       	mov	r5, r1
    2608:	20 e0       	ldi	r18, 0x00	; 0
    260a:	20 32       	cpi	r18, 0x20	; 32
    260c:	a0 f4       	brcc	.+40     	; 0x2636 <vfprintf+0x8e>
    260e:	8b 32       	cpi	r24, 0x2B	; 43
    2610:	69 f0       	breq	.+26     	; 0x262c <vfprintf+0x84>
    2612:	30 f4       	brcc	.+12     	; 0x2620 <vfprintf+0x78>
    2614:	80 32       	cpi	r24, 0x20	; 32
    2616:	59 f0       	breq	.+22     	; 0x262e <vfprintf+0x86>
    2618:	83 32       	cpi	r24, 0x23	; 35
    261a:	69 f4       	brne	.+26     	; 0x2636 <vfprintf+0x8e>
    261c:	20 61       	ori	r18, 0x10	; 16
    261e:	2c c0       	rjmp	.+88     	; 0x2678 <vfprintf+0xd0>
    2620:	8d 32       	cpi	r24, 0x2D	; 45
    2622:	39 f0       	breq	.+14     	; 0x2632 <vfprintf+0x8a>
    2624:	80 33       	cpi	r24, 0x30	; 48
    2626:	39 f4       	brne	.+14     	; 0x2636 <vfprintf+0x8e>
    2628:	21 60       	ori	r18, 0x01	; 1
    262a:	26 c0       	rjmp	.+76     	; 0x2678 <vfprintf+0xd0>
    262c:	22 60       	ori	r18, 0x02	; 2
    262e:	24 60       	ori	r18, 0x04	; 4
    2630:	23 c0       	rjmp	.+70     	; 0x2678 <vfprintf+0xd0>
    2632:	28 60       	ori	r18, 0x08	; 8
    2634:	21 c0       	rjmp	.+66     	; 0x2678 <vfprintf+0xd0>
    2636:	27 fd       	sbrc	r18, 7
    2638:	27 c0       	rjmp	.+78     	; 0x2688 <vfprintf+0xe0>
    263a:	30 ed       	ldi	r19, 0xD0	; 208
    263c:	38 0f       	add	r19, r24
    263e:	3a 30       	cpi	r19, 0x0A	; 10
    2640:	78 f4       	brcc	.+30     	; 0x2660 <vfprintf+0xb8>
    2642:	26 ff       	sbrs	r18, 6
    2644:	06 c0       	rjmp	.+12     	; 0x2652 <vfprintf+0xaa>
    2646:	fa e0       	ldi	r31, 0x0A	; 10
    2648:	1f 9f       	mul	r17, r31
    264a:	30 0d       	add	r19, r0
    264c:	11 24       	eor	r1, r1
    264e:	13 2f       	mov	r17, r19
    2650:	13 c0       	rjmp	.+38     	; 0x2678 <vfprintf+0xd0>
    2652:	6a e0       	ldi	r22, 0x0A	; 10
    2654:	56 9e       	mul	r5, r22
    2656:	30 0d       	add	r19, r0
    2658:	11 24       	eor	r1, r1
    265a:	53 2e       	mov	r5, r19
    265c:	20 62       	ori	r18, 0x20	; 32
    265e:	0c c0       	rjmp	.+24     	; 0x2678 <vfprintf+0xd0>
    2660:	8e 32       	cpi	r24, 0x2E	; 46
    2662:	21 f4       	brne	.+8      	; 0x266c <vfprintf+0xc4>
    2664:	26 fd       	sbrc	r18, 6
    2666:	11 c3       	rjmp	.+1570   	; 0x2c8a <vfprintf+0x6e2>
    2668:	20 64       	ori	r18, 0x40	; 64
    266a:	06 c0       	rjmp	.+12     	; 0x2678 <vfprintf+0xd0>
    266c:	8c 36       	cpi	r24, 0x6C	; 108
    266e:	11 f4       	brne	.+4      	; 0x2674 <vfprintf+0xcc>
    2670:	20 68       	ori	r18, 0x80	; 128
    2672:	02 c0       	rjmp	.+4      	; 0x2678 <vfprintf+0xd0>
    2674:	88 36       	cpi	r24, 0x68	; 104
    2676:	41 f4       	brne	.+16     	; 0x2688 <vfprintf+0xe0>
    2678:	f1 01       	movw	r30, r2
    267a:	93 fd       	sbrc	r25, 3
    267c:	85 91       	lpm	r24, Z+
    267e:	93 ff       	sbrs	r25, 3
    2680:	81 91       	ld	r24, Z+
    2682:	1f 01       	movw	r2, r30
    2684:	81 11       	cpse	r24, r1
    2686:	c1 cf       	rjmp	.-126    	; 0x260a <vfprintf+0x62>
    2688:	9b eb       	ldi	r25, 0xBB	; 187
    268a:	98 0f       	add	r25, r24
    268c:	93 30       	cpi	r25, 0x03	; 3
    268e:	18 f4       	brcc	.+6      	; 0x2696 <vfprintf+0xee>
    2690:	20 61       	ori	r18, 0x10	; 16
    2692:	80 5e       	subi	r24, 0xE0	; 224
    2694:	06 c0       	rjmp	.+12     	; 0x26a2 <vfprintf+0xfa>
    2696:	9b e9       	ldi	r25, 0x9B	; 155
    2698:	98 0f       	add	r25, r24
    269a:	93 30       	cpi	r25, 0x03	; 3
    269c:	08 f0       	brcs	.+2      	; 0x26a0 <vfprintf+0xf8>
    269e:	aa c1       	rjmp	.+852    	; 0x29f4 <vfprintf+0x44c>
    26a0:	2f 7e       	andi	r18, 0xEF	; 239
    26a2:	26 ff       	sbrs	r18, 6
    26a4:	16 e0       	ldi	r17, 0x06	; 6
    26a6:	2f 73       	andi	r18, 0x3F	; 63
    26a8:	72 2e       	mov	r7, r18
    26aa:	85 36       	cpi	r24, 0x65	; 101
    26ac:	21 f4       	brne	.+8      	; 0x26b6 <vfprintf+0x10e>
    26ae:	f2 2f       	mov	r31, r18
    26b0:	f0 64       	ori	r31, 0x40	; 64
    26b2:	7f 2e       	mov	r7, r31
    26b4:	08 c0       	rjmp	.+16     	; 0x26c6 <vfprintf+0x11e>
    26b6:	86 36       	cpi	r24, 0x66	; 102
    26b8:	21 f4       	brne	.+8      	; 0x26c2 <vfprintf+0x11a>
    26ba:	62 2f       	mov	r22, r18
    26bc:	60 68       	ori	r22, 0x80	; 128
    26be:	76 2e       	mov	r7, r22
    26c0:	02 c0       	rjmp	.+4      	; 0x26c6 <vfprintf+0x11e>
    26c2:	11 11       	cpse	r17, r1
    26c4:	11 50       	subi	r17, 0x01	; 1
    26c6:	77 fe       	sbrs	r7, 7
    26c8:	07 c0       	rjmp	.+14     	; 0x26d8 <vfprintf+0x130>
    26ca:	1c 33       	cpi	r17, 0x3C	; 60
    26cc:	48 f4       	brcc	.+18     	; 0x26e0 <vfprintf+0x138>
    26ce:	44 24       	eor	r4, r4
    26d0:	43 94       	inc	r4
    26d2:	41 0e       	add	r4, r17
    26d4:	27 e0       	ldi	r18, 0x07	; 7
    26d6:	0b c0       	rjmp	.+22     	; 0x26ee <vfprintf+0x146>
    26d8:	18 30       	cpi	r17, 0x08	; 8
    26da:	30 f4       	brcc	.+12     	; 0x26e8 <vfprintf+0x140>
    26dc:	21 2f       	mov	r18, r17
    26de:	06 c0       	rjmp	.+12     	; 0x26ec <vfprintf+0x144>
    26e0:	27 e0       	ldi	r18, 0x07	; 7
    26e2:	4c e3       	ldi	r20, 0x3C	; 60
    26e4:	44 2e       	mov	r4, r20
    26e6:	03 c0       	rjmp	.+6      	; 0x26ee <vfprintf+0x146>
    26e8:	27 e0       	ldi	r18, 0x07	; 7
    26ea:	17 e0       	ldi	r17, 0x07	; 7
    26ec:	41 2c       	mov	r4, r1
    26ee:	56 01       	movw	r10, r12
    26f0:	74 e0       	ldi	r23, 0x04	; 4
    26f2:	a7 0e       	add	r10, r23
    26f4:	b1 1c       	adc	r11, r1
    26f6:	f6 01       	movw	r30, r12
    26f8:	60 81       	ld	r22, Z
    26fa:	71 81       	ldd	r23, Z+1	; 0x01
    26fc:	82 81       	ldd	r24, Z+2	; 0x02
    26fe:	93 81       	ldd	r25, Z+3	; 0x03
    2700:	04 2d       	mov	r16, r4
    2702:	a4 01       	movw	r20, r8
    2704:	0e 94 d9 17 	call	0x2fb2	; 0x2fb2 <__ftoa_engine>
    2708:	6c 01       	movw	r12, r24
    270a:	09 81       	ldd	r16, Y+1	; 0x01
    270c:	00 ff       	sbrs	r16, 0
    270e:	02 c0       	rjmp	.+4      	; 0x2714 <vfprintf+0x16c>
    2710:	03 ff       	sbrs	r16, 3
    2712:	06 c0       	rjmp	.+12     	; 0x2720 <vfprintf+0x178>
    2714:	71 fc       	sbrc	r7, 1
    2716:	07 c0       	rjmp	.+14     	; 0x2726 <vfprintf+0x17e>
    2718:	72 fc       	sbrc	r7, 2
    271a:	08 c0       	rjmp	.+16     	; 0x272c <vfprintf+0x184>
    271c:	61 2c       	mov	r6, r1
    271e:	08 c0       	rjmp	.+16     	; 0x2730 <vfprintf+0x188>
    2720:	3d e2       	ldi	r19, 0x2D	; 45
    2722:	63 2e       	mov	r6, r19
    2724:	05 c0       	rjmp	.+10     	; 0x2730 <vfprintf+0x188>
    2726:	2b e2       	ldi	r18, 0x2B	; 43
    2728:	62 2e       	mov	r6, r18
    272a:	02 c0       	rjmp	.+4      	; 0x2730 <vfprintf+0x188>
    272c:	90 e2       	ldi	r25, 0x20	; 32
    272e:	69 2e       	mov	r6, r25
    2730:	80 2f       	mov	r24, r16
    2732:	8c 70       	andi	r24, 0x0C	; 12
    2734:	99 f1       	breq	.+102    	; 0x279c <vfprintf+0x1f4>
    2736:	66 20       	and	r6, r6
    2738:	11 f0       	breq	.+4      	; 0x273e <vfprintf+0x196>
    273a:	84 e0       	ldi	r24, 0x04	; 4
    273c:	01 c0       	rjmp	.+2      	; 0x2740 <vfprintf+0x198>
    273e:	83 e0       	ldi	r24, 0x03	; 3
    2740:	85 15       	cp	r24, r5
    2742:	10 f0       	brcs	.+4      	; 0x2748 <vfprintf+0x1a0>
    2744:	51 2c       	mov	r5, r1
    2746:	0b c0       	rjmp	.+22     	; 0x275e <vfprintf+0x1b6>
    2748:	58 1a       	sub	r5, r24
    274a:	73 fc       	sbrc	r7, 3
    274c:	08 c0       	rjmp	.+16     	; 0x275e <vfprintf+0x1b6>
    274e:	b7 01       	movw	r22, r14
    2750:	80 e2       	ldi	r24, 0x20	; 32
    2752:	90 e0       	ldi	r25, 0x00	; 0
    2754:	0e 94 c7 18 	call	0x318e	; 0x318e <fputc>
    2758:	5a 94       	dec	r5
    275a:	c9 f7       	brne	.-14     	; 0x274e <vfprintf+0x1a6>
    275c:	f3 cf       	rjmp	.-26     	; 0x2744 <vfprintf+0x19c>
    275e:	66 20       	and	r6, r6
    2760:	29 f0       	breq	.+10     	; 0x276c <vfprintf+0x1c4>
    2762:	b7 01       	movw	r22, r14
    2764:	86 2d       	mov	r24, r6
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	0e 94 c7 18 	call	0x318e	; 0x318e <fputc>
    276c:	03 fd       	sbrc	r16, 3
    276e:	03 c0       	rjmp	.+6      	; 0x2776 <vfprintf+0x1ce>
    2770:	02 eb       	ldi	r16, 0xB2	; 178
    2772:	10 e0       	ldi	r17, 0x00	; 0
    2774:	02 c0       	rjmp	.+4      	; 0x277a <vfprintf+0x1d2>
    2776:	0e ea       	ldi	r16, 0xAE	; 174
    2778:	10 e0       	ldi	r17, 0x00	; 0
    277a:	f7 2d       	mov	r31, r7
    277c:	f0 71       	andi	r31, 0x10	; 16
    277e:	7f 2e       	mov	r7, r31
    2780:	f8 01       	movw	r30, r16
    2782:	84 91       	lpm	r24, Z
    2784:	88 23       	and	r24, r24
    2786:	09 f4       	brne	.+2      	; 0x278a <vfprintf+0x1e2>
    2788:	76 c2       	rjmp	.+1260   	; 0x2c76 <vfprintf+0x6ce>
    278a:	71 10       	cpse	r7, r1
    278c:	80 52       	subi	r24, 0x20	; 32
    278e:	b7 01       	movw	r22, r14
    2790:	90 e0       	ldi	r25, 0x00	; 0
    2792:	0e 94 c7 18 	call	0x318e	; 0x318e <fputc>
    2796:	0f 5f       	subi	r16, 0xFF	; 255
    2798:	1f 4f       	sbci	r17, 0xFF	; 255
    279a:	f2 cf       	rjmp	.-28     	; 0x2780 <vfprintf+0x1d8>
    279c:	77 fe       	sbrs	r7, 7
    279e:	0f c0       	rjmp	.+30     	; 0x27be <vfprintf+0x216>
    27a0:	4c 0c       	add	r4, r12
    27a2:	04 ff       	sbrs	r16, 4
    27a4:	04 c0       	rjmp	.+8      	; 0x27ae <vfprintf+0x206>
    27a6:	8a 81       	ldd	r24, Y+2	; 0x02
    27a8:	81 33       	cpi	r24, 0x31	; 49
    27aa:	09 f4       	brne	.+2      	; 0x27ae <vfprintf+0x206>
    27ac:	4a 94       	dec	r4
    27ae:	14 14       	cp	r1, r4
    27b0:	74 f5       	brge	.+92     	; 0x280e <vfprintf+0x266>
    27b2:	f8 e0       	ldi	r31, 0x08	; 8
    27b4:	f4 15       	cp	r31, r4
    27b6:	78 f5       	brcc	.+94     	; 0x2816 <vfprintf+0x26e>
    27b8:	88 e0       	ldi	r24, 0x08	; 8
    27ba:	48 2e       	mov	r4, r24
    27bc:	2c c0       	rjmp	.+88     	; 0x2816 <vfprintf+0x26e>
    27be:	76 fc       	sbrc	r7, 6
    27c0:	2a c0       	rjmp	.+84     	; 0x2816 <vfprintf+0x26e>
    27c2:	81 2f       	mov	r24, r17
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	8c 15       	cp	r24, r12
    27c8:	9d 05       	cpc	r25, r13
    27ca:	9c f0       	brlt	.+38     	; 0x27f2 <vfprintf+0x24a>
    27cc:	6c ef       	ldi	r22, 0xFC	; 252
    27ce:	c6 16       	cp	r12, r22
    27d0:	6f ef       	ldi	r22, 0xFF	; 255
    27d2:	d6 06       	cpc	r13, r22
    27d4:	74 f0       	brlt	.+28     	; 0x27f2 <vfprintf+0x24a>
    27d6:	77 2d       	mov	r23, r7
    27d8:	70 68       	ori	r23, 0x80	; 128
    27da:	77 2e       	mov	r7, r23
    27dc:	0a c0       	rjmp	.+20     	; 0x27f2 <vfprintf+0x24a>
    27de:	e2 e0       	ldi	r30, 0x02	; 2
    27e0:	f0 e0       	ldi	r31, 0x00	; 0
    27e2:	ec 0f       	add	r30, r28
    27e4:	fd 1f       	adc	r31, r29
    27e6:	e1 0f       	add	r30, r17
    27e8:	f1 1d       	adc	r31, r1
    27ea:	80 81       	ld	r24, Z
    27ec:	80 33       	cpi	r24, 0x30	; 48
    27ee:	19 f4       	brne	.+6      	; 0x27f6 <vfprintf+0x24e>
    27f0:	11 50       	subi	r17, 0x01	; 1
    27f2:	11 11       	cpse	r17, r1
    27f4:	f4 cf       	rjmp	.-24     	; 0x27de <vfprintf+0x236>
    27f6:	77 fe       	sbrs	r7, 7
    27f8:	0e c0       	rjmp	.+28     	; 0x2816 <vfprintf+0x26e>
    27fa:	44 24       	eor	r4, r4
    27fc:	43 94       	inc	r4
    27fe:	41 0e       	add	r4, r17
    2800:	81 2f       	mov	r24, r17
    2802:	90 e0       	ldi	r25, 0x00	; 0
    2804:	c8 16       	cp	r12, r24
    2806:	d9 06       	cpc	r13, r25
    2808:	2c f4       	brge	.+10     	; 0x2814 <vfprintf+0x26c>
    280a:	1c 19       	sub	r17, r12
    280c:	04 c0       	rjmp	.+8      	; 0x2816 <vfprintf+0x26e>
    280e:	44 24       	eor	r4, r4
    2810:	43 94       	inc	r4
    2812:	01 c0       	rjmp	.+2      	; 0x2816 <vfprintf+0x26e>
    2814:	10 e0       	ldi	r17, 0x00	; 0
    2816:	77 fe       	sbrs	r7, 7
    2818:	07 c0       	rjmp	.+14     	; 0x2828 <vfprintf+0x280>
    281a:	1c 14       	cp	r1, r12
    281c:	1d 04       	cpc	r1, r13
    281e:	3c f4       	brge	.+14     	; 0x282e <vfprintf+0x286>
    2820:	96 01       	movw	r18, r12
    2822:	2f 5f       	subi	r18, 0xFF	; 255
    2824:	3f 4f       	sbci	r19, 0xFF	; 255
    2826:	05 c0       	rjmp	.+10     	; 0x2832 <vfprintf+0x28a>
    2828:	25 e0       	ldi	r18, 0x05	; 5
    282a:	30 e0       	ldi	r19, 0x00	; 0
    282c:	02 c0       	rjmp	.+4      	; 0x2832 <vfprintf+0x28a>
    282e:	21 e0       	ldi	r18, 0x01	; 1
    2830:	30 e0       	ldi	r19, 0x00	; 0
    2832:	66 20       	and	r6, r6
    2834:	11 f0       	breq	.+4      	; 0x283a <vfprintf+0x292>
    2836:	2f 5f       	subi	r18, 0xFF	; 255
    2838:	3f 4f       	sbci	r19, 0xFF	; 255
    283a:	11 23       	and	r17, r17
    283c:	31 f0       	breq	.+12     	; 0x284a <vfprintf+0x2a2>
    283e:	41 2f       	mov	r20, r17
    2840:	50 e0       	ldi	r21, 0x00	; 0
    2842:	4f 5f       	subi	r20, 0xFF	; 255
    2844:	5f 4f       	sbci	r21, 0xFF	; 255
    2846:	24 0f       	add	r18, r20
    2848:	35 1f       	adc	r19, r21
    284a:	45 2d       	mov	r20, r5
    284c:	50 e0       	ldi	r21, 0x00	; 0
    284e:	24 17       	cp	r18, r20
    2850:	35 07       	cpc	r19, r21
    2852:	14 f4       	brge	.+4      	; 0x2858 <vfprintf+0x2b0>
    2854:	52 1a       	sub	r5, r18
    2856:	01 c0       	rjmp	.+2      	; 0x285a <vfprintf+0x2b2>
    2858:	51 2c       	mov	r5, r1
    285a:	87 2d       	mov	r24, r7
    285c:	89 70       	andi	r24, 0x09	; 9
    285e:	49 f4       	brne	.+18     	; 0x2872 <vfprintf+0x2ca>
    2860:	55 20       	and	r5, r5
    2862:	39 f0       	breq	.+14     	; 0x2872 <vfprintf+0x2ca>
    2864:	b7 01       	movw	r22, r14
    2866:	80 e2       	ldi	r24, 0x20	; 32
    2868:	90 e0       	ldi	r25, 0x00	; 0
    286a:	0e 94 c7 18 	call	0x318e	; 0x318e <fputc>
    286e:	5a 94       	dec	r5
    2870:	f7 cf       	rjmp	.-18     	; 0x2860 <vfprintf+0x2b8>
    2872:	66 20       	and	r6, r6
    2874:	29 f0       	breq	.+10     	; 0x2880 <vfprintf+0x2d8>
    2876:	b7 01       	movw	r22, r14
    2878:	86 2d       	mov	r24, r6
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	0e 94 c7 18 	call	0x318e	; 0x318e <fputc>
    2880:	73 fc       	sbrc	r7, 3
    2882:	09 c0       	rjmp	.+18     	; 0x2896 <vfprintf+0x2ee>
    2884:	55 20       	and	r5, r5
    2886:	39 f0       	breq	.+14     	; 0x2896 <vfprintf+0x2ee>
    2888:	b7 01       	movw	r22, r14
    288a:	80 e3       	ldi	r24, 0x30	; 48
    288c:	90 e0       	ldi	r25, 0x00	; 0
    288e:	0e 94 c7 18 	call	0x318e	; 0x318e <fputc>
    2892:	5a 94       	dec	r5
    2894:	f7 cf       	rjmp	.-18     	; 0x2884 <vfprintf+0x2dc>
    2896:	77 fe       	sbrs	r7, 7
    2898:	5f c0       	rjmp	.+190    	; 0x2958 <vfprintf+0x3b0>
    289a:	9c 2d       	mov	r25, r12
    289c:	8d 2d       	mov	r24, r13
    289e:	d7 fe       	sbrs	r13, 7
    28a0:	02 c0       	rjmp	.+4      	; 0x28a6 <vfprintf+0x2fe>
    28a2:	90 e0       	ldi	r25, 0x00	; 0
    28a4:	80 e0       	ldi	r24, 0x00	; 0
    28a6:	69 2e       	mov	r6, r25
    28a8:	78 2e       	mov	r7, r24
    28aa:	40 e0       	ldi	r20, 0x00	; 0
    28ac:	50 e0       	ldi	r21, 0x00	; 0
    28ae:	c6 01       	movw	r24, r12
    28b0:	84 19       	sub	r24, r4
    28b2:	91 09       	sbc	r25, r1
    28b4:	9d 87       	std	Y+13, r25	; 0x0d
    28b6:	8c 87       	std	Y+12, r24	; 0x0c
    28b8:	96 01       	movw	r18, r12
    28ba:	26 19       	sub	r18, r6
    28bc:	37 09       	sbc	r19, r7
    28be:	28 0d       	add	r18, r8
    28c0:	39 1d       	adc	r19, r9
    28c2:	81 2f       	mov	r24, r17
    28c4:	90 e0       	ldi	r25, 0x00	; 0
    28c6:	ee 27       	eor	r30, r30
    28c8:	ff 27       	eor	r31, r31
    28ca:	e8 1b       	sub	r30, r24
    28cc:	f9 0b       	sbc	r31, r25
    28ce:	ff 87       	std	Y+15, r31	; 0x0f
    28d0:	ee 87       	std	Y+14, r30	; 0x0e
    28d2:	ff ef       	ldi	r31, 0xFF	; 255
    28d4:	6f 16       	cp	r6, r31
    28d6:	7f 06       	cpc	r7, r31
    28d8:	69 f4       	brne	.+26     	; 0x28f4 <vfprintf+0x34c>
    28da:	b7 01       	movw	r22, r14
    28dc:	8e e2       	ldi	r24, 0x2E	; 46
    28de:	90 e0       	ldi	r25, 0x00	; 0
    28e0:	2b 8b       	std	Y+19, r18	; 0x13
    28e2:	3a 8b       	std	Y+18, r19	; 0x12
    28e4:	48 8b       	std	Y+16, r20	; 0x10
    28e6:	59 8b       	std	Y+17, r21	; 0x11
    28e8:	0e 94 c7 18 	call	0x318e	; 0x318e <fputc>
    28ec:	59 89       	ldd	r21, Y+17	; 0x11
    28ee:	48 89       	ldd	r20, Y+16	; 0x10
    28f0:	3a 89       	ldd	r19, Y+18	; 0x12
    28f2:	2b 89       	ldd	r18, Y+19	; 0x13
    28f4:	c6 14       	cp	r12, r6
    28f6:	d7 04       	cpc	r13, r7
    28f8:	54 f0       	brlt	.+20     	; 0x290e <vfprintf+0x366>
    28fa:	6c 85       	ldd	r22, Y+12	; 0x0c
    28fc:	7d 85       	ldd	r23, Y+13	; 0x0d
    28fe:	66 15       	cp	r22, r6
    2900:	77 05       	cpc	r23, r7
    2902:	2c f4       	brge	.+10     	; 0x290e <vfprintf+0x366>
    2904:	f9 01       	movw	r30, r18
    2906:	e4 0f       	add	r30, r20
    2908:	f5 1f       	adc	r31, r21
    290a:	81 81       	ldd	r24, Z+1	; 0x01
    290c:	01 c0       	rjmp	.+2      	; 0x2910 <vfprintf+0x368>
    290e:	80 e3       	ldi	r24, 0x30	; 48
    2910:	71 e0       	ldi	r23, 0x01	; 1
    2912:	67 1a       	sub	r6, r23
    2914:	71 08       	sbc	r7, r1
    2916:	4f 5f       	subi	r20, 0xFF	; 255
    2918:	5f 4f       	sbci	r21, 0xFF	; 255
    291a:	ee 85       	ldd	r30, Y+14	; 0x0e
    291c:	ff 85       	ldd	r31, Y+15	; 0x0f
    291e:	6e 16       	cp	r6, r30
    2920:	7f 06       	cpc	r7, r31
    2922:	6c f0       	brlt	.+26     	; 0x293e <vfprintf+0x396>
    2924:	b7 01       	movw	r22, r14
    2926:	90 e0       	ldi	r25, 0x00	; 0
    2928:	2b 8b       	std	Y+19, r18	; 0x13
    292a:	3a 8b       	std	Y+18, r19	; 0x12
    292c:	48 8b       	std	Y+16, r20	; 0x10
    292e:	59 8b       	std	Y+17, r21	; 0x11
    2930:	0e 94 c7 18 	call	0x318e	; 0x318e <fputc>
    2934:	2b 89       	ldd	r18, Y+19	; 0x13
    2936:	3a 89       	ldd	r19, Y+18	; 0x12
    2938:	48 89       	ldd	r20, Y+16	; 0x10
    293a:	59 89       	ldd	r21, Y+17	; 0x11
    293c:	ca cf       	rjmp	.-108    	; 0x28d2 <vfprintf+0x32a>
    293e:	6c 14       	cp	r6, r12
    2940:	7d 04       	cpc	r7, r13
    2942:	39 f4       	brne	.+14     	; 0x2952 <vfprintf+0x3aa>
    2944:	9a 81       	ldd	r25, Y+2	; 0x02
    2946:	96 33       	cpi	r25, 0x36	; 54
    2948:	18 f4       	brcc	.+6      	; 0x2950 <vfprintf+0x3a8>
    294a:	95 33       	cpi	r25, 0x35	; 53
    294c:	11 f4       	brne	.+4      	; 0x2952 <vfprintf+0x3aa>
    294e:	04 ff       	sbrs	r16, 4
    2950:	81 e3       	ldi	r24, 0x31	; 49
    2952:	b7 01       	movw	r22, r14
    2954:	90 e0       	ldi	r25, 0x00	; 0
    2956:	4b c0       	rjmp	.+150    	; 0x29ee <vfprintf+0x446>
    2958:	8a 81       	ldd	r24, Y+2	; 0x02
    295a:	81 33       	cpi	r24, 0x31	; 49
    295c:	09 f0       	breq	.+2      	; 0x2960 <vfprintf+0x3b8>
    295e:	0f 7e       	andi	r16, 0xEF	; 239
    2960:	b7 01       	movw	r22, r14
    2962:	90 e0       	ldi	r25, 0x00	; 0
    2964:	0e 94 c7 18 	call	0x318e	; 0x318e <fputc>
    2968:	11 11       	cpse	r17, r1
    296a:	05 c0       	rjmp	.+10     	; 0x2976 <vfprintf+0x3ce>
    296c:	74 fe       	sbrs	r7, 4
    296e:	18 c0       	rjmp	.+48     	; 0x29a0 <vfprintf+0x3f8>
    2970:	85 e4       	ldi	r24, 0x45	; 69
    2972:	90 e0       	ldi	r25, 0x00	; 0
    2974:	17 c0       	rjmp	.+46     	; 0x29a4 <vfprintf+0x3fc>
    2976:	b7 01       	movw	r22, r14
    2978:	8e e2       	ldi	r24, 0x2E	; 46
    297a:	90 e0       	ldi	r25, 0x00	; 0
    297c:	0e 94 c7 18 	call	0x318e	; 0x318e <fputc>
    2980:	82 e0       	ldi	r24, 0x02	; 2
    2982:	66 24       	eor	r6, r6
    2984:	63 94       	inc	r6
    2986:	68 0e       	add	r6, r24
    2988:	f4 01       	movw	r30, r8
    298a:	e8 0f       	add	r30, r24
    298c:	f1 1d       	adc	r31, r1
    298e:	80 81       	ld	r24, Z
    2990:	b7 01       	movw	r22, r14
    2992:	90 e0       	ldi	r25, 0x00	; 0
    2994:	0e 94 c7 18 	call	0x318e	; 0x318e <fputc>
    2998:	11 50       	subi	r17, 0x01	; 1
    299a:	41 f3       	breq	.-48     	; 0x296c <vfprintf+0x3c4>
    299c:	86 2d       	mov	r24, r6
    299e:	f1 cf       	rjmp	.-30     	; 0x2982 <vfprintf+0x3da>
    29a0:	85 e6       	ldi	r24, 0x65	; 101
    29a2:	90 e0       	ldi	r25, 0x00	; 0
    29a4:	b7 01       	movw	r22, r14
    29a6:	0e 94 c7 18 	call	0x318e	; 0x318e <fputc>
    29aa:	d7 fc       	sbrc	r13, 7
    29ac:	05 c0       	rjmp	.+10     	; 0x29b8 <vfprintf+0x410>
    29ae:	c1 14       	cp	r12, r1
    29b0:	d1 04       	cpc	r13, r1
    29b2:	39 f4       	brne	.+14     	; 0x29c2 <vfprintf+0x41a>
    29b4:	04 ff       	sbrs	r16, 4
    29b6:	05 c0       	rjmp	.+10     	; 0x29c2 <vfprintf+0x41a>
    29b8:	d1 94       	neg	r13
    29ba:	c1 94       	neg	r12
    29bc:	d1 08       	sbc	r13, r1
    29be:	8d e2       	ldi	r24, 0x2D	; 45
    29c0:	01 c0       	rjmp	.+2      	; 0x29c4 <vfprintf+0x41c>
    29c2:	8b e2       	ldi	r24, 0x2B	; 43
    29c4:	b7 01       	movw	r22, r14
    29c6:	90 e0       	ldi	r25, 0x00	; 0
    29c8:	0e 94 c7 18 	call	0x318e	; 0x318e <fputc>
    29cc:	80 e3       	ldi	r24, 0x30	; 48
    29ce:	6a e0       	ldi	r22, 0x0A	; 10
    29d0:	c6 16       	cp	r12, r22
    29d2:	d1 04       	cpc	r13, r1
    29d4:	2c f0       	brlt	.+10     	; 0x29e0 <vfprintf+0x438>
    29d6:	8f 5f       	subi	r24, 0xFF	; 255
    29d8:	fa e0       	ldi	r31, 0x0A	; 10
    29da:	cf 1a       	sub	r12, r31
    29dc:	d1 08       	sbc	r13, r1
    29de:	f7 cf       	rjmp	.-18     	; 0x29ce <vfprintf+0x426>
    29e0:	b7 01       	movw	r22, r14
    29e2:	90 e0       	ldi	r25, 0x00	; 0
    29e4:	0e 94 c7 18 	call	0x318e	; 0x318e <fputc>
    29e8:	b7 01       	movw	r22, r14
    29ea:	c6 01       	movw	r24, r12
    29ec:	c0 96       	adiw	r24, 0x30	; 48
    29ee:	0e 94 c7 18 	call	0x318e	; 0x318e <fputc>
    29f2:	41 c1       	rjmp	.+642    	; 0x2c76 <vfprintf+0x6ce>
    29f4:	83 36       	cpi	r24, 0x63	; 99
    29f6:	31 f0       	breq	.+12     	; 0x2a04 <vfprintf+0x45c>
    29f8:	83 37       	cpi	r24, 0x73	; 115
    29fa:	79 f0       	breq	.+30     	; 0x2a1a <vfprintf+0x472>
    29fc:	83 35       	cpi	r24, 0x53	; 83
    29fe:	09 f0       	breq	.+2      	; 0x2a02 <vfprintf+0x45a>
    2a00:	58 c0       	rjmp	.+176    	; 0x2ab2 <vfprintf+0x50a>
    2a02:	21 c0       	rjmp	.+66     	; 0x2a46 <vfprintf+0x49e>
    2a04:	56 01       	movw	r10, r12
    2a06:	72 e0       	ldi	r23, 0x02	; 2
    2a08:	a7 0e       	add	r10, r23
    2a0a:	b1 1c       	adc	r11, r1
    2a0c:	f6 01       	movw	r30, r12
    2a0e:	80 81       	ld	r24, Z
    2a10:	89 83       	std	Y+1, r24	; 0x01
    2a12:	01 e0       	ldi	r16, 0x01	; 1
    2a14:	10 e0       	ldi	r17, 0x00	; 0
    2a16:	64 01       	movw	r12, r8
    2a18:	14 c0       	rjmp	.+40     	; 0x2a42 <vfprintf+0x49a>
    2a1a:	56 01       	movw	r10, r12
    2a1c:	f2 e0       	ldi	r31, 0x02	; 2
    2a1e:	af 0e       	add	r10, r31
    2a20:	b1 1c       	adc	r11, r1
    2a22:	f6 01       	movw	r30, r12
    2a24:	c0 80       	ld	r12, Z
    2a26:	d1 80       	ldd	r13, Z+1	; 0x01
    2a28:	26 ff       	sbrs	r18, 6
    2a2a:	03 c0       	rjmp	.+6      	; 0x2a32 <vfprintf+0x48a>
    2a2c:	61 2f       	mov	r22, r17
    2a2e:	70 e0       	ldi	r23, 0x00	; 0
    2a30:	02 c0       	rjmp	.+4      	; 0x2a36 <vfprintf+0x48e>
    2a32:	6f ef       	ldi	r22, 0xFF	; 255
    2a34:	7f ef       	ldi	r23, 0xFF	; 255
    2a36:	c6 01       	movw	r24, r12
    2a38:	2b 8b       	std	Y+19, r18	; 0x13
    2a3a:	0e 94 bc 18 	call	0x3178	; 0x3178 <strnlen>
    2a3e:	8c 01       	movw	r16, r24
    2a40:	2b 89       	ldd	r18, Y+19	; 0x13
    2a42:	2f 77       	andi	r18, 0x7F	; 127
    2a44:	15 c0       	rjmp	.+42     	; 0x2a70 <vfprintf+0x4c8>
    2a46:	56 01       	movw	r10, r12
    2a48:	f2 e0       	ldi	r31, 0x02	; 2
    2a4a:	af 0e       	add	r10, r31
    2a4c:	b1 1c       	adc	r11, r1
    2a4e:	f6 01       	movw	r30, r12
    2a50:	c0 80       	ld	r12, Z
    2a52:	d1 80       	ldd	r13, Z+1	; 0x01
    2a54:	26 ff       	sbrs	r18, 6
    2a56:	03 c0       	rjmp	.+6      	; 0x2a5e <vfprintf+0x4b6>
    2a58:	61 2f       	mov	r22, r17
    2a5a:	70 e0       	ldi	r23, 0x00	; 0
    2a5c:	02 c0       	rjmp	.+4      	; 0x2a62 <vfprintf+0x4ba>
    2a5e:	6f ef       	ldi	r22, 0xFF	; 255
    2a60:	7f ef       	ldi	r23, 0xFF	; 255
    2a62:	c6 01       	movw	r24, r12
    2a64:	2b 8b       	std	Y+19, r18	; 0x13
    2a66:	0e 94 b1 18 	call	0x3162	; 0x3162 <strnlen_P>
    2a6a:	8c 01       	movw	r16, r24
    2a6c:	2b 89       	ldd	r18, Y+19	; 0x13
    2a6e:	20 68       	ori	r18, 0x80	; 128
    2a70:	72 2e       	mov	r7, r18
    2a72:	23 fd       	sbrc	r18, 3
    2a74:	1a c0       	rjmp	.+52     	; 0x2aaa <vfprintf+0x502>
    2a76:	85 2d       	mov	r24, r5
    2a78:	90 e0       	ldi	r25, 0x00	; 0
    2a7a:	08 17       	cp	r16, r24
    2a7c:	19 07       	cpc	r17, r25
    2a7e:	a8 f4       	brcc	.+42     	; 0x2aaa <vfprintf+0x502>
    2a80:	b7 01       	movw	r22, r14
    2a82:	80 e2       	ldi	r24, 0x20	; 32
    2a84:	90 e0       	ldi	r25, 0x00	; 0
    2a86:	0e 94 c7 18 	call	0x318e	; 0x318e <fputc>
    2a8a:	5a 94       	dec	r5
    2a8c:	f4 cf       	rjmp	.-24     	; 0x2a76 <vfprintf+0x4ce>
    2a8e:	f6 01       	movw	r30, r12
    2a90:	77 fc       	sbrc	r7, 7
    2a92:	85 91       	lpm	r24, Z+
    2a94:	77 fe       	sbrs	r7, 7
    2a96:	81 91       	ld	r24, Z+
    2a98:	6f 01       	movw	r12, r30
    2a9a:	b7 01       	movw	r22, r14
    2a9c:	90 e0       	ldi	r25, 0x00	; 0
    2a9e:	0e 94 c7 18 	call	0x318e	; 0x318e <fputc>
    2aa2:	51 10       	cpse	r5, r1
    2aa4:	5a 94       	dec	r5
    2aa6:	01 50       	subi	r16, 0x01	; 1
    2aa8:	11 09       	sbc	r17, r1
    2aaa:	01 15       	cp	r16, r1
    2aac:	11 05       	cpc	r17, r1
    2aae:	79 f7       	brne	.-34     	; 0x2a8e <vfprintf+0x4e6>
    2ab0:	e2 c0       	rjmp	.+452    	; 0x2c76 <vfprintf+0x6ce>
    2ab2:	84 36       	cpi	r24, 0x64	; 100
    2ab4:	11 f0       	breq	.+4      	; 0x2aba <vfprintf+0x512>
    2ab6:	89 36       	cpi	r24, 0x69	; 105
    2ab8:	51 f5       	brne	.+84     	; 0x2b0e <vfprintf+0x566>
    2aba:	56 01       	movw	r10, r12
    2abc:	27 ff       	sbrs	r18, 7
    2abe:	09 c0       	rjmp	.+18     	; 0x2ad2 <vfprintf+0x52a>
    2ac0:	f4 e0       	ldi	r31, 0x04	; 4
    2ac2:	af 0e       	add	r10, r31
    2ac4:	b1 1c       	adc	r11, r1
    2ac6:	f6 01       	movw	r30, r12
    2ac8:	60 81       	ld	r22, Z
    2aca:	71 81       	ldd	r23, Z+1	; 0x01
    2acc:	82 81       	ldd	r24, Z+2	; 0x02
    2ace:	93 81       	ldd	r25, Z+3	; 0x03
    2ad0:	0a c0       	rjmp	.+20     	; 0x2ae6 <vfprintf+0x53e>
    2ad2:	f2 e0       	ldi	r31, 0x02	; 2
    2ad4:	af 0e       	add	r10, r31
    2ad6:	b1 1c       	adc	r11, r1
    2ad8:	f6 01       	movw	r30, r12
    2ada:	60 81       	ld	r22, Z
    2adc:	71 81       	ldd	r23, Z+1	; 0x01
    2ade:	88 27       	eor	r24, r24
    2ae0:	77 fd       	sbrc	r23, 7
    2ae2:	80 95       	com	r24
    2ae4:	98 2f       	mov	r25, r24
    2ae6:	02 2f       	mov	r16, r18
    2ae8:	0f 76       	andi	r16, 0x6F	; 111
    2aea:	97 ff       	sbrs	r25, 7
    2aec:	08 c0       	rjmp	.+16     	; 0x2afe <vfprintf+0x556>
    2aee:	90 95       	com	r25
    2af0:	80 95       	com	r24
    2af2:	70 95       	com	r23
    2af4:	61 95       	neg	r22
    2af6:	7f 4f       	sbci	r23, 0xFF	; 255
    2af8:	8f 4f       	sbci	r24, 0xFF	; 255
    2afa:	9f 4f       	sbci	r25, 0xFF	; 255
    2afc:	00 68       	ori	r16, 0x80	; 128
    2afe:	2a e0       	ldi	r18, 0x0A	; 10
    2b00:	30 e0       	ldi	r19, 0x00	; 0
    2b02:	a4 01       	movw	r20, r8
    2b04:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <__ultoa_invert>
    2b08:	c8 2e       	mov	r12, r24
    2b0a:	c8 18       	sub	r12, r8
    2b0c:	3e c0       	rjmp	.+124    	; 0x2b8a <vfprintf+0x5e2>
    2b0e:	02 2f       	mov	r16, r18
    2b10:	85 37       	cpi	r24, 0x75	; 117
    2b12:	21 f4       	brne	.+8      	; 0x2b1c <vfprintf+0x574>
    2b14:	0f 7e       	andi	r16, 0xEF	; 239
    2b16:	2a e0       	ldi	r18, 0x0A	; 10
    2b18:	30 e0       	ldi	r19, 0x00	; 0
    2b1a:	1d c0       	rjmp	.+58     	; 0x2b56 <vfprintf+0x5ae>
    2b1c:	09 7f       	andi	r16, 0xF9	; 249
    2b1e:	8f 36       	cpi	r24, 0x6F	; 111
    2b20:	91 f0       	breq	.+36     	; 0x2b46 <vfprintf+0x59e>
    2b22:	18 f4       	brcc	.+6      	; 0x2b2a <vfprintf+0x582>
    2b24:	88 35       	cpi	r24, 0x58	; 88
    2b26:	59 f0       	breq	.+22     	; 0x2b3e <vfprintf+0x596>
    2b28:	b0 c0       	rjmp	.+352    	; 0x2c8a <vfprintf+0x6e2>
    2b2a:	80 37       	cpi	r24, 0x70	; 112
    2b2c:	19 f0       	breq	.+6      	; 0x2b34 <vfprintf+0x58c>
    2b2e:	88 37       	cpi	r24, 0x78	; 120
    2b30:	11 f0       	breq	.+4      	; 0x2b36 <vfprintf+0x58e>
    2b32:	ab c0       	rjmp	.+342    	; 0x2c8a <vfprintf+0x6e2>
    2b34:	00 61       	ori	r16, 0x10	; 16
    2b36:	04 ff       	sbrs	r16, 4
    2b38:	09 c0       	rjmp	.+18     	; 0x2b4c <vfprintf+0x5a4>
    2b3a:	04 60       	ori	r16, 0x04	; 4
    2b3c:	07 c0       	rjmp	.+14     	; 0x2b4c <vfprintf+0x5a4>
    2b3e:	24 ff       	sbrs	r18, 4
    2b40:	08 c0       	rjmp	.+16     	; 0x2b52 <vfprintf+0x5aa>
    2b42:	06 60       	ori	r16, 0x06	; 6
    2b44:	06 c0       	rjmp	.+12     	; 0x2b52 <vfprintf+0x5aa>
    2b46:	28 e0       	ldi	r18, 0x08	; 8
    2b48:	30 e0       	ldi	r19, 0x00	; 0
    2b4a:	05 c0       	rjmp	.+10     	; 0x2b56 <vfprintf+0x5ae>
    2b4c:	20 e1       	ldi	r18, 0x10	; 16
    2b4e:	30 e0       	ldi	r19, 0x00	; 0
    2b50:	02 c0       	rjmp	.+4      	; 0x2b56 <vfprintf+0x5ae>
    2b52:	20 e1       	ldi	r18, 0x10	; 16
    2b54:	32 e0       	ldi	r19, 0x02	; 2
    2b56:	56 01       	movw	r10, r12
    2b58:	07 ff       	sbrs	r16, 7
    2b5a:	09 c0       	rjmp	.+18     	; 0x2b6e <vfprintf+0x5c6>
    2b5c:	f4 e0       	ldi	r31, 0x04	; 4
    2b5e:	af 0e       	add	r10, r31
    2b60:	b1 1c       	adc	r11, r1
    2b62:	f6 01       	movw	r30, r12
    2b64:	60 81       	ld	r22, Z
    2b66:	71 81       	ldd	r23, Z+1	; 0x01
    2b68:	82 81       	ldd	r24, Z+2	; 0x02
    2b6a:	93 81       	ldd	r25, Z+3	; 0x03
    2b6c:	08 c0       	rjmp	.+16     	; 0x2b7e <vfprintf+0x5d6>
    2b6e:	f2 e0       	ldi	r31, 0x02	; 2
    2b70:	af 0e       	add	r10, r31
    2b72:	b1 1c       	adc	r11, r1
    2b74:	f6 01       	movw	r30, r12
    2b76:	60 81       	ld	r22, Z
    2b78:	71 81       	ldd	r23, Z+1	; 0x01
    2b7a:	80 e0       	ldi	r24, 0x00	; 0
    2b7c:	90 e0       	ldi	r25, 0x00	; 0
    2b7e:	a4 01       	movw	r20, r8
    2b80:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <__ultoa_invert>
    2b84:	c8 2e       	mov	r12, r24
    2b86:	c8 18       	sub	r12, r8
    2b88:	0f 77       	andi	r16, 0x7F	; 127
    2b8a:	06 ff       	sbrs	r16, 6
    2b8c:	0b c0       	rjmp	.+22     	; 0x2ba4 <vfprintf+0x5fc>
    2b8e:	20 2f       	mov	r18, r16
    2b90:	2e 7f       	andi	r18, 0xFE	; 254
    2b92:	c1 16       	cp	r12, r17
    2b94:	50 f4       	brcc	.+20     	; 0x2baa <vfprintf+0x602>
    2b96:	04 ff       	sbrs	r16, 4
    2b98:	0a c0       	rjmp	.+20     	; 0x2bae <vfprintf+0x606>
    2b9a:	02 fd       	sbrc	r16, 2
    2b9c:	08 c0       	rjmp	.+16     	; 0x2bae <vfprintf+0x606>
    2b9e:	20 2f       	mov	r18, r16
    2ba0:	2e 7e       	andi	r18, 0xEE	; 238
    2ba2:	05 c0       	rjmp	.+10     	; 0x2bae <vfprintf+0x606>
    2ba4:	dc 2c       	mov	r13, r12
    2ba6:	20 2f       	mov	r18, r16
    2ba8:	03 c0       	rjmp	.+6      	; 0x2bb0 <vfprintf+0x608>
    2baa:	dc 2c       	mov	r13, r12
    2bac:	01 c0       	rjmp	.+2      	; 0x2bb0 <vfprintf+0x608>
    2bae:	d1 2e       	mov	r13, r17
    2bb0:	24 ff       	sbrs	r18, 4
    2bb2:	0d c0       	rjmp	.+26     	; 0x2bce <vfprintf+0x626>
    2bb4:	fe 01       	movw	r30, r28
    2bb6:	ec 0d       	add	r30, r12
    2bb8:	f1 1d       	adc	r31, r1
    2bba:	80 81       	ld	r24, Z
    2bbc:	80 33       	cpi	r24, 0x30	; 48
    2bbe:	11 f4       	brne	.+4      	; 0x2bc4 <vfprintf+0x61c>
    2bc0:	29 7e       	andi	r18, 0xE9	; 233
    2bc2:	09 c0       	rjmp	.+18     	; 0x2bd6 <vfprintf+0x62e>
    2bc4:	22 ff       	sbrs	r18, 2
    2bc6:	06 c0       	rjmp	.+12     	; 0x2bd4 <vfprintf+0x62c>
    2bc8:	d3 94       	inc	r13
    2bca:	d3 94       	inc	r13
    2bcc:	04 c0       	rjmp	.+8      	; 0x2bd6 <vfprintf+0x62e>
    2bce:	82 2f       	mov	r24, r18
    2bd0:	86 78       	andi	r24, 0x86	; 134
    2bd2:	09 f0       	breq	.+2      	; 0x2bd6 <vfprintf+0x62e>
    2bd4:	d3 94       	inc	r13
    2bd6:	23 fd       	sbrc	r18, 3
    2bd8:	13 c0       	rjmp	.+38     	; 0x2c00 <vfprintf+0x658>
    2bda:	20 ff       	sbrs	r18, 0
    2bdc:	06 c0       	rjmp	.+12     	; 0x2bea <vfprintf+0x642>
    2bde:	1c 2d       	mov	r17, r12
    2be0:	d5 14       	cp	r13, r5
    2be2:	18 f4       	brcc	.+6      	; 0x2bea <vfprintf+0x642>
    2be4:	15 0d       	add	r17, r5
    2be6:	1d 19       	sub	r17, r13
    2be8:	d5 2c       	mov	r13, r5
    2bea:	d5 14       	cp	r13, r5
    2bec:	68 f4       	brcc	.+26     	; 0x2c08 <vfprintf+0x660>
    2bee:	b7 01       	movw	r22, r14
    2bf0:	80 e2       	ldi	r24, 0x20	; 32
    2bf2:	90 e0       	ldi	r25, 0x00	; 0
    2bf4:	2b 8b       	std	Y+19, r18	; 0x13
    2bf6:	0e 94 c7 18 	call	0x318e	; 0x318e <fputc>
    2bfa:	d3 94       	inc	r13
    2bfc:	2b 89       	ldd	r18, Y+19	; 0x13
    2bfe:	f5 cf       	rjmp	.-22     	; 0x2bea <vfprintf+0x642>
    2c00:	d5 14       	cp	r13, r5
    2c02:	10 f4       	brcc	.+4      	; 0x2c08 <vfprintf+0x660>
    2c04:	5d 18       	sub	r5, r13
    2c06:	01 c0       	rjmp	.+2      	; 0x2c0a <vfprintf+0x662>
    2c08:	51 2c       	mov	r5, r1
    2c0a:	24 ff       	sbrs	r18, 4
    2c0c:	12 c0       	rjmp	.+36     	; 0x2c32 <vfprintf+0x68a>
    2c0e:	b7 01       	movw	r22, r14
    2c10:	80 e3       	ldi	r24, 0x30	; 48
    2c12:	90 e0       	ldi	r25, 0x00	; 0
    2c14:	2b 8b       	std	Y+19, r18	; 0x13
    2c16:	0e 94 c7 18 	call	0x318e	; 0x318e <fputc>
    2c1a:	2b 89       	ldd	r18, Y+19	; 0x13
    2c1c:	22 ff       	sbrs	r18, 2
    2c1e:	17 c0       	rjmp	.+46     	; 0x2c4e <vfprintf+0x6a6>
    2c20:	21 ff       	sbrs	r18, 1
    2c22:	03 c0       	rjmp	.+6      	; 0x2c2a <vfprintf+0x682>
    2c24:	88 e5       	ldi	r24, 0x58	; 88
    2c26:	90 e0       	ldi	r25, 0x00	; 0
    2c28:	02 c0       	rjmp	.+4      	; 0x2c2e <vfprintf+0x686>
    2c2a:	88 e7       	ldi	r24, 0x78	; 120
    2c2c:	90 e0       	ldi	r25, 0x00	; 0
    2c2e:	b7 01       	movw	r22, r14
    2c30:	0c c0       	rjmp	.+24     	; 0x2c4a <vfprintf+0x6a2>
    2c32:	82 2f       	mov	r24, r18
    2c34:	86 78       	andi	r24, 0x86	; 134
    2c36:	59 f0       	breq	.+22     	; 0x2c4e <vfprintf+0x6a6>
    2c38:	21 fd       	sbrc	r18, 1
    2c3a:	02 c0       	rjmp	.+4      	; 0x2c40 <vfprintf+0x698>
    2c3c:	80 e2       	ldi	r24, 0x20	; 32
    2c3e:	01 c0       	rjmp	.+2      	; 0x2c42 <vfprintf+0x69a>
    2c40:	8b e2       	ldi	r24, 0x2B	; 43
    2c42:	27 fd       	sbrc	r18, 7
    2c44:	8d e2       	ldi	r24, 0x2D	; 45
    2c46:	b7 01       	movw	r22, r14
    2c48:	90 e0       	ldi	r25, 0x00	; 0
    2c4a:	0e 94 c7 18 	call	0x318e	; 0x318e <fputc>
    2c4e:	c1 16       	cp	r12, r17
    2c50:	38 f4       	brcc	.+14     	; 0x2c60 <vfprintf+0x6b8>
    2c52:	b7 01       	movw	r22, r14
    2c54:	80 e3       	ldi	r24, 0x30	; 48
    2c56:	90 e0       	ldi	r25, 0x00	; 0
    2c58:	0e 94 c7 18 	call	0x318e	; 0x318e <fputc>
    2c5c:	11 50       	subi	r17, 0x01	; 1
    2c5e:	f7 cf       	rjmp	.-18     	; 0x2c4e <vfprintf+0x6a6>
    2c60:	ca 94       	dec	r12
    2c62:	f4 01       	movw	r30, r8
    2c64:	ec 0d       	add	r30, r12
    2c66:	f1 1d       	adc	r31, r1
    2c68:	80 81       	ld	r24, Z
    2c6a:	b7 01       	movw	r22, r14
    2c6c:	90 e0       	ldi	r25, 0x00	; 0
    2c6e:	0e 94 c7 18 	call	0x318e	; 0x318e <fputc>
    2c72:	c1 10       	cpse	r12, r1
    2c74:	f5 cf       	rjmp	.-22     	; 0x2c60 <vfprintf+0x6b8>
    2c76:	55 20       	and	r5, r5
    2c78:	09 f4       	brne	.+2      	; 0x2c7c <vfprintf+0x6d4>
    2c7a:	c2 cc       	rjmp	.-1660   	; 0x2600 <vfprintf+0x58>
    2c7c:	b7 01       	movw	r22, r14
    2c7e:	80 e2       	ldi	r24, 0x20	; 32
    2c80:	90 e0       	ldi	r25, 0x00	; 0
    2c82:	0e 94 c7 18 	call	0x318e	; 0x318e <fputc>
    2c86:	5a 94       	dec	r5
    2c88:	f6 cf       	rjmp	.-20     	; 0x2c76 <vfprintf+0x6ce>
    2c8a:	f7 01       	movw	r30, r14
    2c8c:	86 81       	ldd	r24, Z+6	; 0x06
    2c8e:	97 81       	ldd	r25, Z+7	; 0x07
    2c90:	02 c0       	rjmp	.+4      	; 0x2c96 <vfprintf+0x6ee>
    2c92:	8f ef       	ldi	r24, 0xFF	; 255
    2c94:	9f ef       	ldi	r25, 0xFF	; 255
    2c96:	63 96       	adiw	r28, 0x13	; 19
    2c98:	e2 e1       	ldi	r30, 0x12	; 18
    2c9a:	0c 94 7f 16 	jmp	0x2cfe	; 0x2cfe <__epilogue_restores__>

00002c9e <__divmodhi4>:
    2c9e:	97 fb       	bst	r25, 7
    2ca0:	07 2e       	mov	r0, r23
    2ca2:	16 f4       	brtc	.+4      	; 0x2ca8 <__divmodhi4+0xa>
    2ca4:	00 94       	com	r0
    2ca6:	07 d0       	rcall	.+14     	; 0x2cb6 <__divmodhi4_neg1>
    2ca8:	77 fd       	sbrc	r23, 7
    2caa:	09 d0       	rcall	.+18     	; 0x2cbe <__divmodhi4_neg2>
    2cac:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <__udivmodhi4>
    2cb0:	07 fc       	sbrc	r0, 7
    2cb2:	05 d0       	rcall	.+10     	; 0x2cbe <__divmodhi4_neg2>
    2cb4:	3e f4       	brtc	.+14     	; 0x2cc4 <__divmodhi4_exit>

00002cb6 <__divmodhi4_neg1>:
    2cb6:	90 95       	com	r25
    2cb8:	81 95       	neg	r24
    2cba:	9f 4f       	sbci	r25, 0xFF	; 255
    2cbc:	08 95       	ret

00002cbe <__divmodhi4_neg2>:
    2cbe:	70 95       	com	r23
    2cc0:	61 95       	neg	r22
    2cc2:	7f 4f       	sbci	r23, 0xFF	; 255

00002cc4 <__divmodhi4_exit>:
    2cc4:	08 95       	ret

00002cc6 <__prologue_saves__>:
    2cc6:	2f 92       	push	r2
    2cc8:	3f 92       	push	r3
    2cca:	4f 92       	push	r4
    2ccc:	5f 92       	push	r5
    2cce:	6f 92       	push	r6
    2cd0:	7f 92       	push	r7
    2cd2:	8f 92       	push	r8
    2cd4:	9f 92       	push	r9
    2cd6:	af 92       	push	r10
    2cd8:	bf 92       	push	r11
    2cda:	cf 92       	push	r12
    2cdc:	df 92       	push	r13
    2cde:	ef 92       	push	r14
    2ce0:	ff 92       	push	r15
    2ce2:	0f 93       	push	r16
    2ce4:	1f 93       	push	r17
    2ce6:	cf 93       	push	r28
    2ce8:	df 93       	push	r29
    2cea:	cd b7       	in	r28, 0x3d	; 61
    2cec:	de b7       	in	r29, 0x3e	; 62
    2cee:	ca 1b       	sub	r28, r26
    2cf0:	db 0b       	sbc	r29, r27
    2cf2:	0f b6       	in	r0, 0x3f	; 63
    2cf4:	f8 94       	cli
    2cf6:	de bf       	out	0x3e, r29	; 62
    2cf8:	0f be       	out	0x3f, r0	; 63
    2cfa:	cd bf       	out	0x3d, r28	; 61
    2cfc:	09 94       	ijmp

00002cfe <__epilogue_restores__>:
    2cfe:	2a 88       	ldd	r2, Y+18	; 0x12
    2d00:	39 88       	ldd	r3, Y+17	; 0x11
    2d02:	48 88       	ldd	r4, Y+16	; 0x10
    2d04:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d06:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d08:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d0a:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d0c:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d0e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d10:	b9 84       	ldd	r11, Y+9	; 0x09
    2d12:	c8 84       	ldd	r12, Y+8	; 0x08
    2d14:	df 80       	ldd	r13, Y+7	; 0x07
    2d16:	ee 80       	ldd	r14, Y+6	; 0x06
    2d18:	fd 80       	ldd	r15, Y+5	; 0x05
    2d1a:	0c 81       	ldd	r16, Y+4	; 0x04
    2d1c:	1b 81       	ldd	r17, Y+3	; 0x03
    2d1e:	aa 81       	ldd	r26, Y+2	; 0x02
    2d20:	b9 81       	ldd	r27, Y+1	; 0x01
    2d22:	ce 0f       	add	r28, r30
    2d24:	d1 1d       	adc	r29, r1
    2d26:	0f b6       	in	r0, 0x3f	; 63
    2d28:	f8 94       	cli
    2d2a:	de bf       	out	0x3e, r29	; 62
    2d2c:	0f be       	out	0x3f, r0	; 63
    2d2e:	cd bf       	out	0x3d, r28	; 61
    2d30:	ed 01       	movw	r28, r26
    2d32:	08 95       	ret

00002d34 <__udivmodhi4>:
    2d34:	aa 1b       	sub	r26, r26
    2d36:	bb 1b       	sub	r27, r27
    2d38:	51 e1       	ldi	r21, 0x11	; 17
    2d3a:	07 c0       	rjmp	.+14     	; 0x2d4a <__udivmodhi4_ep>

00002d3c <__udivmodhi4_loop>:
    2d3c:	aa 1f       	adc	r26, r26
    2d3e:	bb 1f       	adc	r27, r27
    2d40:	a6 17       	cp	r26, r22
    2d42:	b7 07       	cpc	r27, r23
    2d44:	10 f0       	brcs	.+4      	; 0x2d4a <__udivmodhi4_ep>
    2d46:	a6 1b       	sub	r26, r22
    2d48:	b7 0b       	sbc	r27, r23

00002d4a <__udivmodhi4_ep>:
    2d4a:	88 1f       	adc	r24, r24
    2d4c:	99 1f       	adc	r25, r25
    2d4e:	5a 95       	dec	r21
    2d50:	a9 f7       	brne	.-22     	; 0x2d3c <__udivmodhi4_loop>
    2d52:	80 95       	com	r24
    2d54:	90 95       	com	r25
    2d56:	bc 01       	movw	r22, r24
    2d58:	cd 01       	movw	r24, r26
    2d5a:	08 95       	ret

00002d5c <malloc>:
    2d5c:	cf 93       	push	r28
    2d5e:	df 93       	push	r29
    2d60:	82 30       	cpi	r24, 0x02	; 2
    2d62:	91 05       	cpc	r25, r1
    2d64:	10 f4       	brcc	.+4      	; 0x2d6a <malloc+0xe>
    2d66:	82 e0       	ldi	r24, 0x02	; 2
    2d68:	90 e0       	ldi	r25, 0x00	; 0
    2d6a:	e0 91 52 05 	lds	r30, 0x0552
    2d6e:	f0 91 53 05 	lds	r31, 0x0553
    2d72:	20 e0       	ldi	r18, 0x00	; 0
    2d74:	30 e0       	ldi	r19, 0x00	; 0
    2d76:	a0 e0       	ldi	r26, 0x00	; 0
    2d78:	b0 e0       	ldi	r27, 0x00	; 0
    2d7a:	30 97       	sbiw	r30, 0x00	; 0
    2d7c:	39 f1       	breq	.+78     	; 0x2dcc <malloc+0x70>
    2d7e:	40 81       	ld	r20, Z
    2d80:	51 81       	ldd	r21, Z+1	; 0x01
    2d82:	48 17       	cp	r20, r24
    2d84:	59 07       	cpc	r21, r25
    2d86:	b8 f0       	brcs	.+46     	; 0x2db6 <malloc+0x5a>
    2d88:	48 17       	cp	r20, r24
    2d8a:	59 07       	cpc	r21, r25
    2d8c:	71 f4       	brne	.+28     	; 0x2daa <malloc+0x4e>
    2d8e:	82 81       	ldd	r24, Z+2	; 0x02
    2d90:	93 81       	ldd	r25, Z+3	; 0x03
    2d92:	10 97       	sbiw	r26, 0x00	; 0
    2d94:	29 f0       	breq	.+10     	; 0x2da0 <malloc+0x44>
    2d96:	13 96       	adiw	r26, 0x03	; 3
    2d98:	9c 93       	st	X, r25
    2d9a:	8e 93       	st	-X, r24
    2d9c:	12 97       	sbiw	r26, 0x02	; 2
    2d9e:	2c c0       	rjmp	.+88     	; 0x2df8 <malloc+0x9c>
    2da0:	90 93 53 05 	sts	0x0553, r25
    2da4:	80 93 52 05 	sts	0x0552, r24
    2da8:	27 c0       	rjmp	.+78     	; 0x2df8 <malloc+0x9c>
    2daa:	21 15       	cp	r18, r1
    2dac:	31 05       	cpc	r19, r1
    2dae:	31 f0       	breq	.+12     	; 0x2dbc <malloc+0x60>
    2db0:	42 17       	cp	r20, r18
    2db2:	53 07       	cpc	r21, r19
    2db4:	18 f0       	brcs	.+6      	; 0x2dbc <malloc+0x60>
    2db6:	a9 01       	movw	r20, r18
    2db8:	db 01       	movw	r26, r22
    2dba:	01 c0       	rjmp	.+2      	; 0x2dbe <malloc+0x62>
    2dbc:	ef 01       	movw	r28, r30
    2dbe:	9a 01       	movw	r18, r20
    2dc0:	bd 01       	movw	r22, r26
    2dc2:	df 01       	movw	r26, r30
    2dc4:	02 80       	ldd	r0, Z+2	; 0x02
    2dc6:	f3 81       	ldd	r31, Z+3	; 0x03
    2dc8:	e0 2d       	mov	r30, r0
    2dca:	d7 cf       	rjmp	.-82     	; 0x2d7a <malloc+0x1e>
    2dcc:	21 15       	cp	r18, r1
    2dce:	31 05       	cpc	r19, r1
    2dd0:	f9 f0       	breq	.+62     	; 0x2e10 <malloc+0xb4>
    2dd2:	28 1b       	sub	r18, r24
    2dd4:	39 0b       	sbc	r19, r25
    2dd6:	24 30       	cpi	r18, 0x04	; 4
    2dd8:	31 05       	cpc	r19, r1
    2dda:	80 f4       	brcc	.+32     	; 0x2dfc <malloc+0xa0>
    2ddc:	8a 81       	ldd	r24, Y+2	; 0x02
    2dde:	9b 81       	ldd	r25, Y+3	; 0x03
    2de0:	61 15       	cp	r22, r1
    2de2:	71 05       	cpc	r23, r1
    2de4:	21 f0       	breq	.+8      	; 0x2dee <malloc+0x92>
    2de6:	fb 01       	movw	r30, r22
    2de8:	93 83       	std	Z+3, r25	; 0x03
    2dea:	82 83       	std	Z+2, r24	; 0x02
    2dec:	04 c0       	rjmp	.+8      	; 0x2df6 <malloc+0x9a>
    2dee:	90 93 53 05 	sts	0x0553, r25
    2df2:	80 93 52 05 	sts	0x0552, r24
    2df6:	fe 01       	movw	r30, r28
    2df8:	32 96       	adiw	r30, 0x02	; 2
    2dfa:	44 c0       	rjmp	.+136    	; 0x2e84 <malloc+0x128>
    2dfc:	fe 01       	movw	r30, r28
    2dfe:	e2 0f       	add	r30, r18
    2e00:	f3 1f       	adc	r31, r19
    2e02:	81 93       	st	Z+, r24
    2e04:	91 93       	st	Z+, r25
    2e06:	22 50       	subi	r18, 0x02	; 2
    2e08:	31 09       	sbc	r19, r1
    2e0a:	39 83       	std	Y+1, r19	; 0x01
    2e0c:	28 83       	st	Y, r18
    2e0e:	3a c0       	rjmp	.+116    	; 0x2e84 <malloc+0x128>
    2e10:	20 91 50 05 	lds	r18, 0x0550
    2e14:	30 91 51 05 	lds	r19, 0x0551
    2e18:	23 2b       	or	r18, r19
    2e1a:	41 f4       	brne	.+16     	; 0x2e2c <malloc+0xd0>
    2e1c:	20 91 62 00 	lds	r18, 0x0062
    2e20:	30 91 63 00 	lds	r19, 0x0063
    2e24:	30 93 51 05 	sts	0x0551, r19
    2e28:	20 93 50 05 	sts	0x0550, r18
    2e2c:	20 91 60 00 	lds	r18, 0x0060
    2e30:	30 91 61 00 	lds	r19, 0x0061
    2e34:	21 15       	cp	r18, r1
    2e36:	31 05       	cpc	r19, r1
    2e38:	41 f4       	brne	.+16     	; 0x2e4a <malloc+0xee>
    2e3a:	2d b7       	in	r18, 0x3d	; 61
    2e3c:	3e b7       	in	r19, 0x3e	; 62
    2e3e:	40 91 64 00 	lds	r20, 0x0064
    2e42:	50 91 65 00 	lds	r21, 0x0065
    2e46:	24 1b       	sub	r18, r20
    2e48:	35 0b       	sbc	r19, r21
    2e4a:	e0 91 50 05 	lds	r30, 0x0550
    2e4e:	f0 91 51 05 	lds	r31, 0x0551
    2e52:	e2 17       	cp	r30, r18
    2e54:	f3 07       	cpc	r31, r19
    2e56:	a0 f4       	brcc	.+40     	; 0x2e80 <malloc+0x124>
    2e58:	2e 1b       	sub	r18, r30
    2e5a:	3f 0b       	sbc	r19, r31
    2e5c:	28 17       	cp	r18, r24
    2e5e:	39 07       	cpc	r19, r25
    2e60:	78 f0       	brcs	.+30     	; 0x2e80 <malloc+0x124>
    2e62:	ac 01       	movw	r20, r24
    2e64:	4e 5f       	subi	r20, 0xFE	; 254
    2e66:	5f 4f       	sbci	r21, 0xFF	; 255
    2e68:	24 17       	cp	r18, r20
    2e6a:	35 07       	cpc	r19, r21
    2e6c:	48 f0       	brcs	.+18     	; 0x2e80 <malloc+0x124>
    2e6e:	4e 0f       	add	r20, r30
    2e70:	5f 1f       	adc	r21, r31
    2e72:	50 93 51 05 	sts	0x0551, r21
    2e76:	40 93 50 05 	sts	0x0550, r20
    2e7a:	81 93       	st	Z+, r24
    2e7c:	91 93       	st	Z+, r25
    2e7e:	02 c0       	rjmp	.+4      	; 0x2e84 <malloc+0x128>
    2e80:	e0 e0       	ldi	r30, 0x00	; 0
    2e82:	f0 e0       	ldi	r31, 0x00	; 0
    2e84:	cf 01       	movw	r24, r30
    2e86:	df 91       	pop	r29
    2e88:	cf 91       	pop	r28
    2e8a:	08 95       	ret

00002e8c <free>:
    2e8c:	cf 93       	push	r28
    2e8e:	df 93       	push	r29
    2e90:	00 97       	sbiw	r24, 0x00	; 0
    2e92:	09 f4       	brne	.+2      	; 0x2e96 <free+0xa>
    2e94:	87 c0       	rjmp	.+270    	; 0x2fa4 <free+0x118>
    2e96:	fc 01       	movw	r30, r24
    2e98:	32 97       	sbiw	r30, 0x02	; 2
    2e9a:	13 82       	std	Z+3, r1	; 0x03
    2e9c:	12 82       	std	Z+2, r1	; 0x02
    2e9e:	c0 91 52 05 	lds	r28, 0x0552
    2ea2:	d0 91 53 05 	lds	r29, 0x0553
    2ea6:	20 97       	sbiw	r28, 0x00	; 0
    2ea8:	81 f4       	brne	.+32     	; 0x2eca <free+0x3e>
    2eaa:	20 81       	ld	r18, Z
    2eac:	31 81       	ldd	r19, Z+1	; 0x01
    2eae:	28 0f       	add	r18, r24
    2eb0:	39 1f       	adc	r19, r25
    2eb2:	80 91 50 05 	lds	r24, 0x0550
    2eb6:	90 91 51 05 	lds	r25, 0x0551
    2eba:	82 17       	cp	r24, r18
    2ebc:	93 07       	cpc	r25, r19
    2ebe:	79 f5       	brne	.+94     	; 0x2f1e <free+0x92>
    2ec0:	f0 93 51 05 	sts	0x0551, r31
    2ec4:	e0 93 50 05 	sts	0x0550, r30
    2ec8:	6d c0       	rjmp	.+218    	; 0x2fa4 <free+0x118>
    2eca:	de 01       	movw	r26, r28
    2ecc:	20 e0       	ldi	r18, 0x00	; 0
    2ece:	30 e0       	ldi	r19, 0x00	; 0
    2ed0:	ae 17       	cp	r26, r30
    2ed2:	bf 07       	cpc	r27, r31
    2ed4:	50 f4       	brcc	.+20     	; 0x2eea <free+0x5e>
    2ed6:	12 96       	adiw	r26, 0x02	; 2
    2ed8:	4d 91       	ld	r20, X+
    2eda:	5c 91       	ld	r21, X
    2edc:	13 97       	sbiw	r26, 0x03	; 3
    2ede:	9d 01       	movw	r18, r26
    2ee0:	41 15       	cp	r20, r1
    2ee2:	51 05       	cpc	r21, r1
    2ee4:	09 f1       	breq	.+66     	; 0x2f28 <free+0x9c>
    2ee6:	da 01       	movw	r26, r20
    2ee8:	f3 cf       	rjmp	.-26     	; 0x2ed0 <free+0x44>
    2eea:	b3 83       	std	Z+3, r27	; 0x03
    2eec:	a2 83       	std	Z+2, r26	; 0x02
    2eee:	40 81       	ld	r20, Z
    2ef0:	51 81       	ldd	r21, Z+1	; 0x01
    2ef2:	84 0f       	add	r24, r20
    2ef4:	95 1f       	adc	r25, r21
    2ef6:	8a 17       	cp	r24, r26
    2ef8:	9b 07       	cpc	r25, r27
    2efa:	71 f4       	brne	.+28     	; 0x2f18 <free+0x8c>
    2efc:	8d 91       	ld	r24, X+
    2efe:	9c 91       	ld	r25, X
    2f00:	11 97       	sbiw	r26, 0x01	; 1
    2f02:	84 0f       	add	r24, r20
    2f04:	95 1f       	adc	r25, r21
    2f06:	02 96       	adiw	r24, 0x02	; 2
    2f08:	91 83       	std	Z+1, r25	; 0x01
    2f0a:	80 83       	st	Z, r24
    2f0c:	12 96       	adiw	r26, 0x02	; 2
    2f0e:	8d 91       	ld	r24, X+
    2f10:	9c 91       	ld	r25, X
    2f12:	13 97       	sbiw	r26, 0x03	; 3
    2f14:	93 83       	std	Z+3, r25	; 0x03
    2f16:	82 83       	std	Z+2, r24	; 0x02
    2f18:	21 15       	cp	r18, r1
    2f1a:	31 05       	cpc	r19, r1
    2f1c:	29 f4       	brne	.+10     	; 0x2f28 <free+0x9c>
    2f1e:	f0 93 53 05 	sts	0x0553, r31
    2f22:	e0 93 52 05 	sts	0x0552, r30
    2f26:	3e c0       	rjmp	.+124    	; 0x2fa4 <free+0x118>
    2f28:	d9 01       	movw	r26, r18
    2f2a:	13 96       	adiw	r26, 0x03	; 3
    2f2c:	fc 93       	st	X, r31
    2f2e:	ee 93       	st	-X, r30
    2f30:	12 97       	sbiw	r26, 0x02	; 2
    2f32:	4d 91       	ld	r20, X+
    2f34:	5d 91       	ld	r21, X+
    2f36:	a4 0f       	add	r26, r20
    2f38:	b5 1f       	adc	r27, r21
    2f3a:	ea 17       	cp	r30, r26
    2f3c:	fb 07       	cpc	r31, r27
    2f3e:	79 f4       	brne	.+30     	; 0x2f5e <free+0xd2>
    2f40:	80 81       	ld	r24, Z
    2f42:	91 81       	ldd	r25, Z+1	; 0x01
    2f44:	84 0f       	add	r24, r20
    2f46:	95 1f       	adc	r25, r21
    2f48:	02 96       	adiw	r24, 0x02	; 2
    2f4a:	d9 01       	movw	r26, r18
    2f4c:	11 96       	adiw	r26, 0x01	; 1
    2f4e:	9c 93       	st	X, r25
    2f50:	8e 93       	st	-X, r24
    2f52:	82 81       	ldd	r24, Z+2	; 0x02
    2f54:	93 81       	ldd	r25, Z+3	; 0x03
    2f56:	13 96       	adiw	r26, 0x03	; 3
    2f58:	9c 93       	st	X, r25
    2f5a:	8e 93       	st	-X, r24
    2f5c:	12 97       	sbiw	r26, 0x02	; 2
    2f5e:	e0 e0       	ldi	r30, 0x00	; 0
    2f60:	f0 e0       	ldi	r31, 0x00	; 0
    2f62:	8a 81       	ldd	r24, Y+2	; 0x02
    2f64:	9b 81       	ldd	r25, Y+3	; 0x03
    2f66:	00 97       	sbiw	r24, 0x00	; 0
    2f68:	19 f0       	breq	.+6      	; 0x2f70 <free+0xe4>
    2f6a:	fe 01       	movw	r30, r28
    2f6c:	ec 01       	movw	r28, r24
    2f6e:	f9 cf       	rjmp	.-14     	; 0x2f62 <free+0xd6>
    2f70:	ce 01       	movw	r24, r28
    2f72:	02 96       	adiw	r24, 0x02	; 2
    2f74:	28 81       	ld	r18, Y
    2f76:	39 81       	ldd	r19, Y+1	; 0x01
    2f78:	82 0f       	add	r24, r18
    2f7a:	93 1f       	adc	r25, r19
    2f7c:	20 91 50 05 	lds	r18, 0x0550
    2f80:	30 91 51 05 	lds	r19, 0x0551
    2f84:	28 17       	cp	r18, r24
    2f86:	39 07       	cpc	r19, r25
    2f88:	69 f4       	brne	.+26     	; 0x2fa4 <free+0x118>
    2f8a:	30 97       	sbiw	r30, 0x00	; 0
    2f8c:	29 f4       	brne	.+10     	; 0x2f98 <free+0x10c>
    2f8e:	10 92 53 05 	sts	0x0553, r1
    2f92:	10 92 52 05 	sts	0x0552, r1
    2f96:	02 c0       	rjmp	.+4      	; 0x2f9c <free+0x110>
    2f98:	13 82       	std	Z+3, r1	; 0x03
    2f9a:	12 82       	std	Z+2, r1	; 0x02
    2f9c:	d0 93 51 05 	sts	0x0551, r29
    2fa0:	c0 93 50 05 	sts	0x0550, r28
    2fa4:	df 91       	pop	r29
    2fa6:	cf 91       	pop	r28
    2fa8:	08 95       	ret

00002faa <atof>:
    2faa:	66 27       	eor	r22, r22
    2fac:	77 27       	eor	r23, r23
    2fae:	0c 94 c8 19 	jmp	0x3390	; 0x3390 <strtod>

00002fb2 <__ftoa_engine>:
    2fb2:	28 30       	cpi	r18, 0x08	; 8
    2fb4:	08 f0       	brcs	.+2      	; 0x2fb8 <__ftoa_engine+0x6>
    2fb6:	27 e0       	ldi	r18, 0x07	; 7
    2fb8:	33 27       	eor	r19, r19
    2fba:	da 01       	movw	r26, r20
    2fbc:	99 0f       	add	r25, r25
    2fbe:	31 1d       	adc	r19, r1
    2fc0:	87 fd       	sbrc	r24, 7
    2fc2:	91 60       	ori	r25, 0x01	; 1
    2fc4:	00 96       	adiw	r24, 0x00	; 0
    2fc6:	61 05       	cpc	r22, r1
    2fc8:	71 05       	cpc	r23, r1
    2fca:	39 f4       	brne	.+14     	; 0x2fda <__ftoa_engine+0x28>
    2fcc:	32 60       	ori	r19, 0x02	; 2
    2fce:	2e 5f       	subi	r18, 0xFE	; 254
    2fd0:	3d 93       	st	X+, r19
    2fd2:	30 e3       	ldi	r19, 0x30	; 48
    2fd4:	2a 95       	dec	r18
    2fd6:	e1 f7       	brne	.-8      	; 0x2fd0 <__ftoa_engine+0x1e>
    2fd8:	08 95       	ret
    2fda:	9f 3f       	cpi	r25, 0xFF	; 255
    2fdc:	30 f0       	brcs	.+12     	; 0x2fea <__ftoa_engine+0x38>
    2fde:	80 38       	cpi	r24, 0x80	; 128
    2fe0:	71 05       	cpc	r23, r1
    2fe2:	61 05       	cpc	r22, r1
    2fe4:	09 f0       	breq	.+2      	; 0x2fe8 <__ftoa_engine+0x36>
    2fe6:	3c 5f       	subi	r19, 0xFC	; 252
    2fe8:	3c 5f       	subi	r19, 0xFC	; 252
    2fea:	3d 93       	st	X+, r19
    2fec:	91 30       	cpi	r25, 0x01	; 1
    2fee:	08 f0       	brcs	.+2      	; 0x2ff2 <__ftoa_engine+0x40>
    2ff0:	80 68       	ori	r24, 0x80	; 128
    2ff2:	91 1d       	adc	r25, r1
    2ff4:	df 93       	push	r29
    2ff6:	cf 93       	push	r28
    2ff8:	1f 93       	push	r17
    2ffa:	0f 93       	push	r16
    2ffc:	ff 92       	push	r15
    2ffe:	ef 92       	push	r14
    3000:	19 2f       	mov	r17, r25
    3002:	98 7f       	andi	r25, 0xF8	; 248
    3004:	96 95       	lsr	r25
    3006:	e9 2f       	mov	r30, r25
    3008:	96 95       	lsr	r25
    300a:	96 95       	lsr	r25
    300c:	e9 0f       	add	r30, r25
    300e:	ff 27       	eor	r31, r31
    3010:	e0 5f       	subi	r30, 0xF0	; 240
    3012:	fe 4f       	sbci	r31, 0xFE	; 254
    3014:	99 27       	eor	r25, r25
    3016:	33 27       	eor	r19, r19
    3018:	ee 24       	eor	r14, r14
    301a:	ff 24       	eor	r15, r15
    301c:	a7 01       	movw	r20, r14
    301e:	e7 01       	movw	r28, r14
    3020:	05 90       	lpm	r0, Z+
    3022:	08 94       	sec
    3024:	07 94       	ror	r0
    3026:	28 f4       	brcc	.+10     	; 0x3032 <__ftoa_engine+0x80>
    3028:	36 0f       	add	r19, r22
    302a:	e7 1e       	adc	r14, r23
    302c:	f8 1e       	adc	r15, r24
    302e:	49 1f       	adc	r20, r25
    3030:	51 1d       	adc	r21, r1
    3032:	66 0f       	add	r22, r22
    3034:	77 1f       	adc	r23, r23
    3036:	88 1f       	adc	r24, r24
    3038:	99 1f       	adc	r25, r25
    303a:	06 94       	lsr	r0
    303c:	a1 f7       	brne	.-24     	; 0x3026 <__ftoa_engine+0x74>
    303e:	05 90       	lpm	r0, Z+
    3040:	07 94       	ror	r0
    3042:	28 f4       	brcc	.+10     	; 0x304e <__ftoa_engine+0x9c>
    3044:	e7 0e       	add	r14, r23
    3046:	f8 1e       	adc	r15, r24
    3048:	49 1f       	adc	r20, r25
    304a:	56 1f       	adc	r21, r22
    304c:	c1 1d       	adc	r28, r1
    304e:	77 0f       	add	r23, r23
    3050:	88 1f       	adc	r24, r24
    3052:	99 1f       	adc	r25, r25
    3054:	66 1f       	adc	r22, r22
    3056:	06 94       	lsr	r0
    3058:	a1 f7       	brne	.-24     	; 0x3042 <__ftoa_engine+0x90>
    305a:	05 90       	lpm	r0, Z+
    305c:	07 94       	ror	r0
    305e:	28 f4       	brcc	.+10     	; 0x306a <__ftoa_engine+0xb8>
    3060:	f8 0e       	add	r15, r24
    3062:	49 1f       	adc	r20, r25
    3064:	56 1f       	adc	r21, r22
    3066:	c7 1f       	adc	r28, r23
    3068:	d1 1d       	adc	r29, r1
    306a:	88 0f       	add	r24, r24
    306c:	99 1f       	adc	r25, r25
    306e:	66 1f       	adc	r22, r22
    3070:	77 1f       	adc	r23, r23
    3072:	06 94       	lsr	r0
    3074:	a1 f7       	brne	.-24     	; 0x305e <__ftoa_engine+0xac>
    3076:	05 90       	lpm	r0, Z+
    3078:	07 94       	ror	r0
    307a:	20 f4       	brcc	.+8      	; 0x3084 <__ftoa_engine+0xd2>
    307c:	49 0f       	add	r20, r25
    307e:	56 1f       	adc	r21, r22
    3080:	c7 1f       	adc	r28, r23
    3082:	d8 1f       	adc	r29, r24
    3084:	99 0f       	add	r25, r25
    3086:	66 1f       	adc	r22, r22
    3088:	77 1f       	adc	r23, r23
    308a:	88 1f       	adc	r24, r24
    308c:	06 94       	lsr	r0
    308e:	a9 f7       	brne	.-22     	; 0x307a <__ftoa_engine+0xc8>
    3090:	84 91       	lpm	r24, Z
    3092:	10 95       	com	r17
    3094:	17 70       	andi	r17, 0x07	; 7
    3096:	41 f0       	breq	.+16     	; 0x30a8 <__ftoa_engine+0xf6>
    3098:	d6 95       	lsr	r29
    309a:	c7 95       	ror	r28
    309c:	57 95       	ror	r21
    309e:	47 95       	ror	r20
    30a0:	f7 94       	ror	r15
    30a2:	e7 94       	ror	r14
    30a4:	1a 95       	dec	r17
    30a6:	c1 f7       	brne	.-16     	; 0x3098 <__ftoa_engine+0xe6>
    30a8:	e6 eb       	ldi	r30, 0xB6	; 182
    30aa:	f0 e0       	ldi	r31, 0x00	; 0
    30ac:	68 94       	set
    30ae:	15 90       	lpm	r1, Z+
    30b0:	15 91       	lpm	r17, Z+
    30b2:	35 91       	lpm	r19, Z+
    30b4:	65 91       	lpm	r22, Z+
    30b6:	95 91       	lpm	r25, Z+
    30b8:	05 90       	lpm	r0, Z+
    30ba:	7f e2       	ldi	r23, 0x2F	; 47
    30bc:	73 95       	inc	r23
    30be:	e1 18       	sub	r14, r1
    30c0:	f1 0a       	sbc	r15, r17
    30c2:	43 0b       	sbc	r20, r19
    30c4:	56 0b       	sbc	r21, r22
    30c6:	c9 0b       	sbc	r28, r25
    30c8:	d0 09       	sbc	r29, r0
    30ca:	c0 f7       	brcc	.-16     	; 0x30bc <__ftoa_engine+0x10a>
    30cc:	e1 0c       	add	r14, r1
    30ce:	f1 1e       	adc	r15, r17
    30d0:	43 1f       	adc	r20, r19
    30d2:	56 1f       	adc	r21, r22
    30d4:	c9 1f       	adc	r28, r25
    30d6:	d0 1d       	adc	r29, r0
    30d8:	7e f4       	brtc	.+30     	; 0x30f8 <__ftoa_engine+0x146>
    30da:	70 33       	cpi	r23, 0x30	; 48
    30dc:	11 f4       	brne	.+4      	; 0x30e2 <__ftoa_engine+0x130>
    30de:	8a 95       	dec	r24
    30e0:	e6 cf       	rjmp	.-52     	; 0x30ae <__ftoa_engine+0xfc>
    30e2:	e8 94       	clt
    30e4:	01 50       	subi	r16, 0x01	; 1
    30e6:	30 f0       	brcs	.+12     	; 0x30f4 <__ftoa_engine+0x142>
    30e8:	08 0f       	add	r16, r24
    30ea:	0a f4       	brpl	.+2      	; 0x30ee <__ftoa_engine+0x13c>
    30ec:	00 27       	eor	r16, r16
    30ee:	02 17       	cp	r16, r18
    30f0:	08 f4       	brcc	.+2      	; 0x30f4 <__ftoa_engine+0x142>
    30f2:	20 2f       	mov	r18, r16
    30f4:	23 95       	inc	r18
    30f6:	02 2f       	mov	r16, r18
    30f8:	7a 33       	cpi	r23, 0x3A	; 58
    30fa:	28 f0       	brcs	.+10     	; 0x3106 <__ftoa_engine+0x154>
    30fc:	79 e3       	ldi	r23, 0x39	; 57
    30fe:	7d 93       	st	X+, r23
    3100:	2a 95       	dec	r18
    3102:	e9 f7       	brne	.-6      	; 0x30fe <__ftoa_engine+0x14c>
    3104:	10 c0       	rjmp	.+32     	; 0x3126 <__ftoa_engine+0x174>
    3106:	7d 93       	st	X+, r23
    3108:	2a 95       	dec	r18
    310a:	89 f6       	brne	.-94     	; 0x30ae <__ftoa_engine+0xfc>
    310c:	06 94       	lsr	r0
    310e:	97 95       	ror	r25
    3110:	67 95       	ror	r22
    3112:	37 95       	ror	r19
    3114:	17 95       	ror	r17
    3116:	17 94       	ror	r1
    3118:	e1 18       	sub	r14, r1
    311a:	f1 0a       	sbc	r15, r17
    311c:	43 0b       	sbc	r20, r19
    311e:	56 0b       	sbc	r21, r22
    3120:	c9 0b       	sbc	r28, r25
    3122:	d0 09       	sbc	r29, r0
    3124:	98 f0       	brcs	.+38     	; 0x314c <__ftoa_engine+0x19a>
    3126:	23 95       	inc	r18
    3128:	7e 91       	ld	r23, -X
    312a:	73 95       	inc	r23
    312c:	7a 33       	cpi	r23, 0x3A	; 58
    312e:	08 f0       	brcs	.+2      	; 0x3132 <__ftoa_engine+0x180>
    3130:	70 e3       	ldi	r23, 0x30	; 48
    3132:	7c 93       	st	X, r23
    3134:	20 13       	cpse	r18, r16
    3136:	b8 f7       	brcc	.-18     	; 0x3126 <__ftoa_engine+0x174>
    3138:	7e 91       	ld	r23, -X
    313a:	70 61       	ori	r23, 0x10	; 16
    313c:	7d 93       	st	X+, r23
    313e:	30 f0       	brcs	.+12     	; 0x314c <__ftoa_engine+0x19a>
    3140:	83 95       	inc	r24
    3142:	71 e3       	ldi	r23, 0x31	; 49
    3144:	7d 93       	st	X+, r23
    3146:	70 e3       	ldi	r23, 0x30	; 48
    3148:	2a 95       	dec	r18
    314a:	e1 f7       	brne	.-8      	; 0x3144 <__ftoa_engine+0x192>
    314c:	11 24       	eor	r1, r1
    314e:	ef 90       	pop	r14
    3150:	ff 90       	pop	r15
    3152:	0f 91       	pop	r16
    3154:	1f 91       	pop	r17
    3156:	cf 91       	pop	r28
    3158:	df 91       	pop	r29
    315a:	99 27       	eor	r25, r25
    315c:	87 fd       	sbrc	r24, 7
    315e:	90 95       	com	r25
    3160:	08 95       	ret

00003162 <strnlen_P>:
    3162:	fc 01       	movw	r30, r24
    3164:	05 90       	lpm	r0, Z+
    3166:	61 50       	subi	r22, 0x01	; 1
    3168:	70 40       	sbci	r23, 0x00	; 0
    316a:	01 10       	cpse	r0, r1
    316c:	d8 f7       	brcc	.-10     	; 0x3164 <strnlen_P+0x2>
    316e:	80 95       	com	r24
    3170:	90 95       	com	r25
    3172:	8e 0f       	add	r24, r30
    3174:	9f 1f       	adc	r25, r31
    3176:	08 95       	ret

00003178 <strnlen>:
    3178:	fc 01       	movw	r30, r24
    317a:	61 50       	subi	r22, 0x01	; 1
    317c:	70 40       	sbci	r23, 0x00	; 0
    317e:	01 90       	ld	r0, Z+
    3180:	01 10       	cpse	r0, r1
    3182:	d8 f7       	brcc	.-10     	; 0x317a <strnlen+0x2>
    3184:	80 95       	com	r24
    3186:	90 95       	com	r25
    3188:	8e 0f       	add	r24, r30
    318a:	9f 1f       	adc	r25, r31
    318c:	08 95       	ret

0000318e <fputc>:
    318e:	0f 93       	push	r16
    3190:	1f 93       	push	r17
    3192:	cf 93       	push	r28
    3194:	df 93       	push	r29
    3196:	18 2f       	mov	r17, r24
    3198:	09 2f       	mov	r16, r25
    319a:	eb 01       	movw	r28, r22
    319c:	8b 81       	ldd	r24, Y+3	; 0x03
    319e:	81 fd       	sbrc	r24, 1
    31a0:	03 c0       	rjmp	.+6      	; 0x31a8 <fputc+0x1a>
    31a2:	8f ef       	ldi	r24, 0xFF	; 255
    31a4:	9f ef       	ldi	r25, 0xFF	; 255
    31a6:	20 c0       	rjmp	.+64     	; 0x31e8 <fputc+0x5a>
    31a8:	82 ff       	sbrs	r24, 2
    31aa:	10 c0       	rjmp	.+32     	; 0x31cc <fputc+0x3e>
    31ac:	4e 81       	ldd	r20, Y+6	; 0x06
    31ae:	5f 81       	ldd	r21, Y+7	; 0x07
    31b0:	2c 81       	ldd	r18, Y+4	; 0x04
    31b2:	3d 81       	ldd	r19, Y+5	; 0x05
    31b4:	42 17       	cp	r20, r18
    31b6:	53 07       	cpc	r21, r19
    31b8:	7c f4       	brge	.+30     	; 0x31d8 <fputc+0x4a>
    31ba:	e8 81       	ld	r30, Y
    31bc:	f9 81       	ldd	r31, Y+1	; 0x01
    31be:	9f 01       	movw	r18, r30
    31c0:	2f 5f       	subi	r18, 0xFF	; 255
    31c2:	3f 4f       	sbci	r19, 0xFF	; 255
    31c4:	39 83       	std	Y+1, r19	; 0x01
    31c6:	28 83       	st	Y, r18
    31c8:	10 83       	st	Z, r17
    31ca:	06 c0       	rjmp	.+12     	; 0x31d8 <fputc+0x4a>
    31cc:	e8 85       	ldd	r30, Y+8	; 0x08
    31ce:	f9 85       	ldd	r31, Y+9	; 0x09
    31d0:	81 2f       	mov	r24, r17
    31d2:	09 95       	icall
    31d4:	89 2b       	or	r24, r25
    31d6:	29 f7       	brne	.-54     	; 0x31a2 <fputc+0x14>
    31d8:	2e 81       	ldd	r18, Y+6	; 0x06
    31da:	3f 81       	ldd	r19, Y+7	; 0x07
    31dc:	2f 5f       	subi	r18, 0xFF	; 255
    31de:	3f 4f       	sbci	r19, 0xFF	; 255
    31e0:	3f 83       	std	Y+7, r19	; 0x07
    31e2:	2e 83       	std	Y+6, r18	; 0x06
    31e4:	81 2f       	mov	r24, r17
    31e6:	90 2f       	mov	r25, r16
    31e8:	df 91       	pop	r29
    31ea:	cf 91       	pop	r28
    31ec:	1f 91       	pop	r17
    31ee:	0f 91       	pop	r16
    31f0:	08 95       	ret

000031f2 <printf>:
    31f2:	a0 e0       	ldi	r26, 0x00	; 0
    31f4:	b0 e0       	ldi	r27, 0x00	; 0
    31f6:	ef ef       	ldi	r30, 0xFF	; 255
    31f8:	f8 e1       	ldi	r31, 0x18	; 24
    31fa:	0c 94 73 16 	jmp	0x2ce6	; 0x2ce6 <__prologue_saves__+0x20>
    31fe:	fe 01       	movw	r30, r28
    3200:	35 96       	adiw	r30, 0x05	; 5
    3202:	61 91       	ld	r22, Z+
    3204:	71 91       	ld	r23, Z+
    3206:	af 01       	movw	r20, r30
    3208:	80 91 56 05 	lds	r24, 0x0556
    320c:	90 91 57 05 	lds	r25, 0x0557
    3210:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <vfprintf>
    3214:	e2 e0       	ldi	r30, 0x02	; 2
    3216:	0c 94 8f 16 	jmp	0x2d1e	; 0x2d1e <__epilogue_restores__+0x20>

0000321a <puts>:
    321a:	0f 93       	push	r16
    321c:	1f 93       	push	r17
    321e:	cf 93       	push	r28
    3220:	df 93       	push	r29
    3222:	e0 91 56 05 	lds	r30, 0x0556
    3226:	f0 91 57 05 	lds	r31, 0x0557
    322a:	23 81       	ldd	r18, Z+3	; 0x03
    322c:	21 ff       	sbrs	r18, 1
    322e:	1b c0       	rjmp	.+54     	; 0x3266 <puts+0x4c>
    3230:	ec 01       	movw	r28, r24
    3232:	00 e0       	ldi	r16, 0x00	; 0
    3234:	10 e0       	ldi	r17, 0x00	; 0
    3236:	89 91       	ld	r24, Y+
    3238:	60 91 56 05 	lds	r22, 0x0556
    323c:	70 91 57 05 	lds	r23, 0x0557
    3240:	db 01       	movw	r26, r22
    3242:	18 96       	adiw	r26, 0x08	; 8
    3244:	ed 91       	ld	r30, X+
    3246:	fc 91       	ld	r31, X
    3248:	19 97       	sbiw	r26, 0x09	; 9
    324a:	88 23       	and	r24, r24
    324c:	31 f0       	breq	.+12     	; 0x325a <puts+0x40>
    324e:	09 95       	icall
    3250:	89 2b       	or	r24, r25
    3252:	89 f3       	breq	.-30     	; 0x3236 <puts+0x1c>
    3254:	0f ef       	ldi	r16, 0xFF	; 255
    3256:	1f ef       	ldi	r17, 0xFF	; 255
    3258:	ee cf       	rjmp	.-36     	; 0x3236 <puts+0x1c>
    325a:	8a e0       	ldi	r24, 0x0A	; 10
    325c:	09 95       	icall
    325e:	89 2b       	or	r24, r25
    3260:	11 f4       	brne	.+4      	; 0x3266 <puts+0x4c>
    3262:	c8 01       	movw	r24, r16
    3264:	02 c0       	rjmp	.+4      	; 0x326a <puts+0x50>
    3266:	8f ef       	ldi	r24, 0xFF	; 255
    3268:	9f ef       	ldi	r25, 0xFF	; 255
    326a:	df 91       	pop	r29
    326c:	cf 91       	pop	r28
    326e:	1f 91       	pop	r17
    3270:	0f 91       	pop	r16
    3272:	08 95       	ret

00003274 <snprintf>:
    3274:	ae e0       	ldi	r26, 0x0E	; 14
    3276:	b0 e0       	ldi	r27, 0x00	; 0
    3278:	e0 e4       	ldi	r30, 0x40	; 64
    327a:	f9 e1       	ldi	r31, 0x19	; 25
    327c:	0c 94 71 16 	jmp	0x2ce2	; 0x2ce2 <__prologue_saves__+0x1c>
    3280:	0d 89       	ldd	r16, Y+21	; 0x15
    3282:	1e 89       	ldd	r17, Y+22	; 0x16
    3284:	8f 89       	ldd	r24, Y+23	; 0x17
    3286:	98 8d       	ldd	r25, Y+24	; 0x18
    3288:	26 e0       	ldi	r18, 0x06	; 6
    328a:	2c 83       	std	Y+4, r18	; 0x04
    328c:	1a 83       	std	Y+2, r17	; 0x02
    328e:	09 83       	std	Y+1, r16	; 0x01
    3290:	97 ff       	sbrs	r25, 7
    3292:	02 c0       	rjmp	.+4      	; 0x3298 <snprintf+0x24>
    3294:	80 e0       	ldi	r24, 0x00	; 0
    3296:	90 e8       	ldi	r25, 0x80	; 128
    3298:	01 97       	sbiw	r24, 0x01	; 1
    329a:	9e 83       	std	Y+6, r25	; 0x06
    329c:	8d 83       	std	Y+5, r24	; 0x05
    329e:	ae 01       	movw	r20, r28
    32a0:	45 5e       	subi	r20, 0xE5	; 229
    32a2:	5f 4f       	sbci	r21, 0xFF	; 255
    32a4:	69 8d       	ldd	r22, Y+25	; 0x19
    32a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32a8:	ce 01       	movw	r24, r28
    32aa:	01 96       	adiw	r24, 0x01	; 1
    32ac:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <vfprintf>
    32b0:	4d 81       	ldd	r20, Y+5	; 0x05
    32b2:	5e 81       	ldd	r21, Y+6	; 0x06
    32b4:	57 fd       	sbrc	r21, 7
    32b6:	0a c0       	rjmp	.+20     	; 0x32cc <snprintf+0x58>
    32b8:	2f 81       	ldd	r18, Y+7	; 0x07
    32ba:	38 85       	ldd	r19, Y+8	; 0x08
    32bc:	42 17       	cp	r20, r18
    32be:	53 07       	cpc	r21, r19
    32c0:	0c f4       	brge	.+2      	; 0x32c4 <snprintf+0x50>
    32c2:	9a 01       	movw	r18, r20
    32c4:	f8 01       	movw	r30, r16
    32c6:	e2 0f       	add	r30, r18
    32c8:	f3 1f       	adc	r31, r19
    32ca:	10 82       	st	Z, r1
    32cc:	2e 96       	adiw	r28, 0x0e	; 14
    32ce:	e4 e0       	ldi	r30, 0x04	; 4
    32d0:	0c 94 8d 16 	jmp	0x2d1a	; 0x2d1a <__epilogue_restores__+0x1c>

000032d4 <__ultoa_invert>:
    32d4:	fa 01       	movw	r30, r20
    32d6:	aa 27       	eor	r26, r26
    32d8:	28 30       	cpi	r18, 0x08	; 8
    32da:	51 f1       	breq	.+84     	; 0x3330 <__ultoa_invert+0x5c>
    32dc:	20 31       	cpi	r18, 0x10	; 16
    32de:	81 f1       	breq	.+96     	; 0x3340 <__ultoa_invert+0x6c>
    32e0:	e8 94       	clt
    32e2:	6f 93       	push	r22
    32e4:	6e 7f       	andi	r22, 0xFE	; 254
    32e6:	6e 5f       	subi	r22, 0xFE	; 254
    32e8:	7f 4f       	sbci	r23, 0xFF	; 255
    32ea:	8f 4f       	sbci	r24, 0xFF	; 255
    32ec:	9f 4f       	sbci	r25, 0xFF	; 255
    32ee:	af 4f       	sbci	r26, 0xFF	; 255
    32f0:	b1 e0       	ldi	r27, 0x01	; 1
    32f2:	3e d0       	rcall	.+124    	; 0x3370 <__ultoa_invert+0x9c>
    32f4:	b4 e0       	ldi	r27, 0x04	; 4
    32f6:	3c d0       	rcall	.+120    	; 0x3370 <__ultoa_invert+0x9c>
    32f8:	67 0f       	add	r22, r23
    32fa:	78 1f       	adc	r23, r24
    32fc:	89 1f       	adc	r24, r25
    32fe:	9a 1f       	adc	r25, r26
    3300:	a1 1d       	adc	r26, r1
    3302:	68 0f       	add	r22, r24
    3304:	79 1f       	adc	r23, r25
    3306:	8a 1f       	adc	r24, r26
    3308:	91 1d       	adc	r25, r1
    330a:	a1 1d       	adc	r26, r1
    330c:	6a 0f       	add	r22, r26
    330e:	71 1d       	adc	r23, r1
    3310:	81 1d       	adc	r24, r1
    3312:	91 1d       	adc	r25, r1
    3314:	a1 1d       	adc	r26, r1
    3316:	20 d0       	rcall	.+64     	; 0x3358 <__ultoa_invert+0x84>
    3318:	09 f4       	brne	.+2      	; 0x331c <__ultoa_invert+0x48>
    331a:	68 94       	set
    331c:	3f 91       	pop	r19
    331e:	2a e0       	ldi	r18, 0x0A	; 10
    3320:	26 9f       	mul	r18, r22
    3322:	11 24       	eor	r1, r1
    3324:	30 19       	sub	r19, r0
    3326:	30 5d       	subi	r19, 0xD0	; 208
    3328:	31 93       	st	Z+, r19
    332a:	de f6       	brtc	.-74     	; 0x32e2 <__ultoa_invert+0xe>
    332c:	cf 01       	movw	r24, r30
    332e:	08 95       	ret
    3330:	46 2f       	mov	r20, r22
    3332:	47 70       	andi	r20, 0x07	; 7
    3334:	40 5d       	subi	r20, 0xD0	; 208
    3336:	41 93       	st	Z+, r20
    3338:	b3 e0       	ldi	r27, 0x03	; 3
    333a:	0f d0       	rcall	.+30     	; 0x335a <__ultoa_invert+0x86>
    333c:	c9 f7       	brne	.-14     	; 0x3330 <__ultoa_invert+0x5c>
    333e:	f6 cf       	rjmp	.-20     	; 0x332c <__ultoa_invert+0x58>
    3340:	46 2f       	mov	r20, r22
    3342:	4f 70       	andi	r20, 0x0F	; 15
    3344:	40 5d       	subi	r20, 0xD0	; 208
    3346:	4a 33       	cpi	r20, 0x3A	; 58
    3348:	18 f0       	brcs	.+6      	; 0x3350 <__ultoa_invert+0x7c>
    334a:	49 5d       	subi	r20, 0xD9	; 217
    334c:	31 fd       	sbrc	r19, 1
    334e:	40 52       	subi	r20, 0x20	; 32
    3350:	41 93       	st	Z+, r20
    3352:	02 d0       	rcall	.+4      	; 0x3358 <__ultoa_invert+0x84>
    3354:	a9 f7       	brne	.-22     	; 0x3340 <__ultoa_invert+0x6c>
    3356:	ea cf       	rjmp	.-44     	; 0x332c <__ultoa_invert+0x58>
    3358:	b4 e0       	ldi	r27, 0x04	; 4
    335a:	a6 95       	lsr	r26
    335c:	97 95       	ror	r25
    335e:	87 95       	ror	r24
    3360:	77 95       	ror	r23
    3362:	67 95       	ror	r22
    3364:	ba 95       	dec	r27
    3366:	c9 f7       	brne	.-14     	; 0x335a <__ultoa_invert+0x86>
    3368:	00 97       	sbiw	r24, 0x00	; 0
    336a:	61 05       	cpc	r22, r1
    336c:	71 05       	cpc	r23, r1
    336e:	08 95       	ret
    3370:	9b 01       	movw	r18, r22
    3372:	ac 01       	movw	r20, r24
    3374:	0a 2e       	mov	r0, r26
    3376:	06 94       	lsr	r0
    3378:	57 95       	ror	r21
    337a:	47 95       	ror	r20
    337c:	37 95       	ror	r19
    337e:	27 95       	ror	r18
    3380:	ba 95       	dec	r27
    3382:	c9 f7       	brne	.-14     	; 0x3376 <__ultoa_invert+0xa2>
    3384:	62 0f       	add	r22, r18
    3386:	73 1f       	adc	r23, r19
    3388:	84 1f       	adc	r24, r20
    338a:	95 1f       	adc	r25, r21
    338c:	a0 1d       	adc	r26, r0
    338e:	08 95       	ret

00003390 <strtod>:
    3390:	a0 e0       	ldi	r26, 0x00	; 0
    3392:	b0 e0       	ldi	r27, 0x00	; 0
    3394:	ee ec       	ldi	r30, 0xCE	; 206
    3396:	f9 e1       	ldi	r31, 0x19	; 25
    3398:	0c 94 69 16 	jmp	0x2cd2	; 0x2cd2 <__prologue_saves__+0xc>
    339c:	8b 01       	movw	r16, r22
    339e:	61 15       	cp	r22, r1
    33a0:	71 05       	cpc	r23, r1
    33a2:	21 f0       	breq	.+8      	; 0x33ac <strtod+0x1c>
    33a4:	db 01       	movw	r26, r22
    33a6:	8c 93       	st	X, r24
    33a8:	11 96       	adiw	r26, 0x01	; 1
    33aa:	9c 93       	st	X, r25
    33ac:	ec 01       	movw	r28, r24
    33ae:	5e 01       	movw	r10, r28
    33b0:	bf ef       	ldi	r27, 0xFF	; 255
    33b2:	ab 1a       	sub	r10, r27
    33b4:	bb 0a       	sbc	r11, r27
    33b6:	75 01       	movw	r14, r10
    33b8:	c8 80       	ld	r12, Y
    33ba:	8c 2d       	mov	r24, r12
    33bc:	90 e0       	ldi	r25, 0x00	; 0
    33be:	0e 94 2b 1b 	call	0x3656	; 0x3656 <isspace>
    33c2:	89 2b       	or	r24, r25
    33c4:	11 f0       	breq	.+4      	; 0x33ca <strtod+0x3a>
    33c6:	e5 01       	movw	r28, r10
    33c8:	f2 cf       	rjmp	.-28     	; 0x33ae <strtod+0x1e>
    33ca:	ed e2       	ldi	r30, 0x2D	; 45
    33cc:	ce 12       	cpse	r12, r30
    33ce:	08 c0       	rjmp	.+16     	; 0x33e0 <strtod+0x50>
    33d0:	7e 01       	movw	r14, r28
    33d2:	f2 e0       	ldi	r31, 0x02	; 2
    33d4:	ef 0e       	add	r14, r31
    33d6:	f1 1c       	adc	r15, r1
    33d8:	c9 80       	ldd	r12, Y+1	; 0x01
    33da:	dd 24       	eor	r13, r13
    33dc:	d3 94       	inc	r13
    33de:	09 c0       	rjmp	.+18     	; 0x33f2 <strtod+0x62>
    33e0:	2b e2       	ldi	r18, 0x2B	; 43
    33e2:	c2 12       	cpse	r12, r18
    33e4:	05 c0       	rjmp	.+10     	; 0x33f0 <strtod+0x60>
    33e6:	7e 01       	movw	r14, r28
    33e8:	42 e0       	ldi	r20, 0x02	; 2
    33ea:	e4 0e       	add	r14, r20
    33ec:	f1 1c       	adc	r15, r1
    33ee:	c9 80       	ldd	r12, Y+1	; 0x01
    33f0:	d1 2c       	mov	r13, r1
    33f2:	e7 01       	movw	r28, r14
    33f4:	21 97       	sbiw	r28, 0x01	; 1
    33f6:	43 e0       	ldi	r20, 0x03	; 3
    33f8:	50 e0       	ldi	r21, 0x00	; 0
    33fa:	68 eb       	ldi	r22, 0xB8	; 184
    33fc:	71 e0       	ldi	r23, 0x01	; 1
    33fe:	ce 01       	movw	r24, r28
    3400:	0e 94 33 1b 	call	0x3666	; 0x3666 <strncasecmp_P>
    3404:	89 2b       	or	r24, r25
    3406:	c1 f4       	brne	.+48     	; 0x3438 <strtod+0xa8>
    3408:	23 96       	adiw	r28, 0x03	; 3
    340a:	45 e0       	ldi	r20, 0x05	; 5
    340c:	50 e0       	ldi	r21, 0x00	; 0
    340e:	63 eb       	ldi	r22, 0xB3	; 179
    3410:	71 e0       	ldi	r23, 0x01	; 1
    3412:	ce 01       	movw	r24, r28
    3414:	0e 94 33 1b 	call	0x3666	; 0x3666 <strncasecmp_P>
    3418:	89 2b       	or	r24, r25
    341a:	09 f4       	brne	.+2      	; 0x341e <strtod+0x8e>
    341c:	25 96       	adiw	r28, 0x05	; 5
    341e:	01 15       	cp	r16, r1
    3420:	11 05       	cpc	r17, r1
    3422:	19 f0       	breq	.+6      	; 0x342a <strtod+0x9a>
    3424:	d8 01       	movw	r26, r16
    3426:	cd 93       	st	X+, r28
    3428:	dc 93       	st	X, r29
    342a:	d1 10       	cpse	r13, r1
    342c:	06 c1       	rjmp	.+524    	; 0x363a <strtod+0x2aa>
    342e:	60 e0       	ldi	r22, 0x00	; 0
    3430:	70 e0       	ldi	r23, 0x00	; 0
    3432:	80 e8       	ldi	r24, 0x80	; 128
    3434:	9f e7       	ldi	r25, 0x7F	; 127
    3436:	0a c1       	rjmp	.+532    	; 0x364c <strtod+0x2bc>
    3438:	43 e0       	ldi	r20, 0x03	; 3
    343a:	50 e0       	ldi	r21, 0x00	; 0
    343c:	60 eb       	ldi	r22, 0xB0	; 176
    343e:	71 e0       	ldi	r23, 0x01	; 1
    3440:	ce 01       	movw	r24, r28
    3442:	0e 94 33 1b 	call	0x3666	; 0x3666 <strncasecmp_P>
    3446:	89 2b       	or	r24, r25
    3448:	59 f4       	brne	.+22     	; 0x3460 <strtod+0xd0>
    344a:	01 15       	cp	r16, r1
    344c:	11 05       	cpc	r17, r1
    344e:	09 f4       	brne	.+2      	; 0x3452 <strtod+0xc2>
    3450:	f9 c0       	rjmp	.+498    	; 0x3644 <strtod+0x2b4>
    3452:	b2 e0       	ldi	r27, 0x02	; 2
    3454:	eb 0e       	add	r14, r27
    3456:	f1 1c       	adc	r15, r1
    3458:	f8 01       	movw	r30, r16
    345a:	f1 82       	std	Z+1, r15	; 0x01
    345c:	e0 82       	st	Z, r14
    345e:	f2 c0       	rjmp	.+484    	; 0x3644 <strtod+0x2b4>
    3460:	f7 01       	movw	r30, r14
    3462:	60 e0       	ldi	r22, 0x00	; 0
    3464:	70 e0       	ldi	r23, 0x00	; 0
    3466:	cb 01       	movw	r24, r22
    3468:	c0 e0       	ldi	r28, 0x00	; 0
    346a:	d0 e0       	ldi	r29, 0x00	; 0
    346c:	7f 01       	movw	r14, r30
    346e:	a0 ed       	ldi	r26, 0xD0	; 208
    3470:	aa 2e       	mov	r10, r26
    3472:	ac 0c       	add	r10, r12
    3474:	29 e0       	ldi	r18, 0x09	; 9
    3476:	2a 15       	cp	r18, r10
    3478:	30 f1       	brcs	.+76     	; 0x34c6 <strtod+0x136>
    347a:	4d 2d       	mov	r20, r13
    347c:	42 60       	ori	r20, 0x02	; 2
    347e:	b4 2e       	mov	r11, r20
    3480:	2d 2d       	mov	r18, r13
    3482:	28 70       	andi	r18, 0x08	; 8
    3484:	d2 fe       	sbrs	r13, 2
    3486:	04 c0       	rjmp	.+8      	; 0x3490 <strtod+0x100>
    3488:	21 11       	cpse	r18, r1
    348a:	25 c0       	rjmp	.+74     	; 0x34d6 <strtod+0x146>
    348c:	21 96       	adiw	r28, 0x01	; 1
    348e:	23 c0       	rjmp	.+70     	; 0x34d6 <strtod+0x146>
    3490:	21 11       	cpse	r18, r1
    3492:	21 97       	sbiw	r28, 0x01	; 1
    3494:	a5 e0       	ldi	r26, 0x05	; 5
    3496:	b0 e0       	ldi	r27, 0x00	; 0
    3498:	9b 01       	movw	r18, r22
    349a:	ac 01       	movw	r20, r24
    349c:	0e 94 4e 1b 	call	0x369c	; 0x369c <__muluhisi3>
    34a0:	66 0f       	add	r22, r22
    34a2:	77 1f       	adc	r23, r23
    34a4:	88 1f       	adc	r24, r24
    34a6:	99 1f       	adc	r25, r25
    34a8:	6a 0d       	add	r22, r10
    34aa:	71 1d       	adc	r23, r1
    34ac:	81 1d       	adc	r24, r1
    34ae:	91 1d       	adc	r25, r1
    34b0:	68 39       	cpi	r22, 0x98	; 152
    34b2:	a9 e9       	ldi	r26, 0x99	; 153
    34b4:	7a 07       	cpc	r23, r26
    34b6:	8a 07       	cpc	r24, r26
    34b8:	a9 e1       	ldi	r26, 0x19	; 25
    34ba:	9a 07       	cpc	r25, r26
    34bc:	60 f0       	brcs	.+24     	; 0x34d6 <strtod+0x146>
    34be:	bd 2d       	mov	r27, r13
    34c0:	b6 60       	ori	r27, 0x06	; 6
    34c2:	bb 2e       	mov	r11, r27
    34c4:	08 c0       	rjmp	.+16     	; 0x34d6 <strtod+0x146>
    34c6:	2e ef       	ldi	r18, 0xFE	; 254
    34c8:	a2 12       	cpse	r10, r18
    34ca:	0a c0       	rjmp	.+20     	; 0x34e0 <strtod+0x150>
    34cc:	d3 fc       	sbrc	r13, 3
    34ce:	50 c0       	rjmp	.+160    	; 0x3570 <strtod+0x1e0>
    34d0:	4d 2d       	mov	r20, r13
    34d2:	48 60       	ori	r20, 0x08	; 8
    34d4:	b4 2e       	mov	r11, r20
    34d6:	31 96       	adiw	r30, 0x01	; 1
    34d8:	d7 01       	movw	r26, r14
    34da:	cc 90       	ld	r12, X
    34dc:	db 2c       	mov	r13, r11
    34de:	c6 cf       	rjmp	.-116    	; 0x346c <strtod+0xdc>
    34e0:	2c 2d       	mov	r18, r12
    34e2:	2f 7d       	andi	r18, 0xDF	; 223
    34e4:	25 34       	cpi	r18, 0x45	; 69
    34e6:	09 f0       	breq	.+2      	; 0x34ea <strtod+0x15a>
    34e8:	43 c0       	rjmp	.+134    	; 0x3570 <strtod+0x1e0>
    34ea:	a0 81       	ld	r26, Z
    34ec:	ad 32       	cpi	r26, 0x2D	; 45
    34ee:	41 f4       	brne	.+16     	; 0x3500 <strtod+0x170>
    34f0:	bd 2d       	mov	r27, r13
    34f2:	b0 61       	ori	r27, 0x10	; 16
    34f4:	db 2e       	mov	r13, r27
    34f6:	7f 01       	movw	r14, r30
    34f8:	22 e0       	ldi	r18, 0x02	; 2
    34fa:	e2 0e       	add	r14, r18
    34fc:	f1 1c       	adc	r15, r1
    34fe:	0c c0       	rjmp	.+24     	; 0x3518 <strtod+0x188>
    3500:	7f 01       	movw	r14, r30
    3502:	ab 32       	cpi	r26, 0x2B	; 43
    3504:	31 f0       	breq	.+12     	; 0x3512 <strtod+0x182>
    3506:	4f ef       	ldi	r20, 0xFF	; 255
    3508:	e4 1a       	sub	r14, r20
    350a:	f4 0a       	sbc	r15, r20
    350c:	21 e0       	ldi	r18, 0x01	; 1
    350e:	30 e0       	ldi	r19, 0x00	; 0
    3510:	06 c0       	rjmp	.+12     	; 0x351e <strtod+0x18e>
    3512:	a2 e0       	ldi	r26, 0x02	; 2
    3514:	ea 0e       	add	r14, r26
    3516:	f1 1c       	adc	r15, r1
    3518:	a1 81       	ldd	r26, Z+1	; 0x01
    351a:	22 e0       	ldi	r18, 0x02	; 2
    351c:	30 e0       	ldi	r19, 0x00	; 0
    351e:	a0 53       	subi	r26, 0x30	; 48
    3520:	aa 30       	cpi	r26, 0x0A	; 10
    3522:	18 f0       	brcs	.+6      	; 0x352a <strtod+0x19a>
    3524:	e2 1a       	sub	r14, r18
    3526:	f3 0a       	sbc	r15, r19
    3528:	23 c0       	rjmp	.+70     	; 0x3570 <strtod+0x1e0>
    352a:	f7 01       	movw	r30, r14
    352c:	20 e0       	ldi	r18, 0x00	; 0
    352e:	30 e0       	ldi	r19, 0x00	; 0
    3530:	20 38       	cpi	r18, 0x80	; 128
    3532:	bc e0       	ldi	r27, 0x0C	; 12
    3534:	3b 07       	cpc	r19, r27
    3536:	5c f4       	brge	.+22     	; 0x354e <strtod+0x1be>
    3538:	a9 01       	movw	r20, r18
    353a:	44 0f       	add	r20, r20
    353c:	55 1f       	adc	r21, r21
    353e:	44 0f       	add	r20, r20
    3540:	55 1f       	adc	r21, r21
    3542:	24 0f       	add	r18, r20
    3544:	35 1f       	adc	r19, r21
    3546:	22 0f       	add	r18, r18
    3548:	33 1f       	adc	r19, r19
    354a:	2a 0f       	add	r18, r26
    354c:	31 1d       	adc	r19, r1
    354e:	af 01       	movw	r20, r30
    3550:	4f 5f       	subi	r20, 0xFF	; 255
    3552:	5f 4f       	sbci	r21, 0xFF	; 255
    3554:	7a 01       	movw	r14, r20
    3556:	a0 81       	ld	r26, Z
    3558:	a0 53       	subi	r26, 0x30	; 48
    355a:	aa 30       	cpi	r26, 0x0A	; 10
    355c:	10 f4       	brcc	.+4      	; 0x3562 <strtod+0x1d2>
    355e:	fa 01       	movw	r30, r20
    3560:	e7 cf       	rjmp	.-50     	; 0x3530 <strtod+0x1a0>
    3562:	d4 fe       	sbrs	r13, 4
    3564:	03 c0       	rjmp	.+6      	; 0x356c <strtod+0x1dc>
    3566:	31 95       	neg	r19
    3568:	21 95       	neg	r18
    356a:	31 09       	sbc	r19, r1
    356c:	c2 0f       	add	r28, r18
    356e:	d3 1f       	adc	r29, r19
    3570:	d1 fe       	sbrs	r13, 1
    3572:	09 c0       	rjmp	.+18     	; 0x3586 <strtod+0x1f6>
    3574:	01 15       	cp	r16, r1
    3576:	11 05       	cpc	r17, r1
    3578:	31 f0       	breq	.+12     	; 0x3586 <strtod+0x1f6>
    357a:	e1 e0       	ldi	r30, 0x01	; 1
    357c:	ee 1a       	sub	r14, r30
    357e:	f1 08       	sbc	r15, r1
    3580:	d8 01       	movw	r26, r16
    3582:	ed 92       	st	X+, r14
    3584:	fc 92       	st	X, r15
    3586:	0e 94 da 10 	call	0x21b4	; 0x21b4 <__floatunsisf>
    358a:	2d 2d       	mov	r18, r13
    358c:	23 70       	andi	r18, 0x03	; 3
    358e:	23 30       	cpi	r18, 0x03	; 3
    3590:	19 f0       	breq	.+6      	; 0x3598 <strtod+0x208>
    3592:	4b 01       	movw	r8, r22
    3594:	5c 01       	movw	r10, r24
    3596:	06 c0       	rjmp	.+12     	; 0x35a4 <strtod+0x214>
    3598:	4b 01       	movw	r8, r22
    359a:	5c 01       	movw	r10, r24
    359c:	b7 fa       	bst	r11, 7
    359e:	b0 94       	com	r11
    35a0:	b7 f8       	bld	r11, 7
    35a2:	b0 94       	com	r11
    35a4:	20 e0       	ldi	r18, 0x00	; 0
    35a6:	30 e0       	ldi	r19, 0x00	; 0
    35a8:	a9 01       	movw	r20, r18
    35aa:	c5 01       	movw	r24, r10
    35ac:	b4 01       	movw	r22, r8
    35ae:	0e 94 3a 10 	call	0x2074	; 0x2074 <__cmpsf2>
    35b2:	88 23       	and	r24, r24
    35b4:	09 f4       	brne	.+2      	; 0x35b8 <strtod+0x228>
    35b6:	3e c0       	rjmp	.+124    	; 0x3634 <strtod+0x2a4>
    35b8:	d7 ff       	sbrs	r29, 7
    35ba:	06 c0       	rjmp	.+12     	; 0x35c8 <strtod+0x238>
    35bc:	d1 95       	neg	r29
    35be:	c1 95       	neg	r28
    35c0:	d1 09       	sbc	r29, r1
    35c2:	0f ec       	ldi	r16, 0xCF	; 207
    35c4:	11 e0       	ldi	r17, 0x01	; 1
    35c6:	02 c0       	rjmp	.+4      	; 0x35cc <strtod+0x23c>
    35c8:	07 ee       	ldi	r16, 0xE7	; 231
    35ca:	11 e0       	ldi	r17, 0x01	; 1
    35cc:	68 01       	movw	r12, r16
    35ce:	b8 e1       	ldi	r27, 0x18	; 24
    35d0:	cb 1a       	sub	r12, r27
    35d2:	d1 08       	sbc	r13, r1
    35d4:	90 e2       	ldi	r25, 0x20	; 32
    35d6:	e9 2e       	mov	r14, r25
    35d8:	f1 2c       	mov	r15, r1
    35da:	ce 15       	cp	r28, r14
    35dc:	df 05       	cpc	r29, r15
    35de:	74 f0       	brlt	.+28     	; 0x35fc <strtod+0x26c>
    35e0:	f8 01       	movw	r30, r16
    35e2:	25 91       	lpm	r18, Z+
    35e4:	35 91       	lpm	r19, Z+
    35e6:	45 91       	lpm	r20, Z+
    35e8:	54 91       	lpm	r21, Z
    35ea:	c5 01       	movw	r24, r10
    35ec:	b4 01       	movw	r22, r8
    35ee:	0e 94 1a 12 	call	0x2434	; 0x2434 <__mulsf3>
    35f2:	4b 01       	movw	r8, r22
    35f4:	5c 01       	movw	r10, r24
    35f6:	ce 19       	sub	r28, r14
    35f8:	df 09       	sbc	r29, r15
    35fa:	ef cf       	rjmp	.-34     	; 0x35da <strtod+0x24a>
    35fc:	04 50       	subi	r16, 0x04	; 4
    35fe:	11 09       	sbc	r17, r1
    3600:	f5 94       	asr	r15
    3602:	e7 94       	ror	r14
    3604:	0c 15       	cp	r16, r12
    3606:	1d 05       	cpc	r17, r13
    3608:	41 f7       	brne	.-48     	; 0x35da <strtod+0x24a>
    360a:	8a 2d       	mov	r24, r10
    360c:	88 0f       	add	r24, r24
    360e:	8b 2d       	mov	r24, r11
    3610:	88 1f       	adc	r24, r24
    3612:	8f 3f       	cpi	r24, 0xFF	; 255
    3614:	49 f0       	breq	.+18     	; 0x3628 <strtod+0x298>
    3616:	20 e0       	ldi	r18, 0x00	; 0
    3618:	30 e0       	ldi	r19, 0x00	; 0
    361a:	a9 01       	movw	r20, r18
    361c:	c5 01       	movw	r24, r10
    361e:	b4 01       	movw	r22, r8
    3620:	0e 94 3a 10 	call	0x2074	; 0x2074 <__cmpsf2>
    3624:	81 11       	cpse	r24, r1
    3626:	06 c0       	rjmp	.+12     	; 0x3634 <strtod+0x2a4>
    3628:	82 e2       	ldi	r24, 0x22	; 34
    362a:	90 e0       	ldi	r25, 0x00	; 0
    362c:	90 93 5b 05 	sts	0x055B, r25
    3630:	80 93 5a 05 	sts	0x055A, r24
    3634:	c5 01       	movw	r24, r10
    3636:	b4 01       	movw	r22, r8
    3638:	09 c0       	rjmp	.+18     	; 0x364c <strtod+0x2bc>
    363a:	60 e0       	ldi	r22, 0x00	; 0
    363c:	70 e0       	ldi	r23, 0x00	; 0
    363e:	80 e8       	ldi	r24, 0x80	; 128
    3640:	9f ef       	ldi	r25, 0xFF	; 255
    3642:	04 c0       	rjmp	.+8      	; 0x364c <strtod+0x2bc>
    3644:	60 e0       	ldi	r22, 0x00	; 0
    3646:	70 e0       	ldi	r23, 0x00	; 0
    3648:	80 ec       	ldi	r24, 0xC0	; 192
    364a:	9f e7       	ldi	r25, 0x7F	; 127
    364c:	cd b7       	in	r28, 0x3d	; 61
    364e:	de b7       	in	r29, 0x3e	; 62
    3650:	ec e0       	ldi	r30, 0x0C	; 12
    3652:	0c 94 85 16 	jmp	0x2d0a	; 0x2d0a <__epilogue_restores__+0xc>

00003656 <isspace>:
    3656:	91 11       	cpse	r25, r1
    3658:	1e c0       	rjmp	.+60     	; 0x3696 <__ctype_isfalse>
    365a:	80 32       	cpi	r24, 0x20	; 32
    365c:	19 f0       	breq	.+6      	; 0x3664 <isspace+0xe>
    365e:	89 50       	subi	r24, 0x09	; 9
    3660:	85 50       	subi	r24, 0x05	; 5
    3662:	d0 f7       	brcc	.-12     	; 0x3658 <isspace+0x2>
    3664:	08 95       	ret

00003666 <strncasecmp_P>:
    3666:	fb 01       	movw	r30, r22
    3668:	dc 01       	movw	r26, r24
    366a:	41 50       	subi	r20, 0x01	; 1
    366c:	50 40       	sbci	r21, 0x00	; 0
    366e:	88 f0       	brcs	.+34     	; 0x3692 <strncasecmp_P+0x2c>
    3670:	8d 91       	ld	r24, X+
    3672:	81 34       	cpi	r24, 0x41	; 65
    3674:	1c f0       	brlt	.+6      	; 0x367c <strncasecmp_P+0x16>
    3676:	8b 35       	cpi	r24, 0x5B	; 91
    3678:	0c f4       	brge	.+2      	; 0x367c <strncasecmp_P+0x16>
    367a:	80 5e       	subi	r24, 0xE0	; 224
    367c:	65 91       	lpm	r22, Z+
    367e:	61 34       	cpi	r22, 0x41	; 65
    3680:	1c f0       	brlt	.+6      	; 0x3688 <strncasecmp_P+0x22>
    3682:	6b 35       	cpi	r22, 0x5B	; 91
    3684:	0c f4       	brge	.+2      	; 0x3688 <strncasecmp_P+0x22>
    3686:	60 5e       	subi	r22, 0xE0	; 224
    3688:	86 1b       	sub	r24, r22
    368a:	61 11       	cpse	r22, r1
    368c:	71 f3       	breq	.-36     	; 0x366a <strncasecmp_P+0x4>
    368e:	99 0b       	sbc	r25, r25
    3690:	08 95       	ret
    3692:	88 1b       	sub	r24, r24
    3694:	fc cf       	rjmp	.-8      	; 0x368e <strncasecmp_P+0x28>

00003696 <__ctype_isfalse>:
    3696:	99 27       	eor	r25, r25
    3698:	88 27       	eor	r24, r24

0000369a <__ctype_istrue>:
    369a:	08 95       	ret

0000369c <__muluhisi3>:
    369c:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <__umulhisi3>
    36a0:	a5 9f       	mul	r26, r21
    36a2:	90 0d       	add	r25, r0
    36a4:	b4 9f       	mul	r27, r20
    36a6:	90 0d       	add	r25, r0
    36a8:	a4 9f       	mul	r26, r20
    36aa:	80 0d       	add	r24, r0
    36ac:	91 1d       	adc	r25, r1
    36ae:	11 24       	eor	r1, r1
    36b0:	08 95       	ret

000036b2 <__umulhisi3>:
    36b2:	a2 9f       	mul	r26, r18
    36b4:	b0 01       	movw	r22, r0
    36b6:	b3 9f       	mul	r27, r19
    36b8:	c0 01       	movw	r24, r0
    36ba:	a3 9f       	mul	r26, r19
    36bc:	70 0d       	add	r23, r0
    36be:	81 1d       	adc	r24, r1
    36c0:	11 24       	eor	r1, r1
    36c2:	91 1d       	adc	r25, r1
    36c4:	b2 9f       	mul	r27, r18
    36c6:	70 0d       	add	r23, r0
    36c8:	81 1d       	adc	r24, r1
    36ca:	11 24       	eor	r1, r1
    36cc:	91 1d       	adc	r25, r1
    36ce:	08 95       	ret

000036d0 <_exit>:
    36d0:	f8 94       	cli

000036d2 <__stop_program>:
    36d2:	ff cf       	rjmp	.-2      	; 0x36d2 <__stop_program>
